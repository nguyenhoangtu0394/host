{"version":3,"file":"vendors-node_modules_pnpm_react-native-async-storage_async-storage_2_0_0_react-native_0_78_2_-a9cd72.chunk.bundle","sources":["webpack://sas-auth/../../node_modules/.pnpm/@react-native-async-storage+async-storage@2.0.0_react-native@0.78.2_@babel+core@7.26.0_@babel_j6zo4twaxjwpvkkvqhe5r6rwsm/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.native.ts","webpack://sas-auth/../../node_modules/.pnpm/@react-native-async-storage+async-storage@2.0.0_react-native@0.78.2_@babel+core@7.26.0_@babel_j6zo4twaxjwpvkkvqhe5r6rwsm/node_modules/@react-native-async-storage/async-storage/src/RCTAsyncStorage.ts","webpack://sas-auth/../../node_modules/.pnpm/@react-native-async-storage+async-storage@2.0.0_react-native@0.78.2_@babel+core@7.26.0_@babel_j6zo4twaxjwpvkkvqhe5r6rwsm/node_modules/@react-native-async-storage/async-storage/src/helpers.ts","webpack://sas-auth/../../node_modules/.pnpm/@react-native-async-storage+async-storage@2.0.0_react-native@0.78.2_@babel+core@7.26.0_@babel_j6zo4twaxjwpvkkvqhe5r6rwsm/node_modules/@react-native-async-storage/async-storage/src/hooks.ts","webpack://sas-auth/../../node_modules/.pnpm/@react-native-async-storage+async-storage@2.0.0_react-native@0.78.2_@babel+core@7.26.0_@babel_j6zo4twaxjwpvkkvqhe5r6rwsm/node_modules/@react-native-async-storage/async-storage/src/index.ts","webpack://sas-auth/../../node_modules/.pnpm/@react-native-async-storage+async-storage@2.0.0_react-native@0.78.2_@babel+core@7.26.0_@babel_j6zo4twaxjwpvkkvqhe5r6rwsm/node_modules/@react-native-async-storage/async-storage/src/shouldFallbackToLegacyNativeModule.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from \"./helpers\";\nimport RCTAsyncStorage from \"./RCTAsyncStorage\";\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from \"./types\";\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Uninstall, rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory, then rebuild and re-run the app.\n\n  • Make sure your project's \\`package.json\\` depends on \\`@react-native-async-storage/async-storage\\`, even if you only depend on it indirectly through other dependencies. CLI only autolinks native modules found in your \\`package.json\\`.\n\n  • If this happens while testing with Jest, check out how to integrate AsyncStorage here: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the GitHub repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n","import { NativeModules, TurboModuleRegistry } from \"react-native\";\nimport { shouldFallbackToLegacyNativeModule } from \"./shouldFallbackToLegacyNativeModule\";\n\n// TurboModuleRegistry falls back to NativeModules so we don't have to try go\n// assign NativeModules' counterparts if TurboModuleRegistry would resolve\n// with undefined.\nlet RCTAsyncStorage = TurboModuleRegistry\n  ? TurboModuleRegistry.get(\"PlatformLocalStorage\") || // Support for external modules, like react-native-windows\n    TurboModuleRegistry.get(\"RNC_AsyncSQLiteDBStorage\") ||\n    TurboModuleRegistry.get(\"RNCAsyncStorage\")\n  : NativeModules[\"PlatformLocalStorage\"] || // Support for external modules, like react-native-windows\n    NativeModules[\"RNC_AsyncSQLiteDBStorage\"] ||\n    NativeModules[\"RNCAsyncStorage\"];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get(\"AsyncSQLiteDBStorage\") ||\n      TurboModuleRegistry.get(\"AsyncLocalStorage\");\n  } else {\n    RCTAsyncStorage =\n      NativeModules[\"AsyncSQLiteDBStorage\"] ||\n      NativeModules[\"AsyncLocalStorage\"];\n  }\n}\n\nexport default RCTAsyncStorage;\n","import type { ErrorLike } from \"./types\";\n\nexport function checkValidArgs(\n  keyValuePairs: readonly unknown[],\n  callback: unknown\n) {\n  if (\n    !Array.isArray(keyValuePairs) ||\n    keyValuePairs.length === 0 ||\n    !Array.isArray(keyValuePairs[0])\n  ) {\n    throw new Error(\n      \"[AsyncStorage] Expected array of key-value pairs as first argument to multiSet\"\n    );\n  }\n\n  if (callback && typeof callback !== \"function\") {\n    if (Array.isArray(callback)) {\n      throw new Error(\n        \"[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?\"\n      );\n    }\n\n    throw new Error(\n      \"[AsyncStorage] Expected function as second argument to multiSet\"\n    );\n  }\n}\n\nexport function checkValidInput(...input: unknown[]) {\n  const [key, value] = input;\n\n  if (typeof key !== \"string\") {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`\n    );\n  }\n\n  if (input.length > 1 && typeof value !== \"string\") {\n    if (value == null) {\n      throw new Error(\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    }\n  }\n}\n\nexport function convertError(error?: ErrorLike): Error | null {\n  if (!error) {\n    return null;\n  }\n\n  const out = new Error(error.message) as Error & ErrorLike;\n  out[\"key\"] = error.key;\n  return out;\n}\n\nexport function convertErrors(\n  errs?: ErrorLike[]\n): ReadonlyArray<Error | null> | null {\n  const errors = ensureArray(errs);\n  return errors ? errors.map((e) => convertError(e)) : null;\n}\n\nfunction ensureArray(e?: ErrorLike | ErrorLike[]): ErrorLike[] | null {\n  if (Array.isArray(e)) {\n    return e.length === 0 ? null : e;\n  } else if (e) {\n    return [e];\n  } else {\n    return null;\n  }\n}\n","import AsyncStorage from \"./AsyncStorage\";\nimport type { AsyncStorageHook } from \"./types\";\n\nexport function useAsyncStorage(key: string): AsyncStorageHook {\n  return {\n    getItem: (...args) => AsyncStorage.getItem(key, ...args),\n    setItem: (...args) => AsyncStorage.setItem(key, ...args),\n    mergeItem: (...args) => AsyncStorage.mergeItem(key, ...args),\n    removeItem: (...args) => AsyncStorage.removeItem(key, ...args),\n  };\n}\n","import AsyncStorage from \"./AsyncStorage\";\n\nexport { useAsyncStorage } from \"./hooks\";\n\nexport type { AsyncStorageStatic } from \"./types\";\n\nexport default AsyncStorage;\n","import { NativeModules } from \"react-native\";\n\nexport function shouldFallbackToLegacyNativeModule(): boolean {\n  const expoConstants =\n    NativeModules[\"NativeUnimoduleProxy\"]?.modulesConstants?.ExponentConstants;\n\n  if (expoConstants) {\n    /**\n     * In SDK <= 39, appOwnership is defined in managed apps but executionEnvironment is not.\n     * In bare React Native apps using expo-constants, appOwnership is never defined, so\n     * isLegacySdkVersion will be false in that context.\n     */\n    const isLegacySdkVersion =\n      expoConstants.appOwnership && !expoConstants.executionEnvironment;\n\n    /**\n     * Expo managed apps don't include the @react-native-async-storage/async-storage\n     * native modules yet, but the API interface is the same, so we can use the version\n     * exported from React Native still.\n     *\n     * If in future releases (eg: @react-native-async-storage/async-storage >= 2.0.0) this\n     * will likely not be valid anymore, and the package will need to be included in the Expo SDK\n     * to continue to work.\n     */\n    if (\n      isLegacySdkVersion ||\n      [\"storeClient\", \"standalone\"].includes(expoConstants.executionEnvironment)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":["_default","_RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","key","callback","Promise","resolve","reject","_helpers","errors","result","_result_","value","errs","error","err","keys","getRequests","getKeys","map","reqLength","errorList","i","request","requestResult","setImmediate","getRequest","promiseResult","keyValuePairs","RCTAsyncStorage","_reactnative","_shouldFallbackToLegacyNativeModule","checkValidArgs","checkValidInput","convertError","convertErrors","Array","input","_input","console","out","ensureArray","e","useAsyncStorage","_AsyncStorage1","_AsyncStorage2","_AsyncStorage3","_AsyncStorage4","args","_hooks","_AsyncStorage","shouldFallbackToLegacyNativeModule","_NativeModules_NativeUnimoduleProxy_modulesConstants","expoConstants","isLegacySdkVersion"],"mappings":"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"}