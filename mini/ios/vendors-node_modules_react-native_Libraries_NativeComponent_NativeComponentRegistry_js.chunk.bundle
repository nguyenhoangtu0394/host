(self["webpackChunkMini"] = self["webpackChunkMini"] || []).push([["vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"], {
28713: (function (__unused_webpack_module, exports) {
"use strict";

function _class_private_field_loose_base(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}
exports._ = _class_private_field_loose_base;


}),
7979: (function (__unused_webpack_module, exports) {
"use strict";

var id = 0;
function _class_private_field_loose_key(name) {
    return "__private_" + id++ + "_" + name;
}
exports._ = _class_private_field_loose_key;


}),
616: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _super_prop_base = __webpack_require__(70777);
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) exports._ = _get = Reflect.get;
    else {
        exports._ = _get = function get(target, property, receiver) {
            var base = _super_prop_base._(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) return desc.get.call(receiver || target);
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
exports._ = _get;


}),
70777: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _get_prototype_of = __webpack_require__(86880);
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of._(object);
        if (object === null) break;
    }
    return object;
}
exports._ = _super_prop_base;


}),
92956: (function (module) {
"use strict";

function nullthrows(x, message) {
    if (x != null) {
        return x;
    }
    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1; // Skip nullthrows's own stack frame.
    throw error;
}
module.exports = nullthrows;
module.exports["default"] = nullthrows;
Object.defineProperty(module.exports, "__esModule", ({
    value: true
}));


}),
97267: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    get: function() {
        return get;
    },
    getWithFallback_DEPRECATED: function() {
        return getWithFallback_DEPRECATED;
    },
    setRuntimeConfigProvider: function() {
        return setRuntimeConfigProvider;
    },
    unstable_hasStaticViewConfig: function() {
        return unstable_hasStaticViewConfig;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _getNativeComponentAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69093));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _ReactNativeViewConfigRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(25232));
var _StaticViewConfigValidator = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(65181));
var _ViewConfig = __webpack_require__(20764);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(16360));
var getRuntimeConfig;
function setRuntimeConfigProvider(runtimeConfigProvider) {
    if (getRuntimeConfig === undefined) {
        getRuntimeConfig = runtimeConfigProvider;
    }
}
function get(name, viewConfigProvider) {
    _ReactNativeViewConfigRegistry.register(name, ()=>{
        var _ref = (getRuntimeConfig === null || getRuntimeConfig === void 0 ? void 0 : getRuntimeConfig(name)) ?? {
            native: !__webpack_require__.g.RN$Bridgeless,
            verify: false
        }, native = _ref.native, verify = _ref.verify;
        var viewConfig;
        if (native) {
            viewConfig = (0, _getNativeComponentAttributes.default)(name) ?? (0, _ViewConfig.createViewConfig)(viewConfigProvider());
        } else {
            viewConfig = (0, _ViewConfig.createViewConfig)(viewConfigProvider()) ?? (0, _getNativeComponentAttributes.default)(name);
        }
        (0, _invariant.default)(viewConfig != null, 'NativeComponentRegistry.get: both static and native view config are missing for native component "%s".', name);
        if (verify) {
            var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);
            if (nativeViewConfig == null) {
                return viewConfig;
            }
            var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;
            var validationOutput = _StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);
            if (validationOutput.type === 'invalid') {
                console.error(_StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));
            }
        }
        return viewConfig;
    });
    return name;
}
function getWithFallback_DEPRECATED(name, viewConfigProvider) {
    if (getRuntimeConfig == null) {
        if (hasNativeViewConfig(name)) {
            return get(name, viewConfigProvider);
        }
    } else {
        if (getRuntimeConfig(name) != null) {
            return get(name, viewConfigProvider);
        }
    }
    var FallbackNativeComponent = function(props) {
        return null;
    };
    FallbackNativeComponent.displayName = `Fallback(${name})`;
    return FallbackNativeComponent;
}
function hasNativeViewConfig(name) {
    (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');
    return _UIManager.default.getViewManagerConfig(name) != null;
}
function unstable_hasStaticViewConfig(name) {
    var native = ((getRuntimeConfig === null || getRuntimeConfig === void 0 ? void 0 : getRuntimeConfig(name)) ?? {
        native: true
    }).native;
    return !native;
}


}),
53655: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "unstable_hasComponent", ({
    enumerable: true,
    get: function() {
        return unstable_hasComponent;
    }
}));
var componentNameToExists = new Map();
function unstable_hasComponent(name) {
    var hasNativeComponent = componentNameToExists.get(name);
    if (hasNativeComponent == null) {
        if (__webpack_require__.g.__nativeComponentRegistry__hasComponent) {
            hasNativeComponent = __webpack_require__.g.__nativeComponentRegistry__hasComponent(name);
            componentNameToExists.set(name, hasNativeComponent);
        } else {
            throw `unstable_hasComponent('${name}'): Global function is not registered`;
        }
    }
    return hasNativeComponent;
}


}),
84925: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(94356), exports));
var _default = _NativeSourceCode.default;


}),
40142: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeUIManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(23242), exports));
var _default = _NativeUIManager.default;


}),
19784: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(48754), exports));
var _default = _NativeDeviceInfo.default;


}),
48754: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.getEnforcing('DeviceInfo');
var constants = null;
var NativeDeviceInfo = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeDeviceInfo;


}),
94356: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.getEnforcing('SourceCode');
var constants = null;
var NativeSourceCode = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeSourceCode;


}),
23242: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('UIManager');


}),
34650: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format strict-local
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _processAspectRatio = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5304));
var _processBackgroundImage = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33518));
var _processBoxShadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47204));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var _processFilter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(62354));
var _processFontVariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45989));
var _processTransform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88823));
var _processTransformOrigin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91166));
var _sizesDiffer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24395));
var colorAttributes = {
    process: _processColor.default
};
var ReactNativeStyleAttributes = {
    /**
   * Layout
   */ alignContent: true,
    alignItems: true,
    alignSelf: true,
    aspectRatio: {
        process: _processAspectRatio.default
    },
    borderBottomWidth: true,
    borderEndWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    borderStartWidth: true,
    borderTopWidth: true,
    boxSizing: true,
    columnGap: true,
    borderWidth: true,
    bottom: true,
    direction: true,
    display: true,
    end: true,
    flex: true,
    flexBasis: true,
    flexDirection: true,
    flexGrow: true,
    flexShrink: true,
    flexWrap: true,
    gap: true,
    height: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    justifyContent: true,
    left: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    overflow: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    position: true,
    right: true,
    rowGap: true,
    start: true,
    top: true,
    width: true,
    zIndex: true,
    /**
   * Shadow
   */ elevation: true,
    shadowColor: colorAttributes,
    shadowOffset: {
        diff: _sizesDiffer.default
    },
    shadowOpacity: true,
    shadowRadius: true,
    /**
   * Transform
   */ transform: {
        process: _processTransform.default
    },
    transformOrigin: {
        process: _processTransformOrigin.default
    },
    /**
   * Filter
   */ filter: {
        process: _processFilter.default
    },
    /**
   * MixBlendMode
   */ mixBlendMode: true,
    /**
   * Isolation
   */ isolation: true,
    /*
   * BoxShadow
   */ boxShadow: {
        process: _processBoxShadow.default
    },
    /**
   * Linear Gradient
   */ experimental_backgroundImage: {
        process: _processBackgroundImage.default
    },
    /**
   * View
   */ backfaceVisibility: true,
    backgroundColor: colorAttributes,
    borderBlockColor: colorAttributes,
    borderBlockEndColor: colorAttributes,
    borderBlockStartColor: colorAttributes,
    borderBottomColor: colorAttributes,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderColor: colorAttributes,
    borderCurve: true,
    borderEndColor: colorAttributes,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderLeftColor: colorAttributes,
    borderRadius: true,
    borderRightColor: colorAttributes,
    borderStartColor: colorAttributes,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    borderStyle: true,
    borderTopColor: colorAttributes,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    cursor: true,
    opacity: true,
    outlineColor: colorAttributes,
    outlineOffset: true,
    outlineStyle: true,
    outlineWidth: true,
    pointerEvents: true,
    /**
   * Text
   */ color: colorAttributes,
    fontFamily: true,
    fontSize: true,
    fontStyle: true,
    fontVariant: {
        process: _processFontVariant.default
    },
    fontWeight: true,
    includeFontPadding: true,
    letterSpacing: true,
    lineHeight: true,
    textAlign: true,
    textAlignVertical: true,
    textDecorationColor: colorAttributes,
    textDecorationLine: true,
    textDecorationStyle: true,
    textShadowColor: colorAttributes,
    textShadowOffset: true,
    textShadowRadius: true,
    textTransform: true,
    userSelect: true,
    verticalAlign: true,
    writingDirection: true,
    /**
   * Image
   */ overlayColor: colorAttributes,
    resizeMode: true,
    tintColor: colorAttributes,
    objectFit: true
};
module.exports = ReactNativeStyleAttributes;


}),
75296: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _Systrace = __webpack_require__(725);
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
// FIXME: use typed events
/**
 * Global EventEmitter used by the native platform to emit events to JavaScript.
 * Events are identified by globally unique event names.
 *
 * NativeModules that emit events should instead subclass `NativeEventEmitter`.
 */ var RCTDeviceEventEmitter = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    _inherits._(RCTDeviceEventEmitter, EventEmitter);
    function RCTDeviceEventEmitter() {
        _class_call_check._(this, RCTDeviceEventEmitter);
        return _call_super._(this, RCTDeviceEventEmitter, arguments);
    }
    _create_class._(RCTDeviceEventEmitter, [
        {
            // Add systrace to RCTDeviceEventEmitter.emit method for debugging
            key: "emit",
            value: function emit(eventType, ...args) {
                var _$_get;
                (0, _Systrace.beginEvent)(()=>`RCTDeviceEventEmitter.emit#${eventType}`);
                (_$_get = _get._(_get_prototype_of._(RCTDeviceEventEmitter.prototype), "emit", this)).call.apply(_$_get, [
                    this,
                    eventType
                ].concat(_to_consumable_array._(args)));
                (0, _Systrace.endEvent)();
            }
        }
    ]);
    return RCTDeviceEventEmitter;
}(_EventEmitter.default);
var instance = new RCTDeviceEventEmitter();
Object.defineProperty(__webpack_require__.g, '__rctDeviceEventEmitter', {
    configurable: true,
    value: instance
});
var _default = instance;


}),
77127: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var PixelRatio = (__webpack_require__(52712)/* ["default"] */["default"]);
var Platform = __webpack_require__(181);
var pickScale = (__webpack_require__(93421)/* .pickScale */.pickScale);
var _require = __webpack_require__(51173), getAndroidResourceFolderName = _require.getAndroidResourceFolderName, getAndroidResourceIdentifier = _require.getAndroidResourceIdentifier, getBasePath = _require.getBasePath;
var invariant = __webpack_require__(56481);
/**
 * Returns a path like 'assets/AwesomeModule/icon@2x.png'
 */ function getScaledAssetPath(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
/**
 * Returns a path like 'drawable-mdpi/icon.png'
 */ function getAssetPathInDrawableFolder(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var drawableFolder = getAndroidResourceFolderName(asset, scale);
    var fileName = getAndroidResourceIdentifier(asset);
    return drawableFolder + '/' + fileName + '.' + asset.type;
}
/**
 * Returns true if the asset can be loaded over the network.
 *
 * This prevents an issue loading XML assets on Android. XML asset types like
 * vector drawables can only be loaded from precompiled source. Android does
 * not support loading these over the network, and AAPT precompiles data by
 * breaking path data and resource information apart into multiple files,
 * stuffing it all into the resource table. As a result, we should only attempt
 * to load resources as we would in release builds: by the resource name.
 *
 * For more information, see:
 * https://issuetracker.google.com/issues/62435069
 * https://issuetracker.google.com/issues/68293189
 */ function assetSupportsNetworkLoads(asset) {
    return !(asset.type === 'xml' && Platform.OS === 'android');
}
var AssetSourceResolver = /*#__PURE__*/ function() {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
        _class_call_check._(this, AssetSourceResolver);
        this.serverUrl = serverUrl;
        this.jsbundleUrl = jsbundleUrl;
        this.asset = asset;
    }
    _create_class._(AssetSourceResolver, [
        {
            key: "isLoadedFromServer",
            value: function isLoadedFromServer() {
                return this.serverUrl != null && this.serverUrl !== '' && assetSupportsNetworkLoads(this.asset);
            }
        },
        {
            key: "isLoadedFromFileSystem",
            value: function isLoadedFromFileSystem() {
                var _this_jsbundleUrl;
                return this.jsbundleUrl != null && ((_this_jsbundleUrl = this.jsbundleUrl) === null || _this_jsbundleUrl === void 0 ? void 0 : _this_jsbundleUrl.startsWith('file://'));
            }
        },
        {
            key: "defaultAsset",
            value: function defaultAsset() {
                if (this.isLoadedFromServer()) {
                    return this.assetServerURL();
                }
                if (this.asset.resolver != null) {
                    return this.getAssetUsingResolver(this.asset.resolver);
                }
                if (Platform.OS === 'android') {
                    return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
                } else {
                    return this.scaledAssetURLNearBundle();
                }
            }
        },
        {
            key: "getAssetUsingResolver",
            value: function getAssetUsingResolver(resolver) {
                switch(resolver){
                    case 'android':
                        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
                    case 'generic':
                        return this.scaledAssetURLNearBundle();
                    default:
                        throw new Error("Don't know how to get asset via provided resolver: " + resolver + '\nAsset: ' + JSON.stringify(this.asset, null, '\t') + '\nPossible resolvers are:' + JSON.stringify([
                            'android',
                            'generic'
                        ], null, '\t'));
                }
            }
        },
        {
            /**
   * Returns an absolute URL which can be used to fetch the asset
   * from the devserver
   */ key: "assetServerURL",
            value: function assetServerURL() {
                invariant(this.serverUrl != null, 'need server to load from');
                return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
            }
        },
        {
            /**
   * Resolves to just the scaled asset filename
   * E.g. 'assets/AwesomeModule/icon@2x.png'
   */ key: "scaledAssetPath",
            value: function scaledAssetPath() {
                return this.fromSource(getScaledAssetPath(this.asset));
            }
        },
        {
            /**
   * Resolves to where the bundle is running from, with a scaled asset filename
   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'
   */ key: "scaledAssetURLNearBundle",
            value: function scaledAssetURLNearBundle() {
                var path = this.jsbundleUrl ?? 'file://';
                return this.fromSource(// Assets can have relative paths outside of the project root.
                // When bundling them we replace `../` with `_` to make sure they
                // don't end up outside of the expected assets directory.
                path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
            }
        },
        {
            /**
   * The default location of assets bundled with the app, located by
   * resource identifier
   * The Android resource system picks the correct scale.
   * E.g. 'assets_awesomemodule_icon'
   */ key: "resourceIdentifierWithoutScale",
            value: function resourceIdentifierWithoutScale() {
                invariant(Platform.OS === 'android', 'resource identifiers work on Android');
                return this.fromSource(getAndroidResourceIdentifier(this.asset));
            }
        },
        {
            /**
   * If the jsbundle is running from a sideload location, this resolves assets
   * relative to its location
   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'
   */ key: "drawableFolderInBundle",
            value: function drawableFolderInBundle() {
                var path = this.jsbundleUrl ?? 'file://';
                return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
            }
        },
        {
            key: "fromSource",
            value: function fromSource(source) {
                return {
                    __packager_asset: true,
                    width: this.asset.width,
                    height: this.asset.height,
                    uri: source,
                    scale: pickScale(this.asset.scales, PixelRatio.get())
                };
            }
        }
    ]);
    return AssetSourceResolver;
}();
AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;


}),
93421: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getUrlCacheBreaker: function() {
        return getUrlCacheBreaker;
    },
    pickScale: function() {
        return pickScale;
    },
    setUrlCacheBreaker: function() {
        return setUrlCacheBreaker;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _PixelRatio = /*#__PURE__*/ _interop_require_default._(__webpack_require__(52712));
var cacheBreaker;
var warnIfCacheBreakerUnset = true;
function pickScale(scales, deviceScale) {
    var requiredDeviceScale = deviceScale ?? _PixelRatio.default.get();
    // Packager guarantees that `scales` array is sorted
    for(var i = 0; i < scales.length; i++){
        if (scales[i] >= requiredDeviceScale) {
            return scales[i];
        }
    }
    // If nothing matches, device scale is larger than any available
    // scales, so we return the biggest one. Unless the array is empty,
    // in which case we default to 1
    return scales[scales.length - 1] || 1;
}
function setUrlCacheBreaker(appendage) {
    cacheBreaker = appendage;
}
function getUrlCacheBreaker() {
    if (cacheBreaker == null) {
        if (false) {}
        return '';
    }
    return cacheBreaker;
}


}),
63980: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // Utilities for resolving an asset into a `source` for e.g. `Image`
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84925));
var AssetSourceResolver = __webpack_require__(77127);
var pickScale = (__webpack_require__(93421)/* .pickScale */.pickScale);
var AssetRegistry = __webpack_require__(49219);
var _customSourceTransformers = [];
var _serverURL;
var _scriptURL;
var _sourceCodeScriptURL;
function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL != null) {
        return _sourceCodeScriptURL;
    }
    _sourceCodeScriptURL = _NativeSourceCode.default.getConstants().scriptURL;
    return _sourceCodeScriptURL;
}
function getDevServerURL() {
    if (_serverURL === undefined) {
        var sourceCodeScriptURL = getSourceCodeScriptURL();
        var match = sourceCodeScriptURL === null || sourceCodeScriptURL === void 0 ? void 0 : sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
        if (match) {
            // jsBundle was loaded from network
            _serverURL = match[0];
        } else {
            // jsBundle was loaded from file
            _serverURL = null;
        }
    }
    return _serverURL;
}
function _coerceLocalScriptURL(scriptURL) {
    var normalizedScriptURL = scriptURL;
    if (normalizedScriptURL != null) {
        if (normalizedScriptURL.startsWith('assets://')) {
            // android: running from within assets, no offline path to use
            return null;
        }
        normalizedScriptURL = normalizedScriptURL.substring(0, normalizedScriptURL.lastIndexOf('/') + 1);
        if (!normalizedScriptURL.includes('://')) {
            // Add file protocol in case we have an absolute file path and not a URL.
            // This shouldn't really be necessary. scriptURL should be a URL.
            normalizedScriptURL = 'file://' + normalizedScriptURL;
        }
    }
    return normalizedScriptURL;
}
function getScriptURL() {
    if (_scriptURL === undefined) {
        _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }
    return _scriptURL;
}
/**
 * `transformer` can optionally be used to apply a custom transformation when
 * resolving an asset source. This methods overrides all other custom transformers
 * that may have been previously registered.
 */ function setCustomSourceTransformer(transformer) {
    _customSourceTransformers = [
        transformer
    ];
}
/**
 * Adds a `transformer` into the chain of custom source transformers, which will
 * be applied in the order registered, until one returns a non-null value.
 */ function addCustomSourceTransformer(transformer) {
    _customSourceTransformers.push(transformer);
}
/**
 * `source` is either a number (opaque type returned by require('./foo.png'))
 * or an `ImageSource` like { uri: '<http location || file path>' }
 */ function resolveAssetSource(source) {
    if (source == null || typeof source === 'object') {
        // $FlowFixMe[incompatible-exact] `source` doesn't exactly match `ResolvedAssetSource`
        // $FlowFixMe[incompatible-return] `source` doesn't exactly match `ResolvedAssetSource`
        return source;
    }
    var asset = AssetRegistry.getAssetByID(source);
    if (!asset) {
        return null;
    }
    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
    // Apply (chained) custom source transformers, if any
    if (_customSourceTransformers) {
        for (var customSourceTransformer of _customSourceTransformers){
            var transformedSource = customSourceTransformer(resolver);
            if (transformedSource != null) {
                return transformedSource;
            }
        }
    }
    return resolver.defaultAsset();
}
resolveAssetSource.pickScale = pickScale;
resolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;
resolveAssetSource.addCustomSourceTransformer = addCustomSourceTransformer;
module.exports = resolveAssetSource;


}),
46560: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _ReactNativeStyleAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34650));
var _ViewConfigIgnore = __webpack_require__(72291);
var bubblingEventTypes = {
    // Generic Events
    topPress: {
        phasedRegistrationNames: {
            bubbled: 'onPress',
            captured: 'onPressCapture'
        }
    },
    topChange: {
        phasedRegistrationNames: {
            bubbled: 'onChange',
            captured: 'onChangeCapture'
        }
    },
    topFocus: {
        phasedRegistrationNames: {
            bubbled: 'onFocus',
            captured: 'onFocusCapture'
        }
    },
    topBlur: {
        phasedRegistrationNames: {
            bubbled: 'onBlur',
            captured: 'onBlurCapture'
        }
    },
    topSubmitEditing: {
        phasedRegistrationNames: {
            bubbled: 'onSubmitEditing',
            captured: 'onSubmitEditingCapture'
        }
    },
    topEndEditing: {
        phasedRegistrationNames: {
            bubbled: 'onEndEditing',
            captured: 'onEndEditingCapture'
        }
    },
    topKeyPress: {
        phasedRegistrationNames: {
            bubbled: 'onKeyPress',
            captured: 'onKeyPressCapture'
        }
    },
    // Touch Events
    topTouchStart: {
        phasedRegistrationNames: {
            bubbled: 'onTouchStart',
            captured: 'onTouchStartCapture'
        }
    },
    topTouchMove: {
        phasedRegistrationNames: {
            bubbled: 'onTouchMove',
            captured: 'onTouchMoveCapture'
        }
    },
    topTouchCancel: {
        phasedRegistrationNames: {
            bubbled: 'onTouchCancel',
            captured: 'onTouchCancelCapture'
        }
    },
    topTouchEnd: {
        phasedRegistrationNames: {
            bubbled: 'onTouchEnd',
            captured: 'onTouchEndCapture'
        }
    },
    // Experimental/Work in Progress Pointer Events (not yet ready for use)
    topClick: {
        phasedRegistrationNames: {
            captured: 'onClickCapture',
            bubbled: 'onClick'
        }
    },
    topPointerCancel: {
        phasedRegistrationNames: {
            captured: 'onPointerCancelCapture',
            bubbled: 'onPointerCancel'
        }
    },
    topPointerDown: {
        phasedRegistrationNames: {
            captured: 'onPointerDownCapture',
            bubbled: 'onPointerDown'
        }
    },
    topPointerMove: {
        phasedRegistrationNames: {
            captured: 'onPointerMoveCapture',
            bubbled: 'onPointerMove'
        }
    },
    topPointerUp: {
        phasedRegistrationNames: {
            captured: 'onPointerUpCapture',
            bubbled: 'onPointerUp'
        }
    },
    topPointerEnter: {
        phasedRegistrationNames: {
            captured: 'onPointerEnterCapture',
            bubbled: 'onPointerEnter',
            skipBubbling: true
        }
    },
    topPointerLeave: {
        phasedRegistrationNames: {
            captured: 'onPointerLeaveCapture',
            bubbled: 'onPointerLeave',
            skipBubbling: true
        }
    },
    topPointerOver: {
        phasedRegistrationNames: {
            captured: 'onPointerOverCapture',
            bubbled: 'onPointerOver'
        }
    },
    topPointerOut: {
        phasedRegistrationNames: {
            captured: 'onPointerOutCapture',
            bubbled: 'onPointerOut'
        }
    },
    topGotPointerCapture: {
        phasedRegistrationNames: {
            captured: 'onGotPointerCaptureCapture',
            bubbled: 'onGotPointerCapture'
        }
    },
    topLostPointerCapture: {
        phasedRegistrationNames: {
            captured: 'onLostPointerCaptureCapture',
            bubbled: 'onLostPointerCapture'
        }
    }
};
var directEventTypes = {
    topAccessibilityAction: {
        registrationName: 'onAccessibilityAction'
    },
    topAccessibilityTap: {
        registrationName: 'onAccessibilityTap'
    },
    topMagicTap: {
        registrationName: 'onMagicTap'
    },
    topAccessibilityEscape: {
        registrationName: 'onAccessibilityEscape'
    },
    topLayout: {
        registrationName: 'onLayout'
    },
    onGestureHandlerEvent: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: 'onGestureHandlerEvent'
    }),
    onGestureHandlerStateChange: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: 'onGestureHandlerStateChange'
    })
};
var validAttributesForNonEventProps = {
    // View Props
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityHint: true,
    accessibilityLanguage: true,
    accessibilityValue: true,
    accessibilityViewIsModal: true,
    accessibilityElementsHidden: true,
    accessibilityIgnoresInvertColors: true,
    accessibilityShowsLargeContentViewer: true,
    accessibilityLargeContentTitle: true,
    testID: true,
    backgroundColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    backfaceVisibility: true,
    cursor: true,
    opacity: true,
    shadowColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    shadowOffset: {
        diff: __webpack_require__(24395)
    },
    shadowOpacity: true,
    shadowRadius: true,
    needsOffscreenAlphaCompositing: true,
    overflow: true,
    shouldRasterizeIOS: true,
    transform: {
        diff: __webpack_require__(96940)
    },
    transformOrigin: true,
    accessibilityRole: true,
    accessibilityState: true,
    nativeID: true,
    pointerEvents: true,
    removeClippedSubviews: true,
    role: true,
    borderRadius: true,
    borderColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderCurve: true,
    borderWidth: true,
    borderBlockWidth: true,
    borderStyle: true,
    hitSlop: {
        diff: __webpack_require__(14691)
    },
    collapsable: true,
    collapsableChildren: true,
    filter: {
        process: (__webpack_require__(62354)/* ["default"] */["default"])
    },
    boxShadow: {
        process: (__webpack_require__(47204)/* ["default"] */["default"])
    },
    mixBlendMode: true,
    isolation: true,
    borderTopWidth: true,
    borderTopColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderRightWidth: true,
    borderRightColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBottomWidth: true,
    borderBottomColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderLeftWidth: true,
    borderLeftColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderStartWidth: true,
    borderBlockStartWidth: true,
    borderStartColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockStartColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderEndWidth: true,
    borderBlockEndWidth: true,
    borderEndColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockEndColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderTopEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderBottomEndRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    display: true,
    zIndex: true,
    // ShadowView properties
    top: true,
    right: true,
    start: true,
    end: true,
    bottom: true,
    left: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    width: true,
    height: true,
    minWidth: true,
    maxWidth: true,
    minHeight: true,
    maxHeight: true,
    // Also declared as ViewProps
    // borderTopWidth: true,
    // borderRightWidth: true,
    // borderBottomWidth: true,
    // borderLeftWidth: true,
    // borderStartWidth: true,
    // borderEndWidth: true,
    // borderWidth: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    flex: true,
    flexGrow: true,
    rowGap: true,
    columnGap: true,
    gap: true,
    flexShrink: true,
    flexBasis: true,
    flexDirection: true,
    flexWrap: true,
    justifyContent: true,
    alignItems: true,
    alignSelf: true,
    alignContent: true,
    position: true,
    aspectRatio: true,
    boxSizing: true,
    // Also declared as ViewProps
    // overflow: true,
    // display: true,
    direction: true,
    style: _ReactNativeStyleAttributes.default
};
// Props for bubbling and direct events
var validAttributesForEventProps = (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
    onLayout: true,
    onMagicTap: true,
    // Accessibility
    onAccessibilityAction: true,
    onAccessibilityEscape: true,
    onAccessibilityTap: true,
    // PanResponder handlers
    onMoveShouldSetResponder: true,
    onMoveShouldSetResponderCapture: true,
    onStartShouldSetResponder: true,
    onStartShouldSetResponderCapture: true,
    onResponderGrant: true,
    onResponderReject: true,
    onResponderStart: true,
    onResponderEnd: true,
    onResponderRelease: true,
    onResponderMove: true,
    onResponderTerminate: true,
    onResponderTerminationRequest: true,
    onShouldBlockNativeResponder: true,
    // Touch events
    onTouchStart: true,
    onTouchMove: true,
    onTouchEnd: true,
    onTouchCancel: true,
    // Pointer events
    onClick: true,
    onClickCapture: true,
    onPointerUp: true,
    onPointerDown: true,
    onPointerCancel: true,
    onPointerEnter: true,
    onPointerMove: true,
    onPointerLeave: true,
    onPointerOver: true,
    onPointerOut: true,
    onGotPointerCapture: true,
    onLostPointerCapture: true
});
/**
 * On iOS, view managers define all of a component's props.
 * All view managers extend RCTViewManager, and RCTViewManager declares these props.
 */ var PlatformBaseViewConfigIos = {
    bubblingEventTypes,
    directEventTypes,
    validAttributes: _object_spread._({}, validAttributesForNonEventProps, validAttributesForEventProps)
};
var _default = PlatformBaseViewConfigIos;


}),
21622: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _BaseViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(46560));
var PlatformBaseViewConfig = _BaseViewConfig.default;
var _default = PlatformBaseViewConfig;


}),
65181: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    stringifyValidationResult: function() {
        return stringifyValidationResult;
    },
    validate: function() {
        return validate;
    }
});
var _to_consumable_array = __webpack_require__(92716);
__webpack_require__(21839);
function validate(name, nativeViewConfig, staticViewConfig) {
    var differences = [];
    accumulateDifferences(differences, [], {
        bubblingEventTypes: nativeViewConfig.bubblingEventTypes,
        directEventTypes: nativeViewConfig.directEventTypes,
        uiViewClassName: nativeViewConfig.uiViewClassName,
        validAttributes: nativeViewConfig.validAttributes
    }, {
        bubblingEventTypes: staticViewConfig.bubblingEventTypes,
        directEventTypes: staticViewConfig.directEventTypes,
        uiViewClassName: staticViewConfig.uiViewClassName,
        validAttributes: staticViewConfig.validAttributes
    });
    if (differences.length === 0) {
        return {
            type: 'valid'
        };
    }
    return {
        type: 'invalid',
        differences
    };
}
function stringifyValidationResult(name, validationResult) {
    var differences = validationResult.differences;
    return [
        `StaticViewConfigValidator: Invalid static view config for '${name}'.`,
        ''
    ].concat(_to_consumable_array._(differences.map((difference)=>{
        var type = difference.type, path = difference.path;
        switch(type){
            case 'missing':
                return `- '${path.join('.')}' is missing.`;
            case 'unequal':
                return `- '${path.join('.')}' is the wrong value.`;
        }
    })), [
        ''
    ]).join('\n');
}
function accumulateDifferences(differences, path, nativeObject, staticObject) {
    for(var nativeKey in nativeObject){
        // $FlowFixMe[invalid-computed-prop]
        var nativeValue = nativeObject[nativeKey];
        if (!staticObject.hasOwnProperty(nativeKey)) {
            differences.push({
                path: _to_consumable_array._(path).concat([
                    nativeKey
                ]),
                type: 'missing',
                nativeValue
            });
            continue;
        }
        // $FlowFixMe[invalid-computed-prop]
        var staticValue = staticObject[nativeKey];
        var nativeValueIfObject = ifObject(nativeValue);
        if (nativeValueIfObject != null) {
            var staticValueIfObject = ifObject(staticValue);
            if (staticValueIfObject != null) {
                path.push(nativeKey);
                accumulateDifferences(differences, path, nativeValueIfObject, staticValueIfObject);
                path.pop();
                continue;
            }
        }
        if (nativeValue !== staticValue) {
            differences.push({
                path: _to_consumable_array._(path).concat([
                    nativeKey
                ]),
                type: 'unequal',
                nativeValue,
                staticValue
            });
        }
    }
}
function ifObject(value) {
    return typeof value === 'object' && !Array.isArray(value) ? value : null;
}


}),
20764: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "createViewConfig", ({
    enumerable: true,
    get: function() {
        return createViewConfig;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _PlatformBaseViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21622));
function createViewConfig(partialViewConfig) {
    return {
        uiViewClassName: partialViewConfig.uiViewClassName,
        Commands: {},
        bubblingEventTypes: composeIndexers(_PlatformBaseViewConfig.default.bubblingEventTypes, partialViewConfig.bubblingEventTypes),
        directEventTypes: composeIndexers(_PlatformBaseViewConfig.default.directEventTypes, partialViewConfig.directEventTypes),
        // $FlowFixMe[incompatible-return]
        validAttributes: composeIndexers(// $FlowFixMe[incompatible-call] `style` property confuses Flow.
        _PlatformBaseViewConfig.default.validAttributes, // $FlowFixMe[incompatible-call] `style` property confuses Flow.
        partialViewConfig.validAttributes)
    };
}
function composeIndexers(maybeA, maybeB) {
    return maybeA == null || maybeB == null ? maybeA ?? maybeB ?? {} : _object_spread._({}, maybeA, maybeB);
}


}),
72291: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ConditionallyIgnoredEventHandlers: function() {
        return ConditionallyIgnoredEventHandlers;
    },
    DynamicallyInjectedByGestureHandler: function() {
        return DynamicallyInjectedByGestureHandler;
    },
    isIgnored: function() {
        return isIgnored;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(181));
var ignoredViewConfigProps = new WeakSet();
function DynamicallyInjectedByGestureHandler(object) {
    ignoredViewConfigProps.add(object);
    return object;
}
function ConditionallyIgnoredEventHandlers(value) {
    if (_Platform.default.OS === 'ios') {
        return value;
    }
    return undefined;
}
function isIgnored(value) {
    if (typeof value === 'object' && value != null) {
        return ignoredViewConfigProps.has(value);
    }
    return false;
}


}),
65144: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeComponentRegistryUnstable = __webpack_require__(53655);
var _defineLazyObjectProperty = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53077));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(181));
var _FabricUIManager = __webpack_require__(4697);
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
function raiseSoftError(methodName, details) {
    console.error(`[ReactNative Architecture][JS] '${methodName}' is not available in the new React Native architecture.` + (details ? ` ${details}` : ''));
}
var getUIManagerConstants = __webpack_require__.g.RN$LegacyInterop_UIManager_getConstants;
var getUIManagerConstantsCached = function() {
    var wasCalledOnce = false;
    var result = {};
    return ()=>{
        if (!wasCalledOnce) {
            result = (0, _nullthrows.default)(getUIManagerConstants)();
            wasCalledOnce = true;
        }
        return result;
    };
}();
var getConstantsForViewManager = __webpack_require__.g.RN$LegacyInterop_UIManager_getConstantsForViewManager;
var getDefaultEventTypes = __webpack_require__.g.RN$LegacyInterop_UIManager_getDefaultEventTypes;
var getDefaultEventTypesCached = function() {
    var wasCalledOnce = false;
    var result = null;
    return ()=>{
        if (!wasCalledOnce) {
            result = (0, _nullthrows.default)(getDefaultEventTypes)();
            wasCalledOnce = true;
        }
        return result;
    };
}();
/**
 * UIManager.js overrides these APIs.
 * Pull them out from the BridgelessUIManager implementation. So, we can ignore them.
 */ var UIManagerJSOverridenAPIs = {
    measure: (reactTag, callback)=>{
        raiseSoftError('measure');
    },
    measureInWindow: (reactTag, callback)=>{
        raiseSoftError('measureInWindow');
    },
    measureLayout: (reactTag, ancestorReactTag, errorCallback, callback)=>{
        raiseSoftError('measureLayout');
    },
    measureLayoutRelativeToParent: (reactTag, errorCallback, callback)=>{
        raiseSoftError('measureLayoutRelativeToParent');
    },
    dispatchViewManagerCommand: (reactTag, commandID, commandArgs)=>{
        raiseSoftError('dispatchViewManagerCommand');
    }
};
/**
 * Leave Unimplemented: The only thing that called these methods was the paper renderer.
 * In OSS, the New Architecture will just use the Fabric renderer, which uses
 * different APIs.
 */ var UIManagerJSUnusedInNewArchAPIs = {
    createView: (reactTag, viewName, rootTag, props)=>{
        raiseSoftError('createView');
    },
    updateView: (reactTag, viewName, props)=>{
        raiseSoftError('updateView');
    },
    setChildren: (containerTag, reactTags)=>{
        raiseSoftError('setChildren');
    },
    manageChildren: (containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices)=>{
        raiseSoftError('manageChildren');
    },
    setJSResponder: (reactTag, blockNativeResponder)=>{
        raiseSoftError('setJSResponder');
    },
    clearJSResponder: ()=>{
        raiseSoftError('clearJSResponder');
    }
};
/**
 * Leave unimplemented: These APIs are deprecated in UIManager. We will eventually remove
 * them from React Native.
 */ var UIManagerJSDeprecatedPlatformAPIs = _Platform.default.select({
    android: {}
});
var UIManagerJSPlatformAPIs = _Platform.default.select({
    android: {
        getConstantsForViewManager: (viewManagerName)=>{
            if (getConstantsForViewManager) {
                return getConstantsForViewManager(viewManagerName);
            }
            raiseSoftError('getConstantsForViewManager');
            return {};
        },
        getDefaultEventTypes: ()=>{
            if (getDefaultEventTypes) {
                return getDefaultEventTypesCached();
            }
            raiseSoftError('getDefaultEventTypes');
            return [];
        },
        setLayoutAnimationEnabledExperimental: (enabled)=>{
            /**
       * Layout animations are always enabled in the New Architecture.
       * They cannot be turned off.
       */ if (!enabled) {
                raiseSoftError('setLayoutAnimationEnabledExperimental(false)', 'Layout animations are always enabled in the New Architecture.');
            }
        },
        sendAccessibilityEvent: (reactTag, eventType)=>{
            // Keep this in sync with java:FabricUIManager.sendAccessibilityEventFromJS
            // and legacySendAccessibilityEvent.android.js
            var AccessibilityEvent = {
                TYPE_VIEW_FOCUSED: 0x00000008,
                TYPE_WINDOW_STATE_CHANGED: 0x00000020,
                TYPE_VIEW_CLICKED: 0x00000001,
                TYPE_VIEW_HOVER_ENTER: 0x00000080
            };
            var eventName = null;
            if (eventType === AccessibilityEvent.TYPE_VIEW_FOCUSED) {
                eventName = 'focus';
            } else if (eventType === AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {
                eventName = 'windowStateChange';
            } else if (eventType === AccessibilityEvent.TYPE_VIEW_CLICKED) {
                eventName = 'click';
            } else if (eventType === AccessibilityEvent.TYPE_VIEW_HOVER_ENTER) {
                eventName = 'viewHoverEnter';
            } else {
                console.error(`sendAccessibilityEvent() dropping event: Called with unsupported eventType: ${eventType}`);
                return;
            }
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`sendAccessibilityEvent() dropping event: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.sendAccessibilityEvent(shadowNode, eventName);
        }
    },
    ios: {
        /**
     * TODO(T174674274): Implement lazy loading of legacy view managers in the new architecture.
     *
     * Leave this unimplemented until we implement lazy loading of legacy modules and view managers in the new architecture.
     */ lazilyLoadView: (name)=>{
            raiseSoftError('lazilyLoadView');
            return {};
        },
        focus: (reactTag)=>{
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`focus() noop: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.dispatchCommand(shadowNode, 'focus', []);
        },
        blur: (reactTag)=>{
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`blur() noop: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.dispatchCommand(shadowNode, 'blur', []);
        }
    }
});
var UIManagerJS = _object_spread_props._(_object_spread._({}, UIManagerJSOverridenAPIs, UIManagerJSDeprecatedPlatformAPIs, UIManagerJSPlatformAPIs, UIManagerJSUnusedInNewArchAPIs), {
    getViewManagerConfig: (viewManagerName)=>{
        if (getUIManagerConstants) {
            var constants = getUIManagerConstantsCached();
            if (!constants[viewManagerName] && UIManagerJS.getConstantsForViewManager) {
                constants[viewManagerName] = UIManagerJS.getConstantsForViewManager(viewManagerName);
            }
            return constants[viewManagerName];
        } else {
            raiseSoftError(`getViewManagerConfig('${viewManagerName}')`, `If '${viewManagerName}' has a ViewManager and you want to retrieve its native ViewConfig, please turn on the native ViewConfig interop layer. If you want to see if this component is registered with React Native, please call hasViewManagerConfig('${viewManagerName}') instead.`);
            return null;
        }
    },
    hasViewManagerConfig: (viewManagerName)=>{
        return (0, _NativeComponentRegistryUnstable.unstable_hasComponent)(viewManagerName);
    },
    getConstants: ()=>{
        if (getUIManagerConstants) {
            return getUIManagerConstantsCached();
        } else {
            raiseSoftError('getConstants');
            return null;
        }
    },
    findSubviewIn: (reactTag, point, callback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (!shadowNode) {
            console.error(`findSubviewIn() noop: Cannot find view with reactTag ${reactTag}`);
            return;
        }
        FabricUIManager.findNodeAtPoint(shadowNode, point[0], point[1], function(internalInstanceHandle) {
            if (internalInstanceHandle == null) {
                console.error('findSubviewIn(): Cannot find node at point');
                return;
            }
            var instanceHandle = internalInstanceHandle;
            var node = instanceHandle.stateNode.node;
            if (!node) {
                console.error('findSubviewIn(): Cannot find node at point');
                return;
            }
            var nativeViewTag = instanceHandle.stateNode.canonical.nativeTag;
            FabricUIManager.measure(node, function(x, y, width, height, pageX, pageY) {
                callback(nativeViewTag, pageX, pageY, width, height);
            });
        });
    },
    viewIsDescendantOf: (reactTag, ancestorReactTag, callback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (!shadowNode) {
            console.error(`viewIsDescendantOf() noop: Cannot find view with reactTag ${reactTag}`);
            return;
        }
        var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
        if (!ancestorShadowNode) {
            console.error(`viewIsDescendantOf() noop: Cannot find view with ancestorReactTag ${ancestorReactTag}`);
            return;
        }
        // Keep this in sync with ReadOnlyNode.js
        var DOCUMENT_POSITION_CONTAINED_BY = 16;
        var result = FabricUIManager.compareDocumentPosition(ancestorShadowNode, shadowNode);
        // eslint-disable-next-line no-bitwise
        var isAncestor = (result & DOCUMENT_POSITION_CONTAINED_BY) !== 0;
        callback([
            isAncestor
        ]);
    },
    configureNextLayoutAnimation: (config, callback, errorCallback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        FabricUIManager.configureNextLayoutAnimation(config, callback, errorCallback);
    }
});
if (getUIManagerConstants) {
    Object.keys(getUIManagerConstantsCached()).forEach((viewConfigName)=>{
        UIManagerJS[viewConfigName] = getUIManagerConstantsCached()[viewConfigName];
    });
    if (UIManagerJS.getConstants().ViewManagerNames) {
        UIManagerJS.getConstants().ViewManagerNames.forEach((viewManagerName)=>{
            (0, _defineLazyObjectProperty.default)(UIManagerJS, viewManagerName, {
                get: ()=>(0, _nullthrows.default)(UIManagerJS.getConstantsForViewManager)(viewManagerName)
            });
        });
    }
}
module.exports = UIManagerJS;


}),
4697: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getFabricUIManager", ({
    enumerable: true,
    get: function() {
        return getFabricUIManager;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _defineLazyObjectProperty = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53077));
var nativeFabricUIManagerProxy;
// This is a list of all the methods in global.nativeFabricUIManager that we'll
// cache in JavaScript, as the current implementation of the binding
// creates a new host function every time methods are accessed.
var CACHED_PROPERTIES = [
    'createNode',
    'cloneNode',
    'cloneNodeWithNewChildren',
    'cloneNodeWithNewProps',
    'cloneNodeWithNewChildrenAndProps',
    'createChildSet',
    'appendChild',
    'appendChildToSet',
    'completeRoot',
    'measure',
    'measureInWindow',
    'measureLayout',
    'configureNextLayoutAnimation',
    'sendAccessibilityEvent',
    'findShadowNodeByTag_DEPRECATED',
    'setNativeProps',
    'dispatchCommand',
    'compareDocumentPosition',
    'getBoundingClientRect'
];
function getFabricUIManager() {
    if (nativeFabricUIManagerProxy == null && __webpack_require__.g.nativeFabricUIManager != null) {
        nativeFabricUIManagerProxy = createProxyWithCachedProperties(__webpack_require__.g.nativeFabricUIManager, CACHED_PROPERTIES);
    }
    return nativeFabricUIManagerProxy;
}
/**
 *
 * Returns an object that caches the specified properties the first time they
 * are accessed, and falls back to the original object for other properties.
 */ function createProxyWithCachedProperties(implementation, propertiesToCache) {
    var _loop = function(propertyName) {
        (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
            // $FlowExpectedError[prop-missing]
            get: ()=>implementation[propertyName]
        });
    };
    var proxy = Object.create(implementation);
    for (var propertyName of propertiesToCache)_loop(propertyName);
    return proxy;
}


}),
1394: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeUIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40142));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var NativeModules = __webpack_require__(40225);
var defineLazyObjectProperty = __webpack_require__(53077);
var Platform = __webpack_require__(181);
var UIManagerProperties = __webpack_require__(85238);
var viewManagerConfigs = {};
var triedLoadingConfig = new Set();
var NativeUIManagerConstants = {};
var isNativeUIManagerConstantsSet = false;
function getConstants() {
    if (!isNativeUIManagerConstantsSet) {
        NativeUIManagerConstants = _NativeUIManager.default.getConstants();
        isNativeUIManagerConstantsSet = true;
    }
    return NativeUIManagerConstants;
}
function getViewManagerConfig(viewManagerName) {
    if (viewManagerConfigs[viewManagerName] === undefined && __webpack_require__.g.nativeCallSyncHook && // If we're in the Chrome Debugger, let's not even try calling the sync method
    _NativeUIManager.default.getConstantsForViewManager) {
        try {
            viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        } catch (e) {
            console.error("NativeUIManager.getConstantsForViewManager('" + viewManagerName + "') threw an exception.", e);
            viewManagerConfigs[viewManagerName] = null;
        }
    }
    var config = viewManagerConfigs[viewManagerName];
    if (config) {
        return config;
    }
    // If we're in the Chrome Debugger, let's not even try calling the sync
    // method.
    if (!__webpack_require__.g.nativeCallSyncHook) {
        return config;
    }
    if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
        var result = (0, _nullthrows.default)(_NativeUIManager.default.lazilyLoadView)(viewManagerName);
        triedLoadingConfig.add(viewManagerName);
        if (result != null && result.viewConfig != null) {
            getConstants()[viewManagerName] = result.viewConfig;
            lazifyViewManagerConfig(viewManagerName);
        }
    }
    return viewManagerConfigs[viewManagerName];
}
// $FlowFixMe[cannot-spread-interface]
var UIManagerJS = _object_spread_props._(_object_spread._({}, _NativeUIManager.default), {
    createView (reactTag, viewName, rootTag, props) {
        if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {
            // This is necessary to force the initialization of native viewManager
            // classes in iOS when using static ViewConfigs
            getViewManagerConfig(viewName);
        }
        _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);
    },
    getConstants () {
        return getConstants();
    },
    getViewManagerConfig (viewManagerName) {
        return getViewManagerConfig(viewManagerName);
    },
    hasViewManagerConfig (viewManagerName) {
        return getViewManagerConfig(viewManagerName) != null;
    }
});
// TODO (T45220498): Remove this.
// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`
// instead of `UIManager.getViewManagerConfig()` off UIManager.js.
// This is a workaround for now.
// $FlowFixMe[prop-missing]
_NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;
function lazifyViewManagerConfig(viewName) {
    var viewConfig = getConstants()[viewName];
    viewManagerConfigs[viewName] = viewConfig;
    if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
            get: ()=>{
                var viewManager = NativeModules[viewConfig.Manager];
                var constants = {};
                viewManager && Object.keys(viewManager).forEach((key)=>{
                    var value = viewManager[key];
                    if (typeof value !== 'function') {
                        constants[key] = value;
                    }
                });
                return constants;
            }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
            get: ()=>{
                var viewManager = NativeModules[viewConfig.Manager];
                var commands = {};
                var index = 0;
                viewManager && Object.keys(viewManager).forEach((key)=>{
                    var value = viewManager[key];
                    if (typeof value === 'function') {
                        commands[key] = index++;
                    }
                });
                return commands;
            }
        });
    }
}
/**
 * Copies the ViewManager constants and commands into UIManager. This is
 * only needed for iOS, which puts the constants in the ViewManager
 * namespace instead of UIManager, unlike Android.
 */ if (Platform.OS === 'ios') {
    Object.keys(getConstants()).forEach((viewName)=>{
        lazifyViewManagerConfig(viewName);
    });
} else if (getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach((viewManagerName)=>{
        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
            get: ()=>(0, _nullthrows.default)(_NativeUIManager.default.getConstantsForViewManager)(viewManagerName)
        });
    });
}
if (!__webpack_require__.g.nativeCallSyncHook) {
    Object.keys(getConstants()).forEach((viewManagerName)=>{
        if (!UIManagerProperties.includes(viewManagerName)) {
            if (!viewManagerConfigs[viewManagerName]) {
                viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];
            }
            defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
                get: ()=>{
                    console.warn(`Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` + `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`);
                    return UIManagerJS.getViewManagerConfig(viewManagerName);
                }
            });
        }
    });
}
module.exports = UIManagerJS;


}),
74853: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _FabricUIManager = __webpack_require__(4697);
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
function isFabricReactTag(reactTag) {
    // React reserves even numbers for Fabric.
    return reactTag % 2 === 0;
}
var UIManagerImpl = __webpack_require__.g.RN$Bridgeless === true ? __webpack_require__(65144) : __webpack_require__(1394);
// $FlowFixMe[cannot-spread-interface]
var UIManager = _object_spread_props._(_object_spread._({}, UIManagerImpl), {
    measure (reactTag, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measure(shadowNode, callback);
            } else {
                console.warn(`measure cannot find view with tag #${reactTag}`);
                // $FlowFixMe[incompatible-call]
                callback();
            }
        } else {
            // Paper
            UIManagerImpl.measure(reactTag, callback);
        }
    },
    measureInWindow (reactTag, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measureInWindow(shadowNode, callback);
            } else {
                console.warn(`measure cannot find view with tag #${reactTag}`);
                // $FlowFixMe[incompatible-call]
                callback();
            }
        } else {
            // Paper
            UIManagerImpl.measureInWindow(reactTag, callback);
        }
    },
    measureLayout (reactTag, ancestorReactTag, errorCallback, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
            if (!shadowNode || !ancestorShadowNode) {
                return;
            }
            FabricUIManager.measureLayout(shadowNode, ancestorShadowNode, errorCallback, callback);
        } else {
            // Paper
            UIManagerImpl.measureLayout(reactTag, ancestorReactTag, errorCallback, callback);
        }
    },
    measureLayoutRelativeToParent (reactTag, errorCallback, callback) {
        if (isFabricReactTag(reactTag)) {
            console.warn('RCTUIManager.measureLayoutRelativeToParent method is deprecated and it will not be implemented in newer versions of RN (Fabric) - T47686450');
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measure(shadowNode, (left, top, width, height, pageX, pageY)=>{
                    callback(left, top, width, height);
                });
            }
        } else {
            // Paper
            UIManagerImpl.measureLayoutRelativeToParent(reactTag, errorCallback, callback);
        }
    },
    dispatchViewManagerCommand (reactTag, commandName, commandArgs) {
        // Sometimes, libraries directly pass in the output of `findNodeHandle` to
        // this function without checking if it's null. This guards against that
        // case. We throw early here in Javascript so we can get a JS stacktrace
        // instead of a harder-to-debug native Java or Objective-C stacktrace.
        if (typeof reactTag !== 'number') {
            throw new Error('dispatchViewManagerCommand: found null reactTag');
        }
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                // Transform the accidental CommandID into a CommandName which is the stringified number.
                // The interop layer knows how to convert this number into the right method name.
                // Stringify a string is a no-op, so it's safe.
                commandName = `${commandName}`;
                FabricUIManager.dispatchCommand(shadowNode, commandName, commandArgs);
            }
        } else {
            UIManagerImpl.dispatchViewManagerCommand(reactTag, // We have some legacy components that are actually already using strings. ¯\_(ツ)_/¯
            // $FlowFixMe[incompatible-call]
            commandName, commandArgs);
        }
    }
});
module.exports = UIManager;


}),
85238: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
/**
 * The list of non-ViewManager related UIManager properties.
 *
 * In an effort to improve startup performance by lazily loading view managers,
 * the interface to access view managers will change from
 * UIManager['viewManagerName'] to UIManager.getViewManagerConfig('viewManagerName').
 * By using a function call instead of a property access, the UIManager will
 * be able to initialize and load the required view manager from native
 * synchronously. All of React Native's core components have been updated to
 * use getViewManagerConfig(). For the next few releases, any usage of
 * UIManager['viewManagerName'] will result in a warning. Because React Native
 * does not support Proxy objects, a view manager access is implied if any of
 * UIManager's properties that are not one of the properties below is being
 * accessed. Once UIManager property accesses for view managers has been fully
 * deprecated, this file will also be removed.
 */ var UIManagerProperties = [
    'clearJSResponder',
    'configureNextLayoutAnimation',
    'createView',
    'dispatchViewManagerCommand',
    'findSubviewIn',
    'getConstantsForViewManager',
    'getDefaultEventTypes',
    'manageChildren',
    'measure',
    'measureInWindow',
    'measureLayout',
    'measureLayoutRelativeToParent',
    'removeRootView',
    'sendAccessibilityEvent',
    'setChildren',
    'setJSResponder',
    'setLayoutAnimationEnabledExperimental',
    'updateView',
    'viewIsDescendantOf',
    'LazyViewManagersEnabled',
    'ViewManagerNames',
    'StyleConstants',
    'AccessibilityEventTypes',
    'UIView',
    'getViewManagerConfig',
    'hasViewManagerConfig',
    'blur',
    'focus',
    'genericBubblingEventTypes',
    'genericDirectEventTypes',
    'lazilyLoadView'
];
module.exports = UIManagerProperties;


}),
69093: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _processBoxShadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47204));
var ReactNativeStyleAttributes = __webpack_require__(34650);
var resolveAssetSource = __webpack_require__(63980);
var processBackgroundImage = (__webpack_require__(33518)/* ["default"] */["default"]);
var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
var processColorArray = __webpack_require__(57338);
var processFilter = (__webpack_require__(62354)/* ["default"] */["default"]);
var insetsDiffer = __webpack_require__(14691);
var matricesDiffer = __webpack_require__(96940);
var pointsDiffer = __webpack_require__(60882);
var sizesDiffer = __webpack_require__(24395);
var UIManager = __webpack_require__(74853);
var nullthrows = __webpack_require__(92956);
function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    if (viewConfig == null) {
        return null;
    }
    // TODO: This seems like a whole lot of runtime initialization for every
    // native component that can be either avoided or simplified.
    var baseModuleName = viewConfig.baseModuleName, bubblingEventTypes = viewConfig.bubblingEventTypes, directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;
    bubblingEventTypes = bubblingEventTypes ?? {};
    directEventTypes = directEventTypes ?? {};
    while(baseModuleName){
        var baseModule = UIManager.getViewManagerConfig(baseModuleName);
        if (!baseModule) {
            baseModuleName = null;
        } else {
            bubblingEventTypes = _object_spread._({}, baseModule.bubblingEventTypes, bubblingEventTypes);
            directEventTypes = _object_spread._({}, baseModule.directEventTypes, directEventTypes);
            nativeProps = _object_spread._({}, baseModule.NativeProps, nativeProps);
            baseModuleName = baseModule.baseModuleName;
        }
    }
    var validAttributes = {};
    for(var key in nativeProps){
        var typeName = nativeProps[key];
        var diff = getDifferForType(typeName);
        var process = getProcessorForType(typeName);
        // If diff or process == null, omit the corresponding property from the Attribute
        // Why:
        //  1. Consistency with AttributeType flow type
        //  2. Consistency with Static View Configs, which omit the null properties
        validAttributes[key] = diff == null ? process == null ? true : {
            process
        } : process == null ? {
            diff
        } : {
            diff,
            process
        };
    }
    // Unfortunately, the current setup declares style properties as top-level
    // props. This makes it so we allow style properties in the `style` prop.
    // TODO: Move style properties into a `style` prop and disallow them as
    // top-level props on the native side.
    validAttributes.style = ReactNativeStyleAttributes;
    Object.assign(viewConfig, {
        uiViewClassName,
        validAttributes,
        bubblingEventTypes,
        directEventTypes
    });
    attachDefaultEventTypes(viewConfig);
    return viewConfig;
}
function attachDefaultEventTypes(viewConfig) {
    // This is supported on UIManager platforms (ex: Android),
    // as lazy view managers are not implemented for all platforms.
    // See [UIManager] for details on constants and implementations.
    var constants = UIManager.getConstants();
    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
        // Lazy view managers enabled.
        viewConfig = merge(viewConfig, nullthrows(UIManager.getDefaultEventTypes)());
    } else {
        viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
        viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
}
// TODO: Figure out how to avoid all this runtime initialization cost.
function merge(destination, source) {
    if (!source) {
        return destination;
    }
    if (!destination) {
        return source;
    }
    for(var key in source){
        if (!source.hasOwnProperty(key)) {
            continue;
        }
        var sourceValue = source[key];
        if (destination.hasOwnProperty(key)) {
            var destinationValue = destination[key];
            if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
                sourceValue = merge(destinationValue, sourceValue);
            }
        }
        destination[key] = sourceValue;
    }
    return destination;
}
function getDifferForType(typeName) {
    switch(typeName){
        // iOS Types
        case 'CATransform3D':
            return matricesDiffer;
        case 'CGPoint':
            return pointsDiffer;
        case 'CGSize':
            return sizesDiffer;
        case 'UIEdgeInsets':
            return insetsDiffer;
        // Android Types
        case 'Point':
            return pointsDiffer;
        case 'EdgeInsets':
            return insetsDiffer;
    }
    return null;
}
function getProcessorForType(typeName) {
    switch(typeName){
        // iOS Types
        case 'CGColor':
        case 'UIColor':
            return processColor;
        case 'CGColorArray':
        case 'UIColorArray':
            return processColorArray;
        case 'CGImage':
        case 'UIImage':
        case 'RCTImageSource':
            return resolveAssetSource;
        case 'BoxShadowArray':
            return _processBoxShadow.default;
        case 'FilterArray':
            return processFilter;
        // Android Types
        case 'Color':
            return processColor;
        case 'ColorArray':
            return processColorArray;
        case 'Filter':
            return processFilter;
        case 'BackgroundImage':
            return processBackgroundImage;
        case 'ImageSource':
            return resolveAssetSource;
        case 'BoxShadow':
            return _processBoxShadow.default;
    }
    return null;
}
module.exports = getNativeComponentAttributes;


}),
21839: (function () {
// Empty module as a target for NormalModuleReplacementPlugin.
//# sourceMappingURL=EmptyModule.js.map


}),
25232: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *       strict-local
 * @generated SignedSource<<83073425aa3f71ced2c8c51f25a25938>>
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    customBubblingEventTypes: function() {
        return customBubblingEventTypes;
    },
    customDirectEventTypes: function() {
        return customDirectEventTypes;
    },
    get: function() {
        return get;
    },
    register: function() {
        return register;
    }
});
var _interop_require_default = __webpack_require__(66705);
__webpack_require__(21839);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var customBubblingEventTypes = {};
var customDirectEventTypes = {};
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();
function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes, directEventTypes = viewConfig.directEventTypes;
    if (false) { var topLevelType }
    if (bubblingEventTypes != null) {
        for(var topLevelType1 in bubblingEventTypes){
            if (customBubblingEventTypes[topLevelType1] == null) {
                customBubblingEventTypes[topLevelType1] = bubblingEventTypes[topLevelType1];
            }
        }
    }
    if (directEventTypes != null) {
        for(var topLevelType2 in directEventTypes){
            if (customDirectEventTypes[topLevelType2] == null) {
                customDirectEventTypes[topLevelType2] = directEventTypes[topLevelType2];
            }
        }
    }
}
function register(name, callback) {
    (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
    viewConfigCallbacks.set(name, callback);
    return name;
}
function get(name) {
    var viewConfig = viewConfigs.get(name);
    if (viewConfig == null) {
        var callback = viewConfigCallbacks.get(name);
        if (typeof callback !== 'function') {
            (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, // $FlowFixMe[recursive-definition]
            typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
        }
        viewConfig = callback();
        (0, _invariant.default)(viewConfig, 'View config not found for component `%s`', name);
        processEventTypes(viewConfig);
        viewConfigs.set(name, viewConfig);
        // Clear the callback after the config is set so that
        // we don't mask any errors during registration.
        viewConfigCallbacks.set(name, null);
    }
    return viewConfig;
}


}),
35281: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /** The actual type of the opaque NativeColorValue on iOS platform */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DynamicColorIOSPrivate: function() {
        return DynamicColorIOSPrivate;
    },
    PlatformColor: function() {
        return PlatformColor;
    },
    normalizeColorObject: function() {
        return normalizeColorObject;
    },
    processColorObject: function() {
        return processColorObject;
    }
});
var PlatformColor = (...names)=>{
    // $FlowExpectedError[incompatible-return] LocalNativeColorValue is the iOS LocalNativeColorValue type
    return {
        semantic: names
    };
};
var DynamicColorIOSPrivate = (tuple)=>{
    return {
        dynamic: {
            light: tuple.light,
            dark: tuple.dark,
            highContrastLight: tuple.highContrastLight,
            highContrastDark: tuple.highContrastDark
        }
    };
};
var _normalizeColorObject = (color)=>{
    if ('semantic' in color) {
        // an ios semantic color
        return color;
    } else if ('dynamic' in color && color.dynamic !== undefined) {
        var normalizeColor = __webpack_require__(12990);
        // a dynamic, appearance aware color
        var dynamic = color.dynamic;
        var dynamicColor = {
            dynamic: {
                // $FlowFixMe[incompatible-use]
                light: normalizeColor(dynamic.light),
                // $FlowFixMe[incompatible-use]
                dark: normalizeColor(dynamic.dark),
                // $FlowFixMe[incompatible-use]
                highContrastLight: normalizeColor(dynamic.highContrastLight),
                // $FlowFixMe[incompatible-use]
                highContrastDark: normalizeColor(dynamic.highContrastDark)
            }
        };
        return dynamicColor;
    }
    return null;
};
var normalizeColorObject = _normalizeColorObject;
var _processColorObject = (color)=>{
    if ('dynamic' in color && color.dynamic != null) {
        var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
        var dynamic = color.dynamic;
        var dynamicColor = {
            dynamic: {
                // $FlowFixMe[incompatible-use]
                light: processColor(dynamic.light),
                // $FlowFixMe[incompatible-use]
                dark: processColor(dynamic.dark),
                // $FlowFixMe[incompatible-use]
                highContrastLight: processColor(dynamic.highContrastLight),
                // $FlowFixMe[incompatible-use]
                highContrastDark: processColor(dynamic.highContrastDark)
            }
        };
        return dynamicColor;
    }
    return color;
};
var processColorObject = _processColorObject;


}),
12990: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /* eslint no-bitwise: 0 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _normalizecolors = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86631));
function normalizeColor(color) {
    if (typeof color === 'object' && color != null) {
        var normalizeColorObject = (__webpack_require__(35281)/* .normalizeColorObject */.normalizeColorObject);
        var normalizedColor = normalizeColorObject(color);
        if (normalizedColor != null) {
            return normalizedColor;
        }
    }
    if (typeof color === 'string' || typeof color === 'number') {
        return (0, _normalizecolors.default)(color);
    }
}
module.exports = normalizeColor;


}),
5304: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
var invariant = __webpack_require__(56481);
function processAspectRatio(aspectRatio) {
    if (typeof aspectRatio === 'number') {
        return aspectRatio;
    }
    if (typeof aspectRatio !== 'string') {
        if (false) {}
        return;
    }
    var matches = aspectRatio.split('/').map((s)=>s.trim());
    if (matches.includes('auto')) {
        if (false) {}
        return;
    }
    var hasNonNumericValues = matches.some((n)=>Number.isNaN(Number(n)));
    if (false) {}
    if (hasNonNumericValues) {
        return;
    }
    if (matches.length === 2) {
        return Number(matches[0]) / Number(matches[1]);
    }
    return Number(matches[0]);
}
module.exports = processAspectRatio;


}),
33518: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processBackgroundImage;
    }
}));
var _sliced_to_array = __webpack_require__(78474);
var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
var DIRECTION_KEYWORD_REGEX = /^to\s+(?:top|bottom|left|right)(?:\s+(?:top|bottom|left|right))?/i;
var ANGLE_UNIT_REGEX = /^([+-]?\d*\.?\d+)(deg|grad|rad|turn)$/i;
var DEFAULT_DIRECTION = {
    type: 'angle',
    value: 180
};
function processBackgroundImage(backgroundImage) {
    var result = [];
    if (backgroundImage == null) {
        return result;
    }
    if (typeof backgroundImage === 'string') {
        result = parseCSSLinearGradient(backgroundImage.replace(/\n/g, ' '));
    } else if (Array.isArray(backgroundImage)) {
        for (var bgImage of backgroundImage){
            var processedColorStops = [];
            for(var index = 0; index < bgImage.colorStops.length; index++){
                var colorStop = bgImage.colorStops[index];
                var processedColor = processColor(colorStop.color);
                if (processedColor == null) {
                    // If a color is invalid, return an empty array and do not apply gradient. Same as web.
                    return [];
                }
                if (colorStop.positions != null && colorStop.positions.length > 0) {
                    for (var position of colorStop.positions){
                        if (position.endsWith('%')) {
                            processedColorStops.push({
                                color: processedColor,
                                position: parseFloat(position) / 100
                            });
                        } else {
                            // If a position is invalid, return an empty array and do not apply gradient. Same as web.
                            return [];
                        }
                    }
                } else {
                    processedColorStops.push({
                        color: processedColor,
                        position: null
                    });
                }
            }
            var direction = DEFAULT_DIRECTION;
            var bgDirection = bgImage.direction != null ? bgImage.direction.toLowerCase() : null;
            if (bgDirection != null) {
                if (ANGLE_UNIT_REGEX.test(bgDirection)) {
                    var parsedAngle = getAngleInDegrees(bgDirection);
                    if (parsedAngle != null) {
                        direction = {
                            type: 'angle',
                            value: parsedAngle
                        };
                    } else {
                        // If an angle is invalid, return an empty array and do not apply any gradient. Same as web.
                        return [];
                    }
                } else if (DIRECTION_KEYWORD_REGEX.test(bgDirection)) {
                    var parsedDirection = getDirectionForKeyword(bgDirection);
                    if (parsedDirection != null) {
                        direction = parsedDirection;
                    } else {
                        // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                        return [];
                    }
                } else {
                    // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
            }
            var fixedColorStops = getFixedColorStops(processedColorStops);
            result = result.concat({
                type: 'linearGradient',
                direction,
                colorStops: fixedColorStops
            });
        }
    }
    return result;
}
function parseCSSLinearGradient(cssString) {
    var gradients = [];
    var match;
    // matches one or more linear-gradient functions in CSS
    var linearGradientRegex = /linear-gradient\s*\(((?:\([^)]*\)|[^())])*)\)/gi;
    while(match = linearGradientRegex.exec(cssString)){
        var gradientContent = match[1];
        var parts = gradientContent.split(',');
        var direction = DEFAULT_DIRECTION;
        var trimmedDirection = parts[0].trim().toLowerCase();
        // matches individual color stops in a gradient function
        // supports various color formats: named colors, hex colors, rgb(a), and hsl(a)
        // e.g. "red 20%", "blue 50%", "rgba(0, 0, 0, 0.5) 30% 50%"
        // TODO: does not support color hint syntax yet. It is WIP.
        var colorStopRegex = /\s*((?:(?:rgba?|hsla?)\s*\([^)]+\))|#[0-9a-fA-F]+|[a-zA-Z]+)(?:\s+(-?[0-9.]+%?)(?:\s+(-?[0-9.]+%?))?)?\s*/gi;
        if (ANGLE_UNIT_REGEX.test(trimmedDirection)) {
            var parsedAngle = getAngleInDegrees(trimmedDirection);
            if (parsedAngle != null) {
                direction = {
                    type: 'angle',
                    value: parsedAngle
                };
                parts.shift();
            } else {
                // If an angle is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
        } else if (DIRECTION_KEYWORD_REGEX.test(trimmedDirection)) {
            var parsedDirection = getDirectionForKeyword(trimmedDirection);
            if (parsedDirection != null) {
                direction = parsedDirection;
                parts.shift();
            } else {
                // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
        } else if (!colorStopRegex.test(trimmedDirection)) {
            // If first part is not an angle/direction or a color stop, return an empty array and do not apply any gradient. Same as web.
            return [];
        }
        colorStopRegex.lastIndex = 0;
        var colorStops = [];
        var fullColorStopsStr = parts.join(',');
        var colorStopMatch = void 0;
        while(colorStopMatch = colorStopRegex.exec(fullColorStopsStr)){
            var _colorStopMatch = _sliced_to_array._(colorStopMatch, 4), color = _colorStopMatch[1], position1 = _colorStopMatch[2], position2 = _colorStopMatch[3];
            var processedColor = processColor(color.trim().toLowerCase());
            if (processedColor == null) {
                // If a color is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
            if (typeof position1 !== 'undefined') {
                if (position1.endsWith('%')) {
                    colorStops.push({
                        color: processedColor,
                        position: parseFloat(position1) / 100
                    });
                } else {
                    // If a position is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
            } else {
                colorStops.push({
                    color: processedColor,
                    position: null
                });
            }
            if (typeof position2 !== 'undefined') {
                if (position2.endsWith('%')) {
                    colorStops.push({
                        color: processedColor,
                        position: parseFloat(position2) / 100
                    });
                } else {
                    // If a position is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
            }
        }
        var fixedColorStops = getFixedColorStops(colorStops);
        gradients.push({
            type: 'linearGradient',
            direction,
            colorStops: fixedColorStops
        });
    }
    return gradients;
}
function getDirectionForKeyword(direction) {
    if (direction == null) {
        return null;
    }
    // Remove extra whitespace
    var normalized = direction.replace(/\s+/g, ' ').toLowerCase();
    switch(normalized){
        case 'to top':
            return {
                type: 'angle',
                value: 0
            };
        case 'to right':
            return {
                type: 'angle',
                value: 90
            };
        case 'to bottom':
            return {
                type: 'angle',
                value: 180
            };
        case 'to left':
            return {
                type: 'angle',
                value: 270
            };
        case 'to top right':
        case 'to right top':
            return {
                type: 'keyword',
                value: 'to top right'
            };
        case 'to bottom right':
        case 'to right bottom':
            return {
                type: 'keyword',
                value: 'to bottom right'
            };
        case 'to top left':
        case 'to left top':
            return {
                type: 'keyword',
                value: 'to top left'
            };
        case 'to bottom left':
        case 'to left bottom':
            return {
                type: 'keyword',
                value: 'to bottom left'
            };
        default:
            return null;
    }
}
function getAngleInDegrees(angle) {
    if (angle == null) {
        return null;
    }
    var match = angle.match(ANGLE_UNIT_REGEX);
    if (!match) {
        return null;
    }
    var _match = _sliced_to_array._(match, 3), value = _match[1], unit = _match[2];
    var numericValue = parseFloat(value);
    switch(unit){
        case 'deg':
            return numericValue;
        case 'grad':
            return numericValue * 0.9; // 1 grad = 0.9 degrees
        case 'rad':
            return numericValue * 180 / Math.PI;
        case 'turn':
            return numericValue * 360; // 1 turn = 360 degrees
        default:
            return null;
    }
}
// https://drafts.csswg.org/css-images-4/#color-stop-fixup
function getFixedColorStops(colorStops) {
    var fixedColorStops = [];
    var hasNullPositions = false;
    var maxPositionSoFar = colorStops[0].position ?? 0;
    for(var i = 0; i < colorStops.length; i++){
        var colorStop = colorStops[i];
        var newPosition = colorStop.position;
        if (newPosition === null) {
            // Step 1:
            // If the first color stop does not have a position,
            // set its position to 0%. If the last color stop does not have a position,
            // set its position to 100%.
            if (i === 0) {
                newPosition = 0;
            } else if (i === colorStops.length - 1) {
                newPosition = 1;
            }
        }
        // Step 2:
        // If a color stop or transition hint has a position
        // that is less than the specified position of any color stop or transition hint
        // before it in the list, set its position to be equal to the
        // largest specified position of any color stop or transition hint before it.
        if (newPosition !== null) {
            newPosition = Math.max(newPosition, maxPositionSoFar);
            fixedColorStops[i] = {
                color: colorStop.color,
                position: newPosition
            };
            maxPositionSoFar = newPosition;
        } else {
            hasNullPositions = true;
        }
    }
    // Step 3:
    // If any color stop still does not have a position,
    // then, for each run of adjacent color stops without positions,
    // set their positions so that they are evenly spaced between the preceding and
    // following color stops with positions.
    if (hasNullPositions) {
        var lastDefinedIndex = 0;
        for(var i1 = 1; i1 < fixedColorStops.length; i1++){
            if (fixedColorStops[i1] !== undefined) {
                var unpositionedStops = i1 - lastDefinedIndex - 1;
                if (unpositionedStops > 0) {
                    var startPosition = fixedColorStops[lastDefinedIndex].position;
                    var endPosition = fixedColorStops[i1].position;
                    var increment = (endPosition - startPosition) / (unpositionedStops + 1);
                    for(var j = 1; j <= unpositionedStops; j++){
                        fixedColorStops[lastDefinedIndex + j] = {
                            color: colorStops[lastDefinedIndex + j].color,
                            position: startPosition + increment * j
                        };
                    }
                }
                lastDefinedIndex = i1;
            }
        }
    }
    return fixedColorStops;
}


}),
47204: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react-native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processBoxShadow;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
function processBoxShadow(rawBoxShadows) {
    var result = [];
    if (rawBoxShadows == null) {
        return result;
    }
    var boxShadowList = typeof rawBoxShadows === 'string' ? parseBoxShadowString(rawBoxShadows.replace(/\n/g, ' ')) : rawBoxShadows;
    for (var rawBoxShadow of boxShadowList){
        var parsedBoxShadow = {
            offsetX: 0,
            offsetY: 0
        };
        var value = void 0;
        for(var arg in rawBoxShadow){
            switch(arg){
                case 'offsetX':
                    value = typeof rawBoxShadow.offsetX === 'string' ? parseLength(rawBoxShadow.offsetX) : rawBoxShadow.offsetX;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.offsetX = value;
                    break;
                case 'offsetY':
                    value = typeof rawBoxShadow.offsetY === 'string' ? parseLength(rawBoxShadow.offsetY) : rawBoxShadow.offsetY;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.offsetY = value;
                    break;
                case 'spreadDistance':
                    value = typeof rawBoxShadow.spreadDistance === 'string' ? parseLength(rawBoxShadow.spreadDistance) : rawBoxShadow.spreadDistance;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.spreadDistance = value;
                    break;
                case 'blurRadius':
                    value = typeof rawBoxShadow.blurRadius === 'string' ? parseLength(rawBoxShadow.blurRadius) : rawBoxShadow.blurRadius;
                    if (value == null || value < 0) {
                        return [];
                    }
                    parsedBoxShadow.blurRadius = value;
                    break;
                case 'color':
                    var color = (0, _processColor.default)(rawBoxShadow.color);
                    if (color == null) {
                        return [];
                    }
                    parsedBoxShadow.color = color;
                    break;
                case 'inset':
                    parsedBoxShadow.inset = rawBoxShadow.inset;
            }
        }
        result.push(parsedBoxShadow);
    }
    return result;
}
function parseBoxShadowString(rawBoxShadows) {
    var result = [];
    for (var rawBoxShadow of rawBoxShadows.split(/,(?![^()]*\))/) // split by comma that is not in parenthesis
    .map((bS)=>bS.trim()).filter((bS)=>bS !== '')){
        var boxShadow = {
            offsetX: 0,
            offsetY: 0
        };
        var offsetX = void 0;
        var offsetY = void 0;
        var keywordDetectedAfterLength = false;
        var lengthCount = 0;
        // split rawBoxShadow string by all whitespaces that are not in parenthesis
        var args = rawBoxShadow.split(/\s+(?![^(]*\))/);
        for (var arg of args){
            var processedColor = (0, _processColor.default)(arg);
            if (processedColor != null) {
                if (boxShadow.color != null) {
                    return [];
                }
                if (offsetX != null) {
                    keywordDetectedAfterLength = true;
                }
                boxShadow.color = arg;
                continue;
            }
            if (arg === 'inset') {
                if (boxShadow.inset != null) {
                    return [];
                }
                if (offsetX != null) {
                    keywordDetectedAfterLength = true;
                }
                boxShadow.inset = true;
                continue;
            }
            switch(lengthCount){
                case 0:
                    offsetX = arg;
                    lengthCount++;
                    break;
                case 1:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    offsetY = arg;
                    lengthCount++;
                    break;
                case 2:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    boxShadow.blurRadius = arg;
                    lengthCount++;
                    break;
                case 3:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    boxShadow.spreadDistance = arg;
                    lengthCount++;
                    break;
                default:
                    return [];
            }
        }
        if (offsetX == null || offsetY == null) {
            return [];
        }
        boxShadow.offsetX = offsetX;
        boxShadow.offsetY = offsetY;
        result.push(boxShadow);
    }
    return result;
}
function parseLength(length) {
    // matches on args with units like "1.5 5% -80deg"
    var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
    var match = argsWithUnitsRegex.exec(length);
    if (!match || Number.isNaN(match[1])) {
        return null;
    }
    if (match[3] != null && match[3] !== 'px') {
        return null;
    }
    return Number(match[1]);
}


}),
23865: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var Platform = __webpack_require__(181);
var normalizeColor = __webpack_require__(12990);
/* eslint no-bitwise: 0 */ function processColor(color) {
    if (color === undefined || color === null) {
        return color;
    }
    var normalizedColor = normalizeColor(color);
    if (normalizedColor === null || normalizedColor === undefined) {
        return undefined;
    }
    if (typeof normalizedColor === 'object') {
        var processColorObject = (__webpack_require__(35281)/* .processColorObject */.processColorObject);
        var processedColorObj = processColorObject(normalizedColor);
        if (processedColorObj != null) {
            return processedColorObj;
        }
    }
    if (typeof normalizedColor !== 'number') {
        return null;
    }
    // Converts 0xrrggbbaa into 0xaarrggbb
    normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
    if (Platform.OS === 'android') {
        // Android use 32 bit *signed* integer to represent the color
        // We utilize the fact that bitwise operations in JS also operates on
        // signed 32 bit integers, so that we can use those to convert from
        // *unsigned* to *signed* 32bit int that way.
        normalizedColor = normalizedColor | 0x0;
    }
    return normalizedColor;
}
var _default = processColor;


}),
57338: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var TRANSPARENT = 0; // rgba(0, 0, 0, 0)
function processColorArray(colors) {
    return colors == null ? null : colors.map(processColorElement);
}
function processColorElement(color) {
    var value = (0, _processColor.default)(color);
    // For invalid colors, fallback to transparent.
    if (value == null) {
        console.error('Invalid value in color array:', color);
        return TRANSPARENT;
    }
    return value;
}
module.exports = processColorArray;


}),
62354: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format strict-local
 *      
 * @oncall react-native
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processFilter;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
function processFilter(filter) {
    var result = [];
    if (filter == null) {
        return result;
    }
    if (typeof filter === 'string') {
        filter = filter.replace(/\n/g, ' ');
        // matches on functions with args and nested functions like "drop-shadow(10 10 10 rgba(0, 0, 0, 1))"
        var regex = /([\w-]+)\(([^()]*|\([^()]*\)|[^()]*\([^()]*\)[^()]*)\)/g;
        var matches;
        while(matches = regex.exec(filter)){
            var filterName = matches[1].toLowerCase();
            if (filterName === 'drop-shadow') {
                var dropShadow = parseDropShadow(matches[2]);
                if (dropShadow != null) {
                    result.push({
                        dropShadow
                    });
                } else {
                    return [];
                }
            } else {
                var camelizedName = filterName === 'drop-shadow' ? 'dropShadow' : filterName === 'hue-rotate' ? 'hueRotate' : filterName;
                var amount = _getFilterAmount(camelizedName, matches[2]);
                if (amount != null) {
                    var filterFunction = {};
                    // $FlowFixMe The key will be the correct one but flow can't see that.
                    filterFunction[camelizedName] = amount;
                    // $FlowFixMe The key will be the correct one but flow can't see that.
                    result.push(filterFunction);
                } else {
                    // If any primitive is invalid then apply none of the filters. This is how
                    // web works and makes it clear that something is wrong becuase no
                    // graphical effects are happening.
                    return [];
                }
            }
        }
    } else if (Array.isArray(filter)) {
        for (var filterFunction1 of filter){
            var _Object_entries_ = _sliced_to_array._(Object.entries(filterFunction1)[0], 2), filterName1 = _Object_entries_[0], filterValue = _Object_entries_[1];
            if (filterName1 === 'dropShadow') {
                // $FlowFixMe
                var dropShadow1 = parseDropShadow(filterValue);
                if (dropShadow1 == null) {
                    return [];
                }
                result.push({
                    dropShadow: dropShadow1
                });
            } else {
                var amount1 = _getFilterAmount(filterName1, filterValue);
                if (amount1 != null) {
                    var resultObject = {};
                    // $FlowFixMe
                    resultObject[filterName1] = amount1;
                    // $FlowFixMe
                    result.push(resultObject);
                } else {
                    // If any primitive is invalid then apply none of the filters. This is how
                    // web works and makes it clear that something is wrong becuase no
                    // graphical effects are happening.
                    return [];
                }
            }
        }
    } else {
        throw new TypeError(`${typeof filter} filter is not a string or array`);
    }
    return result;
}
function _getFilterAmount(filterName, filterArgs) {
    var filterArgAsNumber;
    var unit;
    if (typeof filterArgs === 'string') {
        // matches on args with units like "1.5 5% -80deg"
        var argsWithUnitsRegex = new RegExp(/([+-]?\d*(\.\d+)?)([a-zA-Z%]+)?/g);
        var match = argsWithUnitsRegex.exec(filterArgs);
        if (!match || isNaN(Number(match[1]))) {
            return undefined;
        }
        filterArgAsNumber = Number(match[1]);
        unit = match[3];
    } else if (typeof filterArgs === 'number') {
        filterArgAsNumber = filterArgs;
    } else {
        return undefined;
    }
    switch(filterName){
        // Hue rotate takes some angle that can have a unit and can be
        // negative. Additionally, 0 with no unit is allowed.
        case 'hueRotate':
            if (filterArgAsNumber === 0) {
                return 0;
            }
            if (unit !== 'deg' && unit !== 'rad') {
                return undefined;
            }
            return unit === 'rad' ? 180 * filterArgAsNumber / Math.PI : filterArgAsNumber;
        // blur takes any positive CSS length that is not a percent. In RN
        // we currently only have DIPs, so we are not parsing units here.
        case 'blur':
            if (unit && unit !== 'px' || filterArgAsNumber < 0) {
                return undefined;
            }
            return filterArgAsNumber;
        // All other filters except take a non negative number or percentage. There
        // are no units associated with this value and percentage numbers map 1-to-1
        // to a non-percentage number (e.g. 50% == 0.5).
        case 'brightness':
        case 'contrast':
        case 'grayscale':
        case 'invert':
        case 'opacity':
        case 'saturate':
        case 'sepia':
            if (unit && unit !== '%' && unit !== 'px' || filterArgAsNumber < 0) {
                return undefined;
            }
            if (unit === '%') {
                filterArgAsNumber /= 100;
            }
            return filterArgAsNumber;
        default:
            return undefined;
    }
}
function parseDropShadow(rawDropShadow) {
    var dropShadow = typeof rawDropShadow === 'string' ? parseDropShadowString(rawDropShadow) : rawDropShadow;
    var parsedDropShadow = {
        offsetX: 0,
        offsetY: 0
    };
    var offsetX;
    var offsetY;
    for(var arg in dropShadow){
        var value = void 0;
        switch(arg){
            case 'offsetX':
                value = typeof dropShadow.offsetX === 'string' ? parseLength(dropShadow.offsetX) : dropShadow.offsetX;
                if (value == null) {
                    return null;
                }
                offsetX = value;
                break;
            case 'offsetY':
                value = typeof dropShadow.offsetY === 'string' ? parseLength(dropShadow.offsetY) : dropShadow.offsetY;
                if (value == null) {
                    return null;
                }
                offsetY = value;
                break;
            case 'standardDeviation':
                value = typeof dropShadow.standardDeviation === 'string' ? parseLength(dropShadow.standardDeviation) : dropShadow.standardDeviation;
                if (value == null || value < 0) {
                    return null;
                }
                parsedDropShadow.standardDeviation = value;
                break;
            case 'color':
                var color = (0, _processColor.default)(dropShadow.color);
                if (color == null) {
                    return null;
                }
                parsedDropShadow.color = color;
                break;
            default:
                return null;
        }
    }
    if (offsetX == null || offsetY == null) {
        return null;
    }
    parsedDropShadow.offsetX = offsetX;
    parsedDropShadow.offsetY = offsetY;
    return parsedDropShadow;
}
function parseDropShadowString(rawDropShadow) {
    var dropShadow = {
        offsetX: 0,
        offsetY: 0
    };
    var offsetX;
    var offsetY;
    var lengthCount = 0;
    var keywordDetectedAfterLength = false;
    // split args by all whitespaces that are not in parenthesis
    for (var arg of rawDropShadow.split(/\s+(?![^(]*\))/)){
        var processedColor = (0, _processColor.default)(arg);
        if (processedColor != null) {
            if (dropShadow.color != null) {
                return null;
            }
            if (offsetX != null) {
                keywordDetectedAfterLength = true;
            }
            dropShadow.color = arg;
            continue;
        }
        switch(lengthCount){
            case 0:
                offsetX = arg;
                lengthCount++;
                break;
            case 1:
                if (keywordDetectedAfterLength) {
                    return null;
                }
                offsetY = arg;
                lengthCount++;
                break;
            case 2:
                if (keywordDetectedAfterLength) {
                    return null;
                }
                dropShadow.standardDeviation = arg;
                lengthCount++;
                break;
            default:
                return null;
        }
    }
    if (offsetX == null || offsetY == null) {
        return null;
    }
    dropShadow.offsetX = offsetX;
    dropShadow.offsetY = offsetY;
    return dropShadow;
}
function parseLength(length) {
    // matches on args with units like "1.5 5% -80deg"
    var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
    var match = argsWithUnitsRegex.exec(length);
    if (!match || Number.isNaN(match[1])) {
        return null;
    }
    if (match[3] != null && match[3] !== 'px') {
        return null;
    }
    return Number(match[1]);
}


}),
45989: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
function processFontVariant(fontVariant) {
    if (Array.isArray(fontVariant)) {
        return fontVariant;
    }
    // $FlowFixMe[incompatible-type]
    var match = fontVariant.split(' ').filter(Boolean);
    return match;
}
module.exports = processFontVariant;


}),
88823: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var stringifySafe = (__webpack_require__(47264)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
/**
 * Generate a transform matrix based on the provided transforms, and use that
 * within the style object instead.
 *
 * This allows us to provide an API that is similar to CSS, where transforms may
 * be applied in an arbitrary order, and yet have a universal, singular
 * interface to native code.
 */ function processTransform(transform) {
    if (typeof transform === 'string') {
        var regex = new RegExp(/(\w+)\(([^)]+)\)/g);
        var transformArray = [];
        var matches;
        while(matches = regex.exec(transform)){
            var _getKeyAndValueFromCSSTransform1 = _getKeyAndValueFromCSSTransform(matches[1], matches[2]), key = _getKeyAndValueFromCSSTransform1.key, value = _getKeyAndValueFromCSSTransform1.value;
            if (value !== undefined) {
                transformArray.push({
                    [key]: value
                });
            }
        }
        transform = transformArray;
    }
    if (false) {}
    return transform;
}
var _getKeyAndValueFromCSSTransform = (key, args)=>{
    var argsWithUnitsRegex = new RegExp(/([+-]?\d+(\.\d+)?)([a-zA-Z]+|%)?/g);
    switch(key){
        case 'matrix':
            var _args_match;
            return {
                key,
                value: (_args_match = args.match(/[+-]?\d+(\.\d+)?/g)) === null || _args_match === void 0 ? void 0 : _args_match.map(Number)
            };
        case 'translate':
        case 'translate3d':
            var parsedArgs = [];
            var missingUnitOfMeasurement = false;
            var matches;
            while(matches = argsWithUnitsRegex.exec(args)){
                var value = Number(matches[1]);
                var unitOfMeasurement = matches[3];
                if (value !== 0 && !unitOfMeasurement) {
                    missingUnitOfMeasurement = true;
                }
                if (unitOfMeasurement === '%') {
                    parsedArgs.push(`${value}%`);
                } else {
                    parsedArgs.push(value);
                }
            }
            if (false) {}
            if ((parsedArgs === null || parsedArgs === void 0 ? void 0 : parsedArgs.length) === 1) {
                parsedArgs.push(0);
            }
            return {
                key: 'translate',
                value: parsedArgs
            };
        case 'translateX':
        case 'translateY':
        case 'perspective':
            var argMatches = argsWithUnitsRegex.exec(args);
            if (!(argMatches === null || argMatches === void 0 ? void 0 : argMatches.length)) {
                return {
                    key,
                    value: undefined
                };
            }
            var value1 = Number(argMatches[1]);
            var unitOfMeasurement1 = argMatches[3];
            if (false) {}
            return {
                key,
                value: value1
            };
        default:
            return {
                key,
                value: !isNaN(args) ? Number(args) : args
            };
    }
};
function _validateTransforms(transform) {
    transform.forEach((transformation)=>{
        var keys = Object.keys(transformation);
        invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
        var key = keys[0];
        var value = transformation[key];
        if (key === 'matrix' && transform.length > 1) {
            console.error('When using a matrix transform, you must specify exactly one transform object. Passed transform: ' + stringifySafe(transform));
        }
        _validateTransform(key, value, transformation);
    });
}
function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
    var multivalueTransforms = [
        'matrix',
        'translate'
    ];
    if (multivalueTransforms.indexOf(key) !== -1) {
        invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }
    switch(key){
        case 'matrix':
            invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', /* $FlowFixMe[prop-missing] (>=0.84.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.84 was deployed. To
         * see the error, delete this comment and run Flow. */ value.length, stringifySafe(transformation));
            break;
        case 'translate':
            invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', /* $FlowFixMe[prop-missing] (>=0.84.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.84 was deployed. To
         * see the error, delete this comment and run Flow. */ value.length, stringifySafe(transformation));
            break;
        case 'rotateX':
        case 'rotateY':
        case 'rotateZ':
        case 'rotate':
        case 'skewX':
        case 'skewY':
            invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
            invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
            break;
        case 'perspective':
            invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
            invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
            break;
        case 'translateX':
        case 'translateY':
            invariant(typeof value === 'number' || typeof value === 'string' && value.endsWith('%'), 'Transform with key of "%s" must be number or a percentage. Passed value: %s.', key, stringifySafe(transformation));
            break;
        case 'scale':
        case 'scaleX':
        case 'scaleY':
            invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
            break;
        default:
            invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
}
module.exports = processTransform;


}),
91166: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processTransformOrigin;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var INDEX_X = 0;
var INDEX_Y = 1;
var INDEX_Z = 2;
function processTransformOrigin(transformOrigin) {
    if (typeof transformOrigin === 'string') {
        var transformOriginString = transformOrigin;
        var regex = /(top|bottom|left|right|center|\d+(?:%|px)|0)/gi;
        var transformOriginArray = [
            '50%',
            '50%',
            0
        ];
        var index = INDEX_X;
        var matches;
        outer: while(matches = regex.exec(transformOriginString)){
            var nextIndex = index + 1;
            var value = matches[0];
            var valueLower = value.toLowerCase();
            switch(valueLower){
                case 'left':
                case 'right':
                    {
                        (0, _invariant.default)(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);
                        transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';
                        break;
                    }
                case 'top':
                case 'bottom':
                    {
                        (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);
                        transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';
                        // Handle [[ center | left | right ] && [ center | top | bottom ]] <length>?
                        if (index === INDEX_X) {
                            var horizontal = regex.exec(transformOriginString);
                            if (horizontal == null) {
                                break outer;
                            }
                            switch(horizontal[0].toLowerCase()){
                                case 'left':
                                    transformOriginArray[INDEX_X] = 0;
                                    break;
                                case 'right':
                                    transformOriginArray[INDEX_X] = '100%';
                                    break;
                                case 'center':
                                    transformOriginArray[INDEX_X] = '50%';
                                    break;
                                default:
                                    (0, _invariant.default)(false, 'Could not parse transform-origin: %s', transformOriginString);
                            }
                            nextIndex = INDEX_Z;
                        }
                        break;
                    }
                case 'center':
                    {
                        (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);
                        transformOriginArray[index] = '50%';
                        break;
                    }
                default:
                    {
                        if (value.endsWith('%')) {
                            transformOriginArray[index] = value;
                        } else {
                            transformOriginArray[index] = parseFloat(value); // Remove `px`
                        }
                        break;
                    }
            }
            index = nextIndex;
        }
        transformOrigin = transformOriginArray;
    }
    if (false) {}
    return transformOrigin;
}
function _validateTransformOrigin(transformOrigin) {
    (0, _invariant.default)(transformOrigin.length === 3, 'Transform origin must have exactly 3 values.');
    var _transformOrigin = _sliced_to_array._(transformOrigin, 3), x = _transformOrigin[0], y = _transformOrigin[1], z = _transformOrigin[2];
    (0, _invariant.default)(typeof x === 'number' || typeof x === 'string' && x.endsWith('%'), 'Transform origin x-position must be a number. Passed value: %s.', x);
    (0, _invariant.default)(typeof y === 'number' || typeof y === 'string' && y.endsWith('%'), 'Transform origin y-position must be a number. Passed value: %s.', y);
    (0, _invariant.default)(typeof z === 'number', 'Transform origin z-position must be a number. Passed value: %s.', z);
}


}),
6482: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19784));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var eventEmitter = new _EventEmitter.default();
var dimensionsInitialized = false;
var dimensions;
var Dimensions = /*#__PURE__*/ function() {
    "use strict";
    function Dimensions() {
        _class_call_check._(this, Dimensions);
    }
    _create_class._(Dimensions, null, [
        {
            key: "get",
            value: /**
   * NOTE: `useWindowDimensions` is the preferred API for React components.
   *
   * Initial dimensions are set before `runApplication` is called so they should
   * be available before any other require's are run, but may be updated later.
   *
   * Note: Although dimensions are available immediately, they may change (e.g
   * due to device rotation) so any rendering logic or styles that depend on
   * these constants should try to call this function on every render, rather
   * than caching the value (for example, using inline styles rather than
   * setting a value in a `StyleSheet`).
   *
   * Example: `const {height, width} = Dimensions.get('window');`
   *
   * @param {string} dim Name of dimension as defined when calling `set`.
   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.
   */ function get(dim) {
                // $FlowFixMe[invalid-computed-prop]
                (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
                return dimensions[dim];
            }
        },
        {
            key: "set",
            value: /**
   * This should only be called from native code by sending the
   * didUpdateDimensions event.
   *
   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set
   */ function set(dims) {
                // We calculate the window dimensions in JS so that we don't encounter loss of
                // precision in transferring the dimensions (which could be non-integers) over
                // the bridge.
                var screen = dims.screen, window = dims.window;
                var windowPhysicalPixels = dims.windowPhysicalPixels;
                if (windowPhysicalPixels) {
                    window = {
                        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
                        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
                        scale: windowPhysicalPixels.scale,
                        fontScale: windowPhysicalPixels.fontScale
                    };
                }
                var screenPhysicalPixels = dims.screenPhysicalPixels;
                if (screenPhysicalPixels) {
                    screen = {
                        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
                        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
                        scale: screenPhysicalPixels.scale,
                        fontScale: screenPhysicalPixels.fontScale
                    };
                } else if (screen == null) {
                    screen = window;
                }
                dimensions = {
                    window,
                    screen
                };
                if (dimensionsInitialized) {
                    // Don't fire 'change' the first time the dimensions are set.
                    eventEmitter.emit('change', dimensions);
                } else {
                    dimensionsInitialized = true;
                }
            }
        },
        {
            key: "addEventListener",
            value: /**
   * Add an event handler. Supported events:
   *
   * - `change`: Fires when a property within the `Dimensions` object changes. The argument
   *   to the event handler is an object with `window` and `screen` properties whose values
   *   are the same as the return values of `Dimensions.get('window')` and
   *   `Dimensions.get('screen')`, respectively.
   */ function addEventListener(type, handler) {
                (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
                return eventEmitter.addListener(type, handler);
            }
        }
    ]);
    return Dimensions;
}();
// Subscribe before calling getConstants to make sure we don't miss any updates in between.
_RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', (update)=>{
    Dimensions.set(update);
});
Dimensions.set(_NativeDeviceInfo.default.getConstants().Dimensions);
var _default = Dimensions;


}),
52712: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var Dimensions = (__webpack_require__(6482)/* ["default"] */["default"]);
/**
 * PixelRatio class gives access to the device pixel density.
 *
 * ## Fetching a correctly sized image
 *
 * You should get a higher resolution image if you are on a high pixel density
 * device. A good rule of thumb is to multiply the size of the image you display
 * by the pixel ratio.
 *
 * ```
 * var image = getImage({
 *   width: PixelRatio.getPixelSizeForLayoutSize(200),
 *   height: PixelRatio.getPixelSizeForLayoutSize(100),
 * });
 * <Image source={image} style={{width: 200, height: 100}} />
 * ```
 *
 * ## Pixel grid snapping
 *
 * In iOS, you can specify positions and dimensions for elements with arbitrary
 * precision, for example 29.674825. But, ultimately the physical display only
 * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334
 * for iPhone 6. iOS tries to be as faithful as possible to the user value by
 * spreading one original pixel into multiple ones to trick the eye. The
 * downside of this technique is that it makes the resulting element look
 * blurry.
 *
 * In practice, we found out that developers do not want this feature and they
 * have to work around it by doing manual rounding in order to avoid having
 * blurry elements. In React Native, we are rounding all the pixels
 * automatically.
 *
 * We have to be careful when to do this rounding. You never want to work with
 * rounded and unrounded values at the same time as you're going to accumulate
 * rounding errors. Having even one rounding error is deadly because a one
 * pixel border may vanish or be twice as big.
 *
 * In React Native, everything in JavaScript and within the layout engine works
 * with arbitrary precision numbers. It's only when we set the position and
 * dimensions of the native element on the main thread that we round. Also,
 * rounding is done relative to the root rather than the parent, again to avoid
 * accumulating rounding errors.
 *
 */ var PixelRatio = /*#__PURE__*/ function() {
    function PixelRatio() {
        _class_call_check._(this, PixelRatio);
    }
    _create_class._(PixelRatio, null, [
        {
            key: "get",
            value: /**
   * Returns the device pixel density. Some examples:
   *
   *   - PixelRatio.get() === 1
   *     - mdpi Android devices (160 dpi)
   *   - PixelRatio.get() === 1.5
   *     - hdpi Android devices (240 dpi)
   *   - PixelRatio.get() === 2
   *     - iPhone 4, 4S
   *     - iPhone 5, 5c, 5s
   *     - iPhone 6
   *     - iPhone 7
   *     - iPhone 8
   *     - iPhone SE
   *     - xhdpi Android devices (320 dpi)
   *   - PixelRatio.get() === 3
   *     - iPhone 6 Plus
   *     - iPhone 7 Plus
   *     - iPhone 8 Plus
   *     - iPhone X
   *     - xxhdpi Android devices (480 dpi)
   *   - PixelRatio.get() === 3.5
   *     - Nexus 6
   */ function get() {
                return Dimensions.get('window').scale;
            }
        },
        {
            key: "getFontScale",
            value: /**
   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the
   * absolute font size, so any elements that heavily depend on that should use this to do
   * calculations.
   *
   * If a font scale is not set, this returns the device pixel ratio.
   *
   * This reflects the user preference set in:
   *  - Settings > Display > Font size on Android,
   *  - Settings > Display & Brightness > Text Size on iOS.
   */ function getFontScale() {
                return Dimensions.get('window').fontScale || PixelRatio.get();
            }
        },
        {
            key: "getPixelSizeForLayoutSize",
            value: /**
   * Converts a layout size (dp) to pixel size (px).
   *
   * Guaranteed to return an integer number.
   */ function getPixelSizeForLayoutSize(layoutSize) {
                return Math.round(layoutSize * PixelRatio.get());
            }
        },
        {
            key: "roundToNearestPixel",
            value: /**
   * Rounds a layout size (dp) to the nearest layout size that corresponds to
   * an integer number of pixels. For example, on a device with a PixelRatio
   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to
   * exactly (8.33 * 3) = 25 pixels.
   */ function roundToNearestPixel(layoutSize) {
                var ratio = PixelRatio.get();
                return Math.round(layoutSize * ratio) / ratio;
            }
        },
        {
            key: "startDetecting",
            value: // No-op for iOS, but used on the web. Should not be documented.
            function startDetecting() {}
        }
    ]);
    return PixelRatio;
}();
var _default = PixelRatio;


}),
14691: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
};
var insetsDiffer = function(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
};
module.exports = insetsDiffer;


}),
96940: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/**
 * Unrolls an array comparison specially for matrices. Prioritizes
 * checking of indices that are most likely to change so that the comparison
 * bails as early as possible.
 *
 * @param {MatrixMath.Matrix} one First matrix.
 * @param {MatrixMath.Matrix} two Second matrix.
 * @return {boolean} Whether or not the two matrices differ.
 */ var matricesDiffer = function(one, two) {
    if (one === two) {
        return false;
    }
    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[0] !== two[0] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
};
module.exports = matricesDiffer;


}),
60882: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var dummyPoint = {
    x: undefined,
    y: undefined
};
var pointsDiffer = function(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
};
module.exports = pointsDiffer;


}),
24395: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var dummySize = {
    width: undefined,
    height: undefined
};
var sizesDiffer = function(one, two) {
    var defaultedOne = one || dummySize;
    var defaultedTwo = two || dummySize;
    return defaultedOne !== defaultedTwo && (defaultedOne.width !== defaultedTwo.width || defaultedOne.height !== defaultedTwo.height);
};
module.exports = sizesDiffer;


}),
47006: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * EventEmitter manages listeners and publishes events to them.
 *
 * EventEmitter accepts a single type parameter that defines the valid events
 * and associated listener argument(s).
 *
 * @example
 *
 *   const emitter = new EventEmitter<{
 *     success: [number, string],
 *     error: [Error],
 *   }>();
 *
 *   emitter.on('success', (statusCode, responseText) => {...});
 *   emitter.emit('success', 200, '...');
 *
 *   emitter.on('error', error => {...});
 *   emitter.emit('error', new Error('Resource not found'));
 *
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return EventEmitter;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var // $FlowFixMe[incompatible-type]
_registry = /*#__PURE__*/ _class_private_field_loose_key._("_registry");
var EventEmitter = /*#__PURE__*/ function() {
    "use strict";
    function EventEmitter() {
        _class_call_check._(this, EventEmitter);
        Object.defineProperty(this, _registry, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _registry)[_registry] = {};
    }
    _create_class._(EventEmitter, [
        {
            /**
   * Registers a listener that is called when the supplied event is emitted.
   * Returns a subscription that has a `remove` method to undo registration.
   */ key: "addListener",
            value: function addListener(eventType, listener, context) {
                if (typeof listener !== 'function') {
                    throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
                }
                var registrations = allocate(_class_private_field_loose_base._(this, _registry)[_registry], eventType);
                var registration = {
                    context,
                    listener,
                    remove () {
                        registrations.delete(registration);
                    }
                };
                registrations.add(registration);
                return registration;
            }
        },
        {
            /**
   * Emits the supplied event. Additional arguments supplied to `emit` will be
   * passed through to each of the registered listeners.
   *
   * If a listener modifies the listeners registered for the same event, those
   * changes will not be reflected in the current invocation of `emit`.
   */ key: "emit",
            value: function emit(eventType, ...args) {
                var registrations = _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                if (registrations != null) {
                    // Copy `registrations` to take a snapshot when we invoke `emit`, in case
                    // registrations are added or removed when listeners are invoked.
                    for (var registration of Array.from(registrations)){
                        // $FlowFixMe[incompatible-call]
                        registration.listener.apply(registration.context, args);
                    }
                }
            }
        },
        {
            /**
   * Removes all registered listeners.
   */ key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                if (eventType == null) {
                    // $FlowFixMe[incompatible-type]
                    _class_private_field_loose_base._(this, _registry)[_registry] = {};
                } else {
                    delete _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                }
            }
        },
        {
            /**
   * Returns the number of registered listeners for the supplied event.
   */ key: "listenerCount",
            value: function listenerCount(eventType) {
                var registrations = _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                return registrations == null ? 0 : registrations.size;
            }
        }
    ]);
    return EventEmitter;
}();
function allocate(registry, eventType) {
    var registrations = registry[eventType];
    if (registrations == null) {
        registrations = new Set();
        registry[eventType] = registrations;
    }
    return registrations;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js.chunk.bundle.map?platform=ios