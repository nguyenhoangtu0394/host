(self["webpackChunkpos"] = self["webpackChunkpos"] || []).push([["vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-7e9cc2"], {
23907: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidTextInput',
    bubblingEventTypes: {
        topBlur: {
            phasedRegistrationNames: {
                bubbled: 'onBlur',
                captured: 'onBlurCapture'
            }
        },
        topEndEditing: {
            phasedRegistrationNames: {
                bubbled: 'onEndEditing',
                captured: 'onEndEditingCapture'
            }
        },
        topFocus: {
            phasedRegistrationNames: {
                bubbled: 'onFocus',
                captured: 'onFocusCapture'
            }
        },
        topKeyPress: {
            phasedRegistrationNames: {
                bubbled: 'onKeyPress',
                captured: 'onKeyPressCapture'
            }
        },
        topSubmitEditing: {
            phasedRegistrationNames: {
                bubbled: 'onSubmitEditing',
                captured: 'onSubmitEditingCapture'
            }
        }
    },
    directEventTypes: {
        topScroll: {
            registrationName: 'onScroll'
        }
    },
    validAttributes: {
        maxFontSizeMultiplier: true,
        adjustsFontSizeToFit: true,
        minimumFontScale: true,
        autoFocus: true,
        placeholder: true,
        inlineImagePadding: true,
        contextMenuHidden: true,
        textShadowColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        maxLength: true,
        selectTextOnFocus: true,
        textShadowRadius: true,
        underlineColorAndroid: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        textDecorationLine: true,
        submitBehavior: true,
        textAlignVertical: true,
        fontStyle: true,
        textShadowOffset: true,
        selectionColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        selectionHandleColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        placeholderTextColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        importantForAutofill: true,
        lineHeight: true,
        textTransform: true,
        returnKeyType: true,
        keyboardType: true,
        multiline: true,
        color: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        autoComplete: true,
        numberOfLines: true,
        letterSpacing: true,
        returnKeyLabel: true,
        fontSize: true,
        onKeyPress: true,
        cursorColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        text: true,
        showSoftInputOnFocus: true,
        textAlign: true,
        autoCapitalize: true,
        autoCorrect: true,
        caretHidden: true,
        secureTextEntry: true,
        textBreakStrategy: true,
        onScroll: true,
        onContentSizeChange: true,
        disableFullscreenUI: true,
        includeFontPadding: true,
        fontWeight: true,
        fontFamily: true,
        allowFontScaling: true,
        onSelectionChange: true,
        mostRecentEventCount: true,
        inlineImageLeft: true,
        editable: true,
        fontVariant: true,
        borderBottomRightRadius: true,
        borderBottomColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderRadius: true,
        borderRightColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderTopRightRadius: true,
        borderStyle: true,
        borderBottomLeftRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderTopLeftRadius: true,
        borderTopColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        }
    }
};
var AndroidTextInputNativeComponent = _NativeComponentRegistry.get('AndroidTextInput', ()=>__INTERNAL_VIEW_CONFIG);
var _default = AndroidTextInputNativeComponent;


}),
51023: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _RCTTextInputViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25297));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = _object_spread._({
    uiViewClassName: 'RCTSinglelineTextInputView'
}, _RCTTextInputViewConfig.default);
var SinglelineTextInputNativeComponent = _NativeComponentRegistry.get('RCTSinglelineTextInputView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = SinglelineTextInputNativeComponent;


}),
51038: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeReactNativeFeatureFlags = _TurboModuleRegistry.get('NativeReactNativeFeatureFlagsCxx');
var _default = NativeReactNativeFeatureFlags;


}),
63614: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
/**
 * This is a function exposed to the React Renderer that can be used by the
 * pre-Fabric renderer to emit accessibility events to pre-Fabric nodes.
 */ function legacySendAccessibilityEvent(reactTag, eventType) {
    if (eventType === 'focus') {
        (0, _nullthrows.default)(_UIManager.default.sendAccessibilityEvent)(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewFocused);
    }
    if (eventType === 'click') {
        (0, _nullthrows.default)(_UIManager.default.sendAccessibilityEvent)(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewClicked);
    }
}
module.exports = legacySendAccessibilityEvent;


}),
25297: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _object_spread = __webpack_require__(36192);
var _ViewConfigIgnore = __webpack_require__(72291);
var RCTTextInputViewConfig = {
    bubblingEventTypes: {
        topBlur: {
            phasedRegistrationNames: {
                bubbled: 'onBlur',
                captured: 'onBlurCapture'
            }
        },
        topChange: {
            phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture'
            }
        },
        topEndEditing: {
            phasedRegistrationNames: {
                bubbled: 'onEndEditing',
                captured: 'onEndEditingCapture'
            }
        },
        topFocus: {
            phasedRegistrationNames: {
                bubbled: 'onFocus',
                captured: 'onFocusCapture'
            }
        },
        topKeyPress: {
            phasedRegistrationNames: {
                bubbled: 'onKeyPress',
                captured: 'onKeyPressCapture'
            }
        },
        topSubmitEditing: {
            phasedRegistrationNames: {
                bubbled: 'onSubmitEditing',
                captured: 'onSubmitEditingCapture'
            }
        },
        topTouchCancel: {
            phasedRegistrationNames: {
                bubbled: 'onTouchCancel',
                captured: 'onTouchCancelCapture'
            }
        },
        topTouchEnd: {
            phasedRegistrationNames: {
                bubbled: 'onTouchEnd',
                captured: 'onTouchEndCapture'
            }
        },
        topTouchMove: {
            phasedRegistrationNames: {
                bubbled: 'onTouchMove',
                captured: 'onTouchMoveCapture'
            }
        }
    },
    directEventTypes: {
        topScroll: {
            registrationName: 'onScroll'
        },
        topSelectionChange: {
            registrationName: 'onSelectionChange'
        },
        topContentSizeChange: {
            registrationName: 'onContentSizeChange'
        },
        topChangeSync: {
            registrationName: 'onChangeSync'
        },
        topKeyPressSync: {
            registrationName: 'onKeyPressSync'
        }
    },
    validAttributes: _object_spread._({
        dynamicTypeRamp: true,
        fontSize: true,
        fontWeight: true,
        fontVariant: true,
        // flowlint-next-line untyped-import:off
        textShadowOffset: {
            diff: __webpack_require__(24395)
        },
        allowFontScaling: true,
        fontStyle: true,
        textTransform: true,
        textAlign: true,
        fontFamily: true,
        lineHeight: true,
        isHighlighted: true,
        writingDirection: true,
        textDecorationLine: true,
        textShadowRadius: true,
        letterSpacing: true,
        textDecorationStyle: true,
        textDecorationColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        color: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        maxFontSizeMultiplier: true,
        textShadowColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        editable: true,
        inputAccessoryViewID: true,
        inputAccessoryViewButtonLabel: true,
        caretHidden: true,
        enablesReturnKeyAutomatically: true,
        placeholderTextColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        clearButtonMode: true,
        keyboardType: true,
        selection: true,
        returnKeyType: true,
        submitBehavior: true,
        mostRecentEventCount: true,
        scrollEnabled: true,
        selectionColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        contextMenuHidden: true,
        secureTextEntry: true,
        placeholder: true,
        autoCorrect: true,
        multiline: true,
        textContentType: true,
        maxLength: true,
        autoCapitalize: true,
        keyboardAppearance: true,
        passwordRules: true,
        spellCheck: true,
        selectTextOnFocus: true,
        text: true,
        clearTextOnFocus: true,
        showSoftInputOnFocus: true,
        autoFocus: true,
        lineBreakStrategyIOS: true,
        lineBreakModeIOS: true,
        smartInsertDelete: true
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onChange: true,
        onSelectionChange: true,
        onContentSizeChange: true,
        onScroll: true,
        onChangeSync: true,
        onKeyPressSync: true
    }))
};
module.exports = RCTTextInputViewConfig;


}),
7273: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // This class is responsible for coordinating the "focused" state for
// TextInputs. All calls relating to the keyboard should be funneled
// through here.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _AndroidTextInputNativeComponent = __webpack_require__(23907);
var _RCTSingelineTextInputNativeComponent = __webpack_require__(51023);
var findNodeHandle = (__webpack_require__(46513)/* .findNodeHandle */.findNodeHandle);
var Platform = __webpack_require__(73335);
var currentlyFocusedInputRef = null;
var inputs = new Set();
function currentlyFocusedInput() {
    return currentlyFocusedInputRef;
}
/**
 * Returns the ID of the currently focused text field, if one exists
 * If no text field is focused it returns null
 */ function currentlyFocusedField() {
    if (false) {}
    return findNodeHandle(currentlyFocusedInputRef);
}
function focusInput(textField) {
    if (currentlyFocusedInputRef !== textField && textField != null) {
        currentlyFocusedInputRef = textField;
    }
}
function blurInput(textField) {
    if (currentlyFocusedInputRef === textField && textField != null) {
        currentlyFocusedInputRef = null;
    }
}
function focusField(textFieldID) {
    if (false) {}
    return;
}
function blurField(textFieldID) {
    if (false) {}
    return;
}
/**
 * @param {number} TextInputID id of the text field to focus
 * Focuses the specified text field
 * noop if the text field was already focused or if the field is not editable
 */ function focusTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    if (textField != null) {
        var // $FlowFixMe - `currentProps` is missing in `NativeMethods`
        _textField_currentProps;
        var fieldCanBeFocused = currentlyFocusedInputRef !== textField && ((_textField_currentProps = textField.currentProps) === null || _textField_currentProps === void 0 ? void 0 : _textField_currentProps.editable) !== false;
        if (!fieldCanBeFocused) {
            return;
        }
        focusInput(textField);
        if (Platform.OS === 'ios') {
            // This isn't necessarily a single line text input
            // But commands don't actually care as long as the thing being passed in
            // actually has a command with that name. So this should work with single
            // and multiline text inputs. Ideally we'll merge them into one component
            // in the future.
            _RCTSingelineTextInputNativeComponent.Commands.focus(textField);
        } else if (Platform.OS === 'android') {
            _AndroidTextInputNativeComponent.Commands.focus(textField);
        }
    }
}
/**
 * @param {number} textFieldID id of the text field to unfocus
 * Unfocuses the specified text field
 * noop if it wasn't focused
 */ function blurTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    if (currentlyFocusedInputRef === textField && textField != null) {
        blurInput(textField);
        if (Platform.OS === 'ios') {
            // This isn't necessarily a single line text input
            // But commands don't actually care as long as the thing being passed in
            // actually has a command with that name. So this should work with single
            // and multiline text inputs. Ideally we'll merge them into one component
            // in the future.
            _RCTSingelineTextInputNativeComponent.Commands.blur(textField);
        } else if (Platform.OS === 'android') {
            _AndroidTextInputNativeComponent.Commands.blur(textField);
        }
    }
}
function registerInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    inputs.add(textField);
}
function unregisterInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    inputs.delete(textField);
}
function isTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return false;
    }
    return inputs.has(textField);
}
module.exports = {
    currentlyFocusedInput,
    focusInput,
    blurInput,
    currentlyFocusedField,
    focusField,
    blurField,
    focusTextInput,
    blurTextInput,
    registerInput,
    unregisterInput,
    isTextInput
};


}),
69490: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
        return undefined;
    }
    if (!Array.isArray(style)) {
        // $FlowFixMe[incompatible-return]
        return style;
    }
    var result = {};
    for(var i = 0, styleLength = style.length; i < styleLength; ++i){
        // $FlowFixMe[underconstrained-implicit-instantiation]
        var computedStyle = flattenStyle(style[i]);
        if (computedStyle) {
            // $FlowFixMe[invalid-in-rhs]
            for(var key in computedStyle){
                // $FlowFixMe[incompatible-use]
                // $FlowFixMe[invalid-computed-prop]
                result[key] = computedStyle[key];
            }
        }
    }
    // $FlowFixMe[incompatible-return]
    return result;
}
module.exports = flattenStyle;


}),
21852: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var dispatchCommand = (__webpack_require__(46513)/* .dispatchCommand */.dispatchCommand);
function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach((command)=>{
        // $FlowFixMe[missing-local-annot]
        commandObj[command] = (ref, ...args)=>{
            // $FlowFixMe[incompatible-call]
            dispatchCommand(ref, command, args);
        };
    });
    return commandObj;
}
var _default = codegenNativeCommands;


}),
5914: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var logListeners;
function unstable_setLogListeners(listeners) {
    logListeners = listeners;
}
/*
 * @returns {bool} true if different, false if equal
 */ var deepDiffer = function(one, two, ref, maybeOptions) {
    var maxDepthOrOptions = ref === void 0 ? -1 : ref;
    var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
    var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
    if (maxDepth === 0) {
        return true;
    }
    if (one === two) {
        // Short circuit on identical object references instead of traversing them.
        return false;
    }
    if (typeof one === 'function' && typeof two === 'function') {
        // We consider all functions equal unless explicitly configured otherwise
        var unsafelyIgnoreFunctions = options === null || options === void 0 ? void 0 : options.unsafelyIgnoreFunctions;
        if (unsafelyIgnoreFunctions == null) {
            if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
                logListeners.onDifferentFunctionsIgnored(one.name, two.name);
            }
            unsafelyIgnoreFunctions = true;
        }
        return !unsafelyIgnoreFunctions;
    }
    if (typeof one !== 'object' || one === null) {
        // Primitives can be directly compared
        return one !== two;
    }
    if (typeof two !== 'object' || two === null) {
        // We know they are different because the previous case would have triggered
        // otherwise.
        return true;
    }
    if (one.constructor !== two.constructor) {
        return true;
    }
    if (Array.isArray(one)) {
        // We know two is also an array because the constructors are equal
        var len = one.length;
        if (two.length !== len) {
            return true;
        }
        for(var ii = 0; ii < len; ii++){
            if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
                return true;
            }
        }
    } else {
        for(var key in one){
            if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
                return true;
            }
        }
        for(var twoKey in two){
            // The only case we haven't checked yet is keys that are in two but aren't
            // in one, which means they are different.
            if (one[twoKey] === undefined && two[twoKey] !== undefined) {
                return true;
            }
        }
    }
    return false;
};
deepDiffer.unstable_setLogListeners = unstable_setLogListeners;
module.exports = deepDiffer;


}),
31022: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<aa51de14d1f085127ad410580beb15f6>>
 *       strict
 */ /**
 * IMPORTANT: Do NOT modify this file directly.
 *
 * To change the definition of the flags, edit
 *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.
 *
 * To regenerate this code, run the following script from the repo root:
 *   yarn featureflags --update
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    animatedShouldDebounceQueueFlush: function() {
        return animatedShouldDebounceQueueFlush;
    },
    animatedShouldUseSingleOp: function() {
        return animatedShouldUseSingleOp;
    },
    commonTestFlag: function() {
        return commonTestFlag;
    },
    commonTestFlagWithoutNativeImplementation: function() {
        return commonTestFlagWithoutNativeImplementation;
    },
    completeReactInstanceCreationOnBgThreadOnAndroid: function() {
        return completeReactInstanceCreationOnBgThreadOnAndroid;
    },
    disableEventLoopOnBridgeless: function() {
        return disableEventLoopOnBridgeless;
    },
    disableInteractionManager: function() {
        return disableInteractionManager;
    },
    disableInteractionManagerInBatchinator: function() {
        return disableInteractionManagerInBatchinator;
    },
    disableMountItemReorderingAndroid: function() {
        return disableMountItemReorderingAndroid;
    },
    enableAccessToHostTreeInFabric: function() {
        return enableAccessToHostTreeInFabric;
    },
    enableAlignItemsBaselineOnFabricIOS: function() {
        return enableAlignItemsBaselineOnFabricIOS;
    },
    enableAndroidLineHeightCentering: function() {
        return enableAndroidLineHeightCentering;
    },
    enableAnimatedAllowlist: function() {
        return enableAnimatedAllowlist;
    },
    enableAnimatedClearImmediateFix: function() {
        return enableAnimatedClearImmediateFix;
    },
    enableAnimatedPropsMemo: function() {
        return enableAnimatedPropsMemo;
    },
    enableBridgelessArchitecture: function() {
        return enableBridgelessArchitecture;
    },
    enableCppPropsIteratorSetter: function() {
        return enableCppPropsIteratorSetter;
    },
    enableDeletionOfUnmountedViews: function() {
        return enableDeletionOfUnmountedViews;
    },
    enableEagerRootViewAttachment: function() {
        return enableEagerRootViewAttachment;
    },
    enableEventEmitterRetentionDuringGesturesOnAndroid: function() {
        return enableEventEmitterRetentionDuringGesturesOnAndroid;
    },
    enableFabricLogs: function() {
        return enableFabricLogs;
    },
    enableFabricRenderer: function() {
        return enableFabricRenderer;
    },
    enableFabricRendererExclusively: function() {
        return enableFabricRendererExclusively;
    },
    enableFixForViewCommandRace: function() {
        return enableFixForViewCommandRace;
    },
    enableGranularShadowTreeStateReconciliation: function() {
        return enableGranularShadowTreeStateReconciliation;
    },
    enableIOSViewClipToPaddingBox: function() {
        return enableIOSViewClipToPaddingBox;
    },
    enableLayoutAnimationsOnAndroid: function() {
        return enableLayoutAnimationsOnAndroid;
    },
    enableLayoutAnimationsOnIOS: function() {
        return enableLayoutAnimationsOnIOS;
    },
    enableLongTaskAPI: function() {
        return enableLongTaskAPI;
    },
    enableNewBackgroundAndBorderDrawables: function() {
        return enableNewBackgroundAndBorderDrawables;
    },
    enablePreciseSchedulingForPremountItemsOnAndroid: function() {
        return enablePreciseSchedulingForPremountItemsOnAndroid;
    },
    enablePropsUpdateReconciliationAndroid: function() {
        return enablePropsUpdateReconciliationAndroid;
    },
    enableReportEventPaintTime: function() {
        return enableReportEventPaintTime;
    },
    enableSynchronousStateUpdates: function() {
        return enableSynchronousStateUpdates;
    },
    enableUIConsistency: function() {
        return enableUIConsistency;
    },
    enableViewRecycling: function() {
        return enableViewRecycling;
    },
    excludeYogaFromRawProps: function() {
        return excludeYogaFromRawProps;
    },
    fixMappingOfEventPrioritiesBetweenFabricAndReact: function() {
        return fixMappingOfEventPrioritiesBetweenFabricAndReact;
    },
    fixMountingCoordinatorReportedPendingTransactionsOnAndroid: function() {
        return fixMountingCoordinatorReportedPendingTransactionsOnAndroid;
    },
    fuseboxEnabledDebug: function() {
        return fuseboxEnabledDebug;
    },
    fuseboxEnabledRelease: function() {
        return fuseboxEnabledRelease;
    },
    initEagerTurboModulesOnNativeModulesQueueAndroid: function() {
        return initEagerTurboModulesOnNativeModulesQueueAndroid;
    },
    isLayoutAnimationEnabled: function() {
        return isLayoutAnimationEnabled;
    },
    jsOnlyTestFlag: function() {
        return jsOnlyTestFlag;
    },
    lazyAnimationCallbacks: function() {
        return lazyAnimationCallbacks;
    },
    loadVectorDrawablesOnImages: function() {
        return loadVectorDrawablesOnImages;
    },
    override: function() {
        return override;
    },
    shouldSkipStateUpdatesForLoopingAnimations: function() {
        return shouldSkipStateUpdatesForLoopingAnimations;
    },
    shouldUseAnimatedObjectForTransform: function() {
        return shouldUseAnimatedObjectForTransform;
    },
    shouldUseRemoveClippedSubviewsAsDefaultOnIOS: function() {
        return shouldUseRemoveClippedSubviewsAsDefaultOnIOS;
    },
    shouldUseSetNativePropsInFabric: function() {
        return shouldUseSetNativePropsInFabric;
    },
    traceTurboModulePromiseRejectionsOnAndroid: function() {
        return traceTurboModulePromiseRejectionsOnAndroid;
    },
    useAlwaysAvailableJSErrorHandling: function() {
        return useAlwaysAvailableJSErrorHandling;
    },
    useFabricInterop: function() {
        return useFabricInterop;
    },
    useImmediateExecutorInAndroidBridgeless: function() {
        return useImmediateExecutorInAndroidBridgeless;
    },
    useInsertionEffectsForAnimations: function() {
        return useInsertionEffectsForAnimations;
    },
    useNativeViewConfigsInBridgelessMode: function() {
        return useNativeViewConfigsInBridgelessMode;
    },
    useOptimisedViewPreallocationOnAndroid: function() {
        return useOptimisedViewPreallocationOnAndroid;
    },
    useOptimizedEventBatchingOnAndroid: function() {
        return useOptimizedEventBatchingOnAndroid;
    },
    useRefsForTextInputState: function() {
        return useRefsForTextInputState;
    },
    useRuntimeShadowNodeReferenceUpdate: function() {
        return useRuntimeShadowNodeReferenceUpdate;
    },
    useTurboModuleInterop: function() {
        return useTurboModuleInterop;
    },
    useTurboModules: function() {
        return useTurboModules;
    }
});
var _ReactNativeFeatureFlagsBase = __webpack_require__(25282);
var jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var disableInteractionManager = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManager', false);
var disableInteractionManagerInBatchinator = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManagerInBatchinator', false);
var enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableAnimatedAllowlist = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedAllowlist', true);
var enableAnimatedClearImmediateFix = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedClearImmediateFix', true);
var enableAnimatedPropsMemo = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedPropsMemo', true);
var isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var shouldSkipStateUpdatesForLoopingAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldSkipStateUpdatesForLoopingAnimations', false);
var shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var useInsertionEffectsForAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useInsertionEffectsForAnimations', false);
var useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var commonTestFlagWithoutNativeImplementation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlagWithoutNativeImplementation', false);
var completeReactInstanceCreationOnBgThreadOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('completeReactInstanceCreationOnBgThreadOnAndroid', true);
var disableEventLoopOnBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableEventLoopOnBridgeless', false);
var disableMountItemReorderingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMountItemReorderingAndroid', false);
var enableAlignItemsBaselineOnFabricIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAlignItemsBaselineOnFabricIOS', true);
var enableAndroidLineHeightCentering = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAndroidLineHeightCentering', true);
var enableBridgelessArchitecture = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBridgelessArchitecture', false);
var enableCppPropsIteratorSetter = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCppPropsIteratorSetter', false);
var enableDeletionOfUnmountedViews = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableDeletionOfUnmountedViews', false);
var enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableEventEmitterRetentionDuringGesturesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEventEmitterRetentionDuringGesturesOnAndroid', false);
var enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRenderer = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRenderer', false);
var enableFabricRendererExclusively = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRendererExclusively', false);
var enableFixForViewCommandRace = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFixForViewCommandRace', false);
var enableGranularShadowTreeStateReconciliation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableGranularShadowTreeStateReconciliation', false);
var enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableLayoutAnimationsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnAndroid', false);
var enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableNewBackgroundAndBorderDrawables = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNewBackgroundAndBorderDrawables', false);
var enablePreciseSchedulingForPremountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePreciseSchedulingForPremountItemsOnAndroid', false);
var enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var fuseboxEnabledDebug = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledDebug', true);
var fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var initEagerTurboModulesOnNativeModulesQueueAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('initEagerTurboModulesOnNativeModulesQueueAndroid', true);
var lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var loadVectorDrawablesOnImages = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('loadVectorDrawablesOnImages', false);
var traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var useAlwaysAvailableJSErrorHandling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useAlwaysAvailableJSErrorHandling', false);
var useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useImmediateExecutorInAndroidBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useImmediateExecutorInAndroidBridgeless', true);
var useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useOptimisedViewPreallocationOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimisedViewPreallocationOnAndroid', false);
var useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRuntimeShadowNodeReferenceUpdate = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdate', false);
var useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var useTurboModules = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModules', false);
var override = _ReactNativeFeatureFlagsBase.setOverrides;


}),
25282: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createJavaScriptFlagGetter: function() {
        return createJavaScriptFlagGetter;
    },
    createNativeFlagGetter: function() {
        return createNativeFlagGetter;
    },
    getOverrides: function() {
        return getOverrides;
    },
    setOverrides: function() {
        return setOverrides;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51038));
var accessedFeatureFlags = new Set();
var overrides;
// This defines the types for the overrides object, whose methods also receive
// the default value as a parameter.
function createGetter(configName, customValueGetter, defaultValue) {
    var cachedValue;
    return ()=>{
        if (cachedValue == null) {
            cachedValue = customValueGetter() ?? defaultValue;
        }
        return cachedValue;
    };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
    return createGetter(configName, ()=>{
        var _overrides_configName;
        accessedFeatureFlags.add(configName);
        return overrides === null || overrides === void 0 ? void 0 : (_overrides_configName = overrides[configName]) === null || _overrides_configName === void 0 ? void 0 : _overrides_configName.call(overrides, defaultValue);
    }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue) {
    return createGetter(configName, ()=>{
        var _NativeReactNativeFeatureFlags_configName;
        var valueFromNative = _NativeReactNativeFeatureFlags.default === null || _NativeReactNativeFeatureFlags.default === void 0 ? void 0 : (_NativeReactNativeFeatureFlags_configName = _NativeReactNativeFeatureFlags.default[configName]) === null || _NativeReactNativeFeatureFlags_configName === void 0 ? void 0 : _NativeReactNativeFeatureFlags_configName.call(_NativeReactNativeFeatureFlags.default);
        if (valueFromNative == null) {
            logUnavailableNativeModuleError(configName);
        }
        return valueFromNative;
    }, defaultValue);
}
function getOverrides() {
    return overrides;
}
function setOverrides(newOverrides) {
    if (overrides != null) {
        throw new Error('Feature flags cannot be overridden more than once');
    }
    if (accessedFeatureFlags.size > 0) {
        var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
        throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
    }
    overrides = newOverrides;
}
var reportedConfigNames = new Set();
function logUnavailableNativeModuleError(configName) {
    if (!reportedConfigNames.has(configName)) {
        reportedConfigNames.add(configName);
        console.error(`Could not access feature flag '${configName}' because native module method was not available`);
    }
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-7e9cc2.chunk.bundle.map?platform=android