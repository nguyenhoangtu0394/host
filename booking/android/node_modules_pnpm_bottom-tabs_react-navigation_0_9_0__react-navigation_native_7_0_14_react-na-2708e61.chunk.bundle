"use strict";
(self["webpackChunksas_booking"] = self["webpackChunksas_booking"] || []).push([["node_modules_pnpm_bottom-tabs_react-navigation_0_9_0__react-navigation_native_7_0_14_react-na-2708e61"], {
48759: (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "NativeBottomTabView", ({
    enumerable: true,
    get: function() {
        return _NativeBottomTabView.default;
    }
}));
Object.defineProperty(exports, "createNativeBottomTabNavigator", ({
    enumerable: true,
    get: function() {
        return _createNativeBottomTabNavigator.default;
    }
}));
var _createNativeBottomTabNavigator = _interopRequireDefault(__webpack_require__(45017));
var _NativeBottomTabView = _interopRequireDefault(__webpack_require__(56632));
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    };
} //# sourceMappingURL=index.js.map


}),
45017: (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _object_spread = __webpack_require__(41112);
var _object_spread_props = __webpack_require__(2898);
var _object_without_properties = __webpack_require__(45922);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports["default"] = createNativeBottomTabNavigator;
var _native = __webpack_require__(99725);
var _color = _interopRequireDefault(__webpack_require__(14077));
var _NativeBottomTabView = _interopRequireDefault(__webpack_require__(56632));
var _jsxRuntime = __webpack_require__(7100);
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    };
}
function NativeBottomTabNavigator(_param) {
    var id = _param.id, initialRouteName = _param.initialRouteName, backBehavior = _param.backBehavior, children = _param.children, layout = _param.layout, screenListeners = _param.screenListeners, screenOptions = _param.screenOptions, customActiveTintColor = _param.tabBarActiveTintColor, customInactiveTintColor = _param.tabBarInactiveTintColor, UNSTABLE_getStateForRouteNamesChange = _param.UNSTABLE_getStateForRouteNamesChange, rest = _object_without_properties._(_param, [
        "id",
        "initialRouteName",
        "backBehavior",
        "children",
        "layout",
        "screenListeners",
        "screenOptions",
        "tabBarActiveTintColor",
        "tabBarInactiveTintColor",
        "UNSTABLE_getStateForRouteNamesChange"
    ]);
    var colors = (0, _native.useTheme)().colors;
    var activeTintColor = customActiveTintColor === undefined ? colors.primary : customActiveTintColor;
    var inactiveTintColor = customInactiveTintColor === undefined ? (0, _color.default)(colors.text).mix((0, _color.default)(colors.card), 0.5).hex() : customInactiveTintColor;
    var _ref = (0, _native.useNavigationBuilder)(_native.TabRouter, {
        id,
        initialRouteName,
        backBehavior,
        children,
        layout,
        screenListeners,
        screenOptions,
        UNSTABLE_getStateForRouteNamesChange
    }), state = _ref.state, descriptors = _ref.descriptors, navigation = _ref.navigation, NavigationContent = _ref.NavigationContent;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(NavigationContent, {
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_NativeBottomTabView.default, _object_spread_props._(_object_spread._({}, rest), {
            tabBarActiveTintColor: activeTintColor,
            tabBarInactiveTintColor: inactiveTintColor,
            state: state,
            navigation: navigation,
            descriptors: descriptors
        }))
    });
}
function createNativeBottomTabNavigator(config) {
    return (0, _native.createNavigatorFactory)(NativeBottomTabNavigator)(config);
} //# sourceMappingURL=createNativeBottomTabNavigator.js.map


}),
56632: (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _object_spread = __webpack_require__(41112);
var _object_spread_props = __webpack_require__(2898);
var _object_without_properties = __webpack_require__(45922);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports["default"] = NativeBottomTabView;
var _native = __webpack_require__(99725);
var _reactNativeBottomTabs = _interopRequireDefault(__webpack_require__(32290));
var _jsxRuntime = __webpack_require__(7100);
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    };
}
function NativeBottomTabView(_param) {
    var state = _param.state, navigation = _param.navigation, descriptors = _param.descriptors, tabBar = _param.tabBar, rest = _object_without_properties._(_param, [
        "state",
        "navigation",
        "descriptors",
        "tabBar"
    ]);
    return (0, _jsxRuntime.jsx)(_reactNativeBottomTabs.default, _object_spread_props._(_object_spread._({}, rest), {
        navigationState: state,
        renderScene: (ref)=>{
            var route = ref.route;
            var _descriptors_route_key;
            return (_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.render();
        },
        getActiveTintColor: (ref)=>{
            var route = ref.route;
            var _descriptors_route_key;
            return (_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.options.tabBarActiveTintColor;
        },
        getLabelText: (ref)=>{
            var route = ref.route;
            var _descriptors_route_key;
            var options = (_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.options;
            return (options === null || options === void 0 ? void 0 : options.tabBarLabel) !== undefined ? options.tabBarLabel : (options === null || options === void 0 ? void 0 : options.title) !== undefined ? options.title : route.name;
        },
        getBadge: (ref)=>{
            var route = ref.route;
            var _descriptors_route_key;
            return (_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.options.tabBarBadge;
        },
        getHidden: (ref)=>{
            var route = ref.route;
            var _descriptors_route_key;
            var options = (_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.options;
            return (options === null || options === void 0 ? void 0 : options.tabBarItemHidden) === true;
        },
        getTestID: (ref)=>{
            var route = ref.route;
            var _descriptors_route_key;
            return (_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.options.tabBarButtonTestID;
        },
        tabBar: tabBar ? ()=>tabBar({
                state,
                descriptors,
                navigation
            }) : undefined,
        getIcon: (ref)=>{
            var route = ref.route, focused = ref.focused;
            var _descriptors_route_key;
            var options = (_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.options;
            if (options === null || options === void 0 ? void 0 : options.tabBarIcon) {
                var tabBarIcon = options.tabBarIcon;
                return tabBarIcon({
                    focused
                });
            }
            return null;
        },
        getLazy: (ref)=>{
            var route = ref.route;
            var _descriptors_route_key;
            return ((_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.options.lazy) ?? true;
        },
        getFreezeOnBlur: (ref)=>{
            var route = ref.route;
            var _descriptors_route_key;
            return (_descriptors_route_key = descriptors[route.key]) === null || _descriptors_route_key === void 0 ? void 0 : _descriptors_route_key.options.freezeOnBlur;
        },
        onTabLongPress: (index)=>{
            var route = state.routes[index];
            if (!route) {
                return;
            }
            navigation.emit({
                type: 'tabLongPress',
                target: route.key
            });
        },
        onIndexChange: (index)=>{
            var route = state.routes[index];
            if (!route) {
                return;
            }
            var event = navigation.emit({
                type: 'tabPress',
                target: route.key,
                canPreventDefault: true
            });
            if (event.defaultPrevented) {
                return;
            } else {
                navigation.dispatch(_object_spread_props._(_object_spread._({}, _native.CommonActions.navigate(route)), {
                    target: state.key
                }));
            }
        }
    }));
}


}),

}]);//# sourceMappingURL=node_modules_pnpm_bottom-tabs_react-navigation_0_9_0__react-navigation_native_7_0_14_react-na-2708e61.chunk.bundle.map?platform=android