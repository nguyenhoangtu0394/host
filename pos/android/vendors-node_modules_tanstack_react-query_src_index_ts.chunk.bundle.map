{"version":3,"file":"vendors-node_modules_tanstack_react-query_src_index_ts.chunk.bundle","sources":["webpack://pos/./node_modules/@swc/helpers/cjs/_async_iterator.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_construct.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_extends.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_get.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_is_native_function.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_object_destructuring_empty.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_super_prop_base.cjs","webpack://pos/./node_modules/@swc/helpers/cjs/_wrap_native_super.cjs","webpack://pos/./node_modules/@tanstack/query-core/src/focusManager.ts","webpack://pos/./node_modules/@tanstack/query-core/src/hydration.ts","webpack://pos/./node_modules/@tanstack/query-core/src/index.ts","webpack://pos/./node_modules/@tanstack/query-core/src/infiniteQueryBehavior.ts","webpack://pos/./node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","webpack://pos/./node_modules/@tanstack/query-core/src/mutation.ts","webpack://pos/./node_modules/@tanstack/query-core/src/mutationCache.ts","webpack://pos/./node_modules/@tanstack/query-core/src/mutationObserver.ts","webpack://pos/./node_modules/@tanstack/query-core/src/notifyManager.ts","webpack://pos/./node_modules/@tanstack/query-core/src/onlineManager.ts","webpack://pos/./node_modules/@tanstack/query-core/src/queriesObserver.ts","webpack://pos/./node_modules/@tanstack/query-core/src/query.ts","webpack://pos/./node_modules/@tanstack/query-core/src/queryCache.ts","webpack://pos/./node_modules/@tanstack/query-core/src/queryClient.ts","webpack://pos/./node_modules/@tanstack/query-core/src/queryObserver.ts","webpack://pos/./node_modules/@tanstack/query-core/src/removable.ts","webpack://pos/./node_modules/@tanstack/query-core/src/retryer.ts","webpack://pos/./node_modules/@tanstack/query-core/src/streamedQuery.ts","webpack://pos/./node_modules/@tanstack/query-core/src/subscribable.ts","webpack://pos/./node_modules/@tanstack/query-core/src/thenable.ts","webpack://pos/./node_modules/@tanstack/query-core/src/types.ts","webpack://pos/./node_modules/@tanstack/query-core/src/utils.ts","webpack://pos/./node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","webpack://pos/./node_modules/@tanstack/react-query/src/index.ts","webpack://pos/./node_modules/@tanstack/react-query/src/infiniteQueryOptions.ts","webpack://pos/./node_modules/@tanstack/react-query/src/isRestoring.ts","webpack://pos/./node_modules/@tanstack/react-query/src/queryOptions.ts","webpack://pos/./node_modules/@tanstack/react-query/src/suspense.ts","webpack://pos/./node_modules/@tanstack/react-query/src/types.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useBaseQuery.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useInfiniteQuery.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useIsFetching.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useMutation.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useMutationState.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useQueries.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useQuery.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useSuspenseInfiniteQuery.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useSuspenseQueries.ts","webpack://pos/./node_modules/@tanstack/react-query/src/useSuspenseQuery.ts","webpack://pos/./node_modules/@tanstack/react-query/src/utils.ts","webpack://pos/./node_modules/@tanstack/react-query/src/HydrationBoundary.tsx","webpack://pos/./node_modules/@tanstack/react-query/src/QueryClientProvider.tsx","webpack://pos/./node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","webpack://pos/./node_modules/@tanstack/react-query/src/usePrefetchInfiniteQuery.tsx","webpack://pos/./node_modules/@tanstack/react-query/src/usePrefetchQuery.tsx"],"sourcesContent":["\"use strict\";\n\nfunction _async_iterator(iterable) {\n    var method, async, sync, retry = 2;\n    for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) {\n        if (async && null != (method = iterable[async])) return method.call(iterable);\n        if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable));\n        async = \"@@asyncIterator\", sync = \"@@iterator\";\n    }\n    throw new TypeError(\"Object is not async iterable\");\n}\nfunction AsyncFromSyncIterator(s) {\n    function AsyncFromSyncIteratorContinuation(r) {\n        if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\"));\n\n        var done = r.done;\n\n        return Promise.resolve(r.value).then(function(value) {\n            return { value: value, done: done };\n        });\n    }\n\n    return AsyncFromSyncIterator = function(s) {\n        this.s = s, this.n = s.next;\n    },\n        AsyncFromSyncIterator.prototype = {\n            s: null,\n            n: null,\n\n            next: function() {\n                return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n            },\n            return: function(value) {\n                var ret = this.s.return;\n\n                return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));\n            },\n            throw: function(value) {\n                var thr = this.s.return;\n\n                return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));\n            }\n        },\n        new AsyncFromSyncIterator(s);\n}\nexports._ = _async_iterator;\n","\"use strict\";\n\nfunction _class_private_field_loose_base(receiver, privateKey) {\n    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n        throw new TypeError(\"attempted to use private field on non-instance\");\n    }\n\n    return receiver;\n}\nexports._ = _class_private_field_loose_base;\n","\"use strict\";\n\nvar id = 0;\n\nfunction _class_private_field_loose_key(name) {\n    return \"__private_\" + id++ + \"_\" + name;\n}\nexports._ = _class_private_field_loose_key;\n","\"use strict\";\n\nvar _is_native_reflect_construct = require(\"./_is_native_reflect_construct.cjs\");\nvar _set_prototype_of = require(\"./_set_prototype_of.cjs\");\nfunction _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct._()) exports._ = _construct = Reflect.construct;\n    else {\n        exports._ = _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of._(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexports._ = _construct;\n","\"use strict\";\n\nfunction _extends() {\n    exports._ = _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexports._ = _extends;\n","\"use strict\";\n\nvar _super_prop_base = require(\"./_super_prop_base.cjs\");\n\nfunction _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) exports._ = _get = Reflect.get;\n    else {\n        exports._ = _get = function get(target, property, receiver) {\n            var base = _super_prop_base._(target, property);\n\n            if (!base) return;\n\n            var desc = Object.getOwnPropertyDescriptor(base, property);\n\n            if (desc.get) return desc.get.call(receiver || target);\n\n            return desc.value;\n        };\n    }\n\n    return _get(target, property, receiver || target);\n}\nexports._ = _get;\n","\"use strict\";\n\nfunction _is_native_function(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nexports._ = _is_native_function;\n","\"use strict\";\n\nfunction _object_destructuring_empty(o) {\n    if (o === null || o === void 0) throw new TypeError(\"Cannot destructure \" + o);\n\n    return o;\n}\nexports._ = _object_destructuring_empty;\n","\"use strict\";\n\nvar _get_prototype_of = require(\"./_get_prototype_of.cjs\");\n\nfunction _super_prop_base(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n        object = _get_prototype_of._(object);\n        if (object === null) break;\n    }\n\n    return object;\n}\nexports._ = _super_prop_base;\n","\"use strict\";\n\nvar _construct = require(\"./_construct.cjs\");\nvar _get_prototype_of = require(\"./_get_prototype_of.cjs\");\nvar _is_native_function = require(\"./_is_native_function.cjs\");\nvar _set_prototype_of = require(\"./_set_prototype_of.cjs\");\n\nfunction _wrap_native_super(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    exports._ = _wrap_native_super = function(Class) {\n        if (Class === null || !_is_native_function._(Class)) return Class;\n        if (typeof Class !== \"function\") throw new TypeError(\"Super expression must either be null or a function\");\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n\n        function Wrapper() {\n            return _construct._(Class, arguments, _get_prototype_of._(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });\n\n        return _set_prototype_of._(Wrapper, Class);\n    };\n\n    return _wrap_native_super(Class);\n}\nexports._ = _wrap_native_super;\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n  shouldRedactErrors?: (error: unknown) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n  shouldRedactErrors: (error: unknown) => boolean,\n): DehydratedQuery {\n  return {\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (!shouldRedactErrors(error)) {\n          // Reject original error if it should not be redacted\n          return Promise.reject(error)\n        }\n        // If not in production, log original error before rejecting redacted error\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nfunction defaultShouldRedactErrors(_: unknown) {\n  return true\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const shouldRedactErrors =\n    options.shouldRedactErrors ??\n    client.getDefaultOptions().dehydrate?.shouldRedactErrors ??\n    defaultShouldRedactErrors\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query)\n        ? [dehydrateQuery(query, serializeData, shouldRedactErrors)]\n        : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta, promise }) => {\n    let query = queryCache.get(queryHash)\n\n    const data =\n      state.data === undefined ? state.data : deserializeData(state.data)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...serializedState } = state\n        query.setState({\n          ...serializedState,\n          data,\n        })\n      }\n    } else {\n      // Restore query\n      query = queryCache.build(\n        client,\n        {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta,\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: 'idle',\n        },\n      )\n    }\n\n    if (promise) {\n      // Note: `Promise.resolve` required cause\n      // RSC transformed promises are not thenable\n      const initialPromise = Promise.resolve(promise).then(deserializeData)\n\n      // this doesn't actually fetch - it just creates a retryer\n      // which will re-use the passed `initialPromise`\n      void query.fetch(undefined, { initialPromise })\n    }\n  })\n}\n","/* istanbul ignore file */\n\nexport { CancelledError } from './retryer'\nexport { QueryCache } from './queryCache'\nexport type { QueryCacheNotifyEvent } from './queryCache'\nexport { QueryClient } from './queryClient'\nexport { QueryObserver } from './queryObserver'\nexport { QueriesObserver } from './queriesObserver'\nexport { InfiniteQueryObserver } from './infiniteQueryObserver'\nexport { MutationCache } from './mutationCache'\nexport type { MutationCacheNotifyEvent } from './mutationCache'\nexport { MutationObserver } from './mutationObserver'\nexport { notifyManager, defaultScheduler } from './notifyManager'\nexport { focusManager } from './focusManager'\nexport { onlineManager } from './onlineManager'\nexport {\n  hashKey,\n  replaceEqualDeep,\n  isServer,\n  matchQuery,\n  matchMutation,\n  keepPreviousData,\n  skipToken,\n} from './utils'\nexport type { MutationFilters, QueryFilters, Updater, SkipToken } from './utils'\nexport { isCancelledError } from './retryer'\nexport {\n  dehydrate,\n  hydrate,\n  defaultShouldDehydrateQuery,\n  defaultShouldDehydrateMutation,\n} from './hydration'\n\nexport { streamedQuery as experimental_streamedQuery } from './streamedQuery'\n\n// Types\nexport * from './types'\nexport type { QueryState } from './query'\nexport { Query } from './query'\nexport type { MutationState } from './mutation'\nexport { Mutation } from './mutation'\nexport type {\n  DehydrateOptions,\n  DehydratedState,\n  HydrateOptions,\n} from './hydration'\nexport type { QueriesObserverOptions } from './queriesObserver'\n","import { addToEnd, addToStart, ensureQueryFn } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options as InfiniteQueryPageParamsOptions<TData>\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction\n      const oldPages = context.state.data?.pages || []\n      const oldPageParams = context.state.data?.pageParams || []\n      let result: InfiniteData<unknown> = { pages: [], pageParams: [] }\n      let currentPage = 0\n\n      const fetchFn = async () => {\n        let cancelled = false\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions)\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const queryFnContext: OmitKeyof<\n            QueryFunctionContext<QueryKey, unknown>,\n            'signal'\n          > = {\n            client: context.client,\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? 'backward' : 'forward',\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const page = await queryFn(\n            queryFnContext as QueryFunctionContext<QueryKey, unknown>,\n          )\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch all pages\n          do {\n            const param =\n              currentPage === 0\n                ? (oldPageParams[0] ?? options.initialPageParam)\n                : getNextPageParam(options, result)\n            if (currentPage > 0 && param == null) {\n              break\n            }\n            result = await fetchPage(result, param)\n            currentPage++\n          } while (currentPage < remainingPages)\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              client: context.client,\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return pages.length > 0\n    ? options.getNextPageParam(\n        pages[lastIndex],\n        pages,\n        pageParams[lastIndex],\n        pageParams,\n      )\n    : undefined\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return pages.length > 0\n    ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams)\n    : undefined\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n","import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Subscribable } from './subscribable'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverBaseResult,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: Subscribable<\n    InfiniteQueryObserverListener<TData, TError>\n  >['subscribe']\n\n  // Type override\n  getCurrentResult!: ReplaceReturnType<\n    QueryObserver<\n      TQueryFnData,\n      TError,\n      TData,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >['getCurrentResult'],\n    InfiniteQueryObserverResult<TData, TError>\n  >\n\n  // Type override\n  protected fetch!: ReplaceReturnType<\n    QueryObserver<\n      TQueryFnData,\n      TError,\n      TData,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >['fetch'],\n    Promise<InfiniteQueryObserverResult<TData, TError>>\n  >\n\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior(),\n    })\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const parentResult = super.createResult(query, options)\n\n    const { isFetching, isRefetching, isError, isRefetchError } = parentResult\n    const fetchDirection = state.fetchMeta?.fetchMore?.direction\n\n    const isFetchNextPageError = isError && fetchDirection === 'forward'\n    const isFetchingNextPage = isFetching && fetchDirection === 'forward'\n\n    const isFetchPreviousPageError = isError && fetchDirection === 'backward'\n    const isFetchingPreviousPage = isFetching && fetchDirection === 'backward'\n\n    const result: InfiniteQueryObserverBaseResult<TData, TError> = {\n      ...parentResult,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchNextPageError,\n      isFetchingNextPage,\n      isFetchPreviousPageError,\n      isFetchingPreviousPage,\n      isRefetchError:\n        isRefetchError && !isFetchNextPageError && !isFetchPreviousPageError,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n\n    return result as InfiniteQueryObserverResult<TData, TError>\n  }\n}\n\ntype ReplaceReturnType<\n  TFunction extends (...args: Array<any>) => unknown,\n  TReturn,\n> = (...args: Parameters<TFunction>) => TReturn\n","import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    const onContinue = () => {\n      this.#dispatch({ type: 'continue' })\n    }\n\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue,\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (restored) {\n        // Dispatch continue action to unpause restored mutation\n        onContinue()\n      } else {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n","import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\nexport type MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Set<Mutation<any, any, any, any>>\n  #scopes: Map<string, Array<Mutation<any, any, any, any>>>\n  #mutationId: number\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = new Set()\n    this.#scopes = new Map()\n    this.#mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations.add(mutation)\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const scopedMutations = this.#scopes.get(scope)\n      if (scopedMutations) {\n        scopedMutations.push(mutation)\n      } else {\n        this.#scopes.set(scope, [mutation])\n      }\n    }\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    if (this.#mutations.delete(mutation)) {\n      const scope = scopeFor(mutation)\n      if (typeof scope === 'string') {\n        const scopedMutations = this.#scopes.get(scope)\n        if (scopedMutations) {\n          if (scopedMutations.length > 1) {\n            const index = scopedMutations.indexOf(mutation)\n            if (index !== -1) {\n              scopedMutations.splice(index, 1)\n            }\n          } else if (scopedMutations[0] === mutation) {\n            this.#scopes.delete(scope)\n          }\n        }\n      }\n    }\n\n    // Currently we notify the removal even if the mutation was already removed.\n    // Consider making this an error or not notifying of the removal depending on the desired semantics.\n    this.notify({ type: 'removed', mutation })\n  }\n\n  canRun(mutation: Mutation<any, any, any, any>): boolean {\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const mutationsWithSameScope = this.#scopes.get(scope)\n      const firstPendingMutation = mutationsWithSameScope?.find(\n        (m) => m.state.status === 'pending',\n      )\n      // we can run if there is no current pending mutation (start use-case)\n      // or if WE are the first pending mutation (continue use-case)\n      return !firstPendingMutation || firstPendingMutation === mutation\n    } else {\n      // For unscoped mutations there are never any pending mutations in front of the\n      // current mutation\n      return true\n    }\n  }\n\n  runNext(mutation: Mutation<any, any, any, any>): Promise<unknown> {\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const foundMutation = this.#scopes\n        .get(scope)\n        ?.find((m) => m !== mutation && m.state.isPaused)\n\n      return foundMutation?.continue() ?? Promise.resolve()\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.notify({ type: 'removed', mutation })\n      })\n      this.#mutations.clear()\n      this.#scopes.clear()\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return Array.from(this.#mutations)\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    ) as Mutation<TData, TError, TVariables, TContext> | undefined\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused)\n\n    return notifyManager.batch(() =>\n      Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop)),\n      ),\n    )\n  }\n}\n\nfunction scopeFor(mutation: Mutation<any, any, any, any>) {\n  return mutation.options.scope?.id\n}\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport const defaultScheduler: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn = defaultScheduler\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n  #observerMatches: Array<QueryObserverMatch> = []\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions<any, any, any, any, any>>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#options = options\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    if (process.env.NODE_ENV !== 'production') {\n      const queryHashes = queries.map(\n        (query) => this.#client.defaultQueryOptions(query).queryHash,\n      )\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\n          '[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.',\n        )\n      }\n    }\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n      this.#observerMatches = newObserverMatches\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return this.#trackResult(result, matches)\n      },\n    ]\n  }\n\n  #trackResult(\n    result: Array<QueryObserverResult>,\n    matches: Array<QueryObserverMatch>,\n  ) {\n    return matches.map((match, index) => {\n      const observerResult = result[index]!\n      return !match.defaultedQueryOptions.notifyOnChangeProps\n        ? match.observer.trackResult(observerResult, (accessedProp) => {\n            // track property on all observers to ensure proper (synchronized) tracking (#7000)\n            matches.forEach((m) => {\n              m.observer.trackProp(accessedProp)\n            })\n          })\n        : observerResult\n    })\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObserversMap = new Map(\n      this.#observers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const observers: Array<QueryObserverMatch> = []\n\n    queries.forEach((options) => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const match = prevObserversMap.get(defaultedOptions.queryHash)\n      if (match) {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: match,\n        })\n      } else {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: new QueryObserver(this.#client, defaultedOptions),\n        })\n      }\n    })\n\n    return observers\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    if (this.hasListeners()) {\n      const previousResult = this.#combinedResult\n      const newTracked = this.#trackResult(this.#result, this.#observerMatches)\n      const newResult = this.#combineResult(newTracked, this.#options?.combine)\n\n      if (previousResult !== newResult) {\n        notifyManager.batch(() => {\n          this.listeners.forEach((listener) => {\n            listener(this.#result)\n          })\n        })\n      }\n    }\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type { QueryCache } from './queryCache'\nimport type { QueryClient } from './queryClient'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  client: QueryClient\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  client: QueryClient\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #client: QueryClient\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#client = config.client\n    this.#cache = this.#client.getQueryCache()\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStale(): boolean {\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.data === undefined ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const queryFnContext: OmitKeyof<\n        QueryFunctionContext<TQueryKey>,\n        'signal'\n      > = {\n        client: this.#client,\n        queryKey: this.queryKey,\n        meta: this.meta,\n      }\n\n      addSignalProperty(queryFnContext)\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn as QueryFunction<any>,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext as QueryFunctionContext<TQueryKey>)\n    }\n\n    // Trigger behavior hook\n    const context: OmitKeyof<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      client: this.#client,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n","import { hashQueryKeyByOptions, matchQuery } from './utils'\nimport { Query } from './query'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport type { QueryFilters } from './utils'\nimport type { Action, QueryState } from './query'\nimport type {\n  DefaultError,\n  NotifyEvent,\n  QueryKey,\n  QueryOptions,\n  WithRequired,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (\n    error: DefaultError,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\nexport interface QueryStore {\n  has: (queryHash: string) => boolean\n  set: (queryHash: string, query: Query) => void\n  get: (queryHash: string) => Query | undefined\n  delete: (queryHash: string) => void\n  values: () => IterableIterator<Query>\n}\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  #queries: QueryStore\n\n  constructor(public config: QueryCacheConfig = {}) {\n    super()\n    this.#queries = new Map<string, Query>()\n  }\n\n  build<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    client: QueryClient,\n    options: WithRequired<\n      QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        client,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query)\n\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.#queries.get(query.queryHash)\n\n    if (queryInMap) {\n      query.destroy()\n\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash)\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.#queries.get(queryHash) as\n      | Query<TQueryFnData, TError, TData, TQueryKey>\n      | undefined\n  }\n\n  getAll(): Array<Query> {\n    return [...this.#queries.values()]\n  }\n\n  find<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData>(\n    filters: WithRequired<QueryFilters, 'queryKey'>,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((query) =>\n      matchQuery(defaultedFilters, query),\n    ) as Query<TQueryFnData, TError, TData> | undefined\n  }\n\n  findAll(filters: QueryFilters<any> = {}): Array<Query> {\n    const queries = this.getAll()\n    return Object.keys(filters).length > 0\n      ? queries.filter((query) => matchQuery(filters, query))\n      : queries\n  }\n\n  notify(event: QueryCacheNotifyEvent): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureInfiniteQueryDataOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InferDataFromTag,\n  InferErrorFromTag,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  NoInfer,\n  OmitKeyof,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching<TQueryFilters extends QueryFilters<any> = QueryFilters>(\n    filters?: TQueryFilters,\n  ): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating<\n    TMutationFilters extends MutationFilters<any, any> = MutationFilters,\n  >(filters?: TMutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  /**\n   * Imperative (non-reactive) way to retrieve data for a QueryKey.\n   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.\n   *\n   * Hint: Do not use this function inside a component, because it won't receive updates.\n   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.\n   */\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n\n    return this.#queryCache.get(options.queryHash)?.state.data as\n      | TInferredQueryFnData\n      | undefined\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n    const query = this.#queryCache.build(this, defaultedOptions)\n    const cachedData = query.state.data\n\n    if (cachedData === undefined) {\n      return this.fetchQuery(options)\n    }\n\n    if (\n      options.revalidateIfStale &&\n      query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))\n    ) {\n      void this.prefetchQuery(defaultedOptions)\n    }\n\n    return Promise.resolve(cachedData)\n  }\n\n  getQueriesData<\n    TQueryFnData = unknown,\n    TQueryFilters extends QueryFilters<any> = QueryFilters,\n  >(filters: TQueryFilters): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): NoInfer<TInferredQueryFnData> | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<\n    TQueryFnData,\n    TQueryFilters extends QueryFilters<any> = QueryFilters,\n  >(\n    filters: TQueryFilters,\n    updater: Updater<\n      NoInfer<TQueryFnData> | undefined,\n      NoInfer<TQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n    TInferredError = InferErrorFromTag<TError, TTaggedQueryKey>,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TInferredError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TInferredError>(\n      options.queryHash,\n    )?.state\n  }\n\n  removeQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n  ): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n    options?: ResetOptions,\n  ): Promise<void> {\n    const queryCache = this.#queryCache\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(\n        {\n          type: 'active',\n          ...filters,\n        },\n        options,\n      )\n    })\n  }\n\n  cancelQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: InvalidateQueryFilters<TTaggedQueryKey>,\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters?.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      return this.refetchQueries(\n        {\n          ...filters,\n          type: filters?.refetchType ?? filters?.type ?? 'active',\n        },\n        options,\n      )\n    })\n  }\n\n  refetchQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: RefetchQueryFilters<TTaggedQueryKey>,\n    options: RefetchOptions = {},\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query),\n    )\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options as any)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  ensureInfiniteQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: EnsureInfiniteQueryDataOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n\n    return this.ensureQueryData(options as any)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n  >(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<\n        QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n        'queryKey'\n      >\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    const result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = void,\n    TContext = unknown,\n  >(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): OmitKeyof<MutationObserverOptions<any, any, any, any>, 'mutationKey'> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    const result: OmitKeyof<\n      MutationObserverOptions<any, any, any, any>,\n      'mutationKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n","import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult()\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key as keyof QueryObserverResult)\n          onPropTracked?.(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Per default, use query data\n    data = newState.data as unknown as TData\n    let skipSelect = false\n\n    // use placeholderData if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n        // we have to skip select when reading this memoization\n        // because prevResult.data is already \"selected\"\n        skipSelect = true\n      } else {\n        // compute placeholderData\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    // Select data if needed\n    // this also runs placeholderData through the select function\n    if (options.select && data !== undefined && !skipSelect) {\n      // Memoize select result\n      if (\n        prevResult &&\n        data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(data as any)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    this.#notify({ listeners: shouldNotifyListeners() })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: { listeners: boolean }): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  gcTime!: number\n  #gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.gcTime)\n    }\n  }\n\n  protected updateGcTime(newGcTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no gcTime is set\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.#gcTimeout) {\n      clearTimeout(this.#gcTimeout)\n      this.#gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { pendingThenable } from './thenable'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  initialPromise?: Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n  canRun: () => boolean\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n  canStart: () => boolean\n  start: () => Promise<TData>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError extends Error {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    super('CancelledError')\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n\n  const thenable = pendingThenable<TData>()\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const canContinue = () =>\n    focusManager.isFocused() &&\n    (config.networkMode === 'always' || onlineManager.isOnline()) &&\n    config.canRun()\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun()\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      thenable.resolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      thenable.reject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // we can re-use config.initialPromise on the first call of run()\n    const initialPromise =\n      failureCount === 0 ? config.initialPromise : undefined\n\n    // Execute query\n    try {\n      promiseOrValue = initialPromise ?? config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            return canContinue() ? undefined : pause()\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      continueFn?.()\n      return thenable\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      // Start loop\n      if (canStart()) {\n        run()\n      } else {\n        pause().then(run)\n      }\n      return thenable\n    },\n  }\n}\n","import type { QueryFunction, QueryFunctionContext, QueryKey } from './types'\n\n/**\n * This is a helper function to create a query function that streams data from an AsyncIterable.\n * Data will be an Array of all the chunks received.\n * The query will be in a 'pending' state until the first chunk of data is received, but will go to 'success' after that.\n * The query will stay in fetchStatus 'fetching' until the stream ends.\n * @param queryFn - The function that returns an AsyncIterable to stream data from.\n * @param refetchMode - Defaults to 'reset', which replaces data when a refetch happens. Set to 'append' to append new data to the existing data.\n */\nexport function streamedQuery<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>({\n  queryFn,\n  refetchMode,\n}: {\n  queryFn: (\n    context: QueryFunctionContext<TQueryKey>,\n  ) => AsyncIterable<TQueryFnData> | Promise<AsyncIterable<TQueryFnData>>\n  refetchMode?: 'append' | 'reset'\n}): QueryFunction<Array<TQueryFnData>, TQueryKey> {\n  return async (context) => {\n    if (refetchMode !== 'append') {\n      const query = context.client\n        .getQueryCache()\n        .find({ queryKey: context.queryKey, exact: true })\n      if (query && query.state.data !== undefined) {\n        query.setState({\n          status: 'pending',\n          data: undefined,\n          error: null,\n          fetchStatus: 'fetching',\n        })\n      }\n    }\n    const stream = await queryFn(context)\n    for await (const chunk of stream) {\n      if (context.signal.aborted) {\n        break\n      }\n      context.client.setQueryData<Array<TQueryFnData>>(\n        context.queryKey,\n        (prev = []) => {\n          return prev.concat(chunk)\n        },\n      )\n    }\n    return context.client.getQueryData(context.queryKey)!\n  }\n}\n","export class Subscribable<TListener extends Function> {\n  protected listeners = new Set<TListener>()\n\n  constructor() {\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.add(listener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","/**\n * Thenable types which matches React's types for promises\n *\n * React seemingly uses `.status`, `.value` and `.reason` properties on a promises to optimistically unwrap data from promises\n *\n * @see https://github.com/facebook/react/blob/main/packages/shared/ReactTypes.js#L112-L138\n * @see https://github.com/facebook/react/blob/4f604941569d2e8947ce1460a0b2997e835f37b9/packages/react-debug-tools/src/ReactDebugHooks.js#L224-L227\n */\n\ninterface Fulfilled<T> {\n  status: 'fulfilled'\n  value: T\n}\ninterface Rejected {\n  status: 'rejected'\n  reason: unknown\n}\ninterface Pending<T> {\n  status: 'pending'\n\n  /**\n   * Resolve the promise with a value.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  resolve: (value: T) => void\n  /**\n   * Reject the promise with a reason.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  reject: (reason: unknown) => void\n}\n\nexport type FulfilledThenable<T> = Promise<T> & Fulfilled<T>\nexport type RejectedThenable<T> = Promise<T> & Rejected\nexport type PendingThenable<T> = Promise<T> & Pending<T>\n\nexport type Thenable<T> =\n  | FulfilledThenable<T>\n  | RejectedThenable<T>\n  | PendingThenable<T>\n\nexport function pendingThenable<T>(): PendingThenable<T> {\n  let resolve: Pending<T>['resolve']\n  let reject: Pending<T>['reject']\n  // this could use `Promise.withResolvers()` in the future\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  }) as PendingThenable<T>\n\n  thenable.status = 'pending'\n  thenable.catch(() => {\n    // prevent unhandled rejection errors\n  })\n\n  function finalize(data: Fulfilled<T> | Rejected) {\n    Object.assign(thenable, data)\n\n    // clear pending props props to avoid calling them twice\n    delete (thenable as Partial<PendingThenable<T>>).resolve\n    delete (thenable as Partial<PendingThenable<T>>).reject\n  }\n\n  thenable.resolve = (value) => {\n    finalize({\n      status: 'fulfilled',\n      value,\n    })\n\n    resolve(value)\n  }\n  thenable.reject = (reason) => {\n    finalize({\n      status: 'rejected',\n      reason,\n    })\n\n    reject(reason)\n  }\n\n  return thenable\n}\n","/* istanbul ignore file */\n\nimport type { QueryClient } from './queryClient'\nimport type { DehydrateOptions, HydrateOptions } from './hydration'\nimport type { MutationState } from './mutation'\nimport type { FetchDirection, Query, QueryBehavior } from './query'\nimport type { RetryDelayValue, RetryValue } from './retryer'\nimport type { QueryFilters, QueryTypeFilter, SkipToken } from './utils'\nimport type { QueryCache } from './queryCache'\nimport type { MutationCache } from './mutationCache'\n\nexport type OmitKeyof<\n  TObject,\n  TKey extends TStrictly extends 'safely'\n    ?\n        | keyof TObject\n        | (string & Record<never, never>)\n        | (number & Record<never, never>)\n        | (symbol & Record<never, never>)\n    : keyof TObject,\n  TStrictly extends 'strictly' | 'safely' = 'strictly',\n> = Omit<TObject, TKey>\n\nexport type Override<TTargetA, TTargetB> = {\n  [AKey in keyof TTargetA]: AKey extends keyof TTargetB\n    ? TTargetB[AKey]\n    : TTargetA[AKey]\n}\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport interface Register {\n  // defaultError: Error\n  // queryMeta: Record<string, unknown>\n  // mutationMeta: Record<string, unknown>\n  // queryKey: ReadonlyArray<unknown>\n  // mutationKey: ReadonlyArray<unknown>\n}\n\nexport type DefaultError = Register extends {\n  defaultError: infer TError\n}\n  ? TError\n  : Error\n\nexport type QueryKey = Register extends {\n  queryKey: infer TQueryKey\n}\n  ? TQueryKey extends ReadonlyArray<unknown>\n    ? TQueryKey\n    : TQueryKey extends Array<unknown>\n      ? TQueryKey\n      : ReadonlyArray<unknown>\n  : ReadonlyArray<unknown>\n\nexport const dataTagSymbol = Symbol('dataTagSymbol')\nexport type dataTagSymbol = typeof dataTagSymbol\nexport const dataTagErrorSymbol = Symbol('dataTagErrorSymbol')\nexport type dataTagErrorSymbol = typeof dataTagErrorSymbol\nexport const unsetMarker = Symbol('unsetMarker')\nexport type UnsetMarker = typeof unsetMarker\nexport type AnyDataTag = {\n  [dataTagSymbol]: any\n  [dataTagErrorSymbol]: any\n}\nexport type DataTag<\n  TType,\n  TValue,\n  TError = UnsetMarker,\n> = TType extends AnyDataTag\n  ? TType\n  : TType & {\n      [dataTagSymbol]: TValue\n      [dataTagErrorSymbol]: TError\n    }\n\nexport type InferDataFromTag<TQueryFnData, TTaggedQueryKey extends QueryKey> =\n  TTaggedQueryKey extends DataTag<unknown, infer TaggedValue, unknown>\n    ? TaggedValue\n    : TQueryFnData\n\nexport type InferErrorFromTag<TError, TTaggedQueryKey extends QueryKey> =\n  TTaggedQueryKey extends DataTag<unknown, unknown, infer TaggedError>\n    ? TaggedError extends UnsetMarker\n      ? TError\n      : TaggedError\n    : TError\n\nexport type QueryFunction<\n  T = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never,\n> = (context: QueryFunctionContext<TQueryKey, TPageParam>) => T | Promise<T>\n\nexport type StaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = number | ((query: Query<TQueryFnData, TError, TData, TQueryKey>) => number)\n\nexport type Enabled<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> =\n  | boolean\n  | ((query: Query<TQueryFnData, TError, TData, TQueryKey>) => boolean)\n\nexport type QueryPersister<\n  T = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never,\n> = [TPageParam] extends [never]\n  ? (\n      queryFn: QueryFunction<T, TQueryKey, never>,\n      context: QueryFunctionContext<TQueryKey>,\n      query: Query,\n    ) => T | Promise<T>\n  : (\n      queryFn: QueryFunction<T, TQueryKey, TPageParam>,\n      context: QueryFunctionContext<TQueryKey>,\n      query: Query,\n    ) => T | Promise<T>\n\nexport type QueryFunctionContext<\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never,\n> = [TPageParam] extends [never]\n  ? {\n      client: QueryClient\n      queryKey: TQueryKey\n      signal: AbortSignal\n      meta: QueryMeta | undefined\n      pageParam?: unknown\n      /**\n       * @deprecated\n       * if you want access to the direction, you can add it to the pageParam\n       */\n      direction?: unknown\n    }\n  : {\n      client: QueryClient\n      queryKey: TQueryKey\n      signal: AbortSignal\n      pageParam: TPageParam\n      /**\n       * @deprecated\n       * if you want access to the direction, you can add it to the pageParam\n       */\n      direction: FetchDirection\n      meta: QueryMeta | undefined\n    }\n\nexport type InitialDataFunction<T> = () => T | undefined\n\ntype NonFunctionGuard<T> = T extends Function ? never : T\n\nexport type PlaceholderDataFunction<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = (\n  previousData: TQueryData | undefined,\n  previousQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined,\n) => TQueryData | undefined\n\nexport type QueriesPlaceholderDataFunction<TQueryData> = (\n  previousData: undefined,\n  previousQuery: undefined,\n) => TQueryData | undefined\n\nexport type QueryKeyHashFunction<TQueryKey extends QueryKey> = (\n  queryKey: TQueryKey,\n) => string\n\nexport type GetPreviousPageParamFunction<TPageParam, TQueryFnData = unknown> = (\n  firstPage: TQueryFnData,\n  allPages: Array<TQueryFnData>,\n  firstPageParam: TPageParam,\n  allPageParams: Array<TPageParam>,\n) => TPageParam | undefined | null\n\nexport type GetNextPageParamFunction<TPageParam, TQueryFnData = unknown> = (\n  lastPage: TQueryFnData,\n  allPages: Array<TQueryFnData>,\n  lastPageParam: TPageParam,\n  allPageParams: Array<TPageParam>,\n) => TPageParam | undefined | null\n\nexport interface InfiniteData<TData, TPageParam = unknown> {\n  pages: Array<TData>\n  pageParams: Array<TPageParam>\n}\n\nexport type QueryMeta = Register extends {\n  queryMeta: infer TQueryMeta\n}\n  ? TQueryMeta extends Record<string, unknown>\n    ? TQueryMeta\n    : Record<string, unknown>\n  : Record<string, unknown>\n\nexport type NetworkMode = 'online' | 'always' | 'offlineFirst'\n\nexport type NotifyOnChangeProps =\n  | Array<keyof InfiniteQueryObserverResult>\n  | 'all'\n  | undefined\n  | (() => Array<keyof InfiniteQueryObserverResult> | 'all' | undefined)\n\nexport interface QueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never,\n> {\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode?: NetworkMode\n  /**\n   * The time in milliseconds that unused/inactive cache data remains in memory.\n   * When a query's cache becomes unused or inactive, that cache data will be garbage collected after this duration.\n   * When different garbage collection times are specified, the longest one will be used.\n   * Setting it to `Infinity` will disable garbage collection.\n   */\n  gcTime?: number\n  queryFn?: QueryFunction<TQueryFnData, TQueryKey, TPageParam> | SkipToken\n  persister?: QueryPersister<\n    NoInfer<TQueryFnData>,\n    NoInfer<TQueryKey>,\n    NoInfer<TPageParam>\n  >\n  queryHash?: string\n  queryKey?: TQueryKey\n  queryKeyHashFn?: QueryKeyHashFunction<TQueryKey>\n  initialData?: TData | InitialDataFunction<TData>\n  initialDataUpdatedAt?: number | (() => number | undefined)\n  behavior?: QueryBehavior<TQueryFnData, TError, TData, TQueryKey>\n  /**\n   * Set this to `false` to disable structural sharing between query results.\n   * Set this to a function which accepts the old and new data and returns resolved data of the same type to implement custom structural sharing logic.\n   * Defaults to `true`.\n   */\n  structuralSharing?:\n    | boolean\n    | ((oldData: unknown | undefined, newData: unknown) => unknown)\n  _defaulted?: boolean\n  /**\n   * Additional payload to be stored on each query.\n   * Use this property to pass information that can be used in other places.\n   */\n  meta?: QueryMeta\n  /**\n   * Maximum number of pages to store in the data of an infinite query.\n   */\n  maxPages?: number\n}\n\nexport interface InitialPageParam<TPageParam = unknown> {\n  initialPageParam: TPageParam\n}\n\nexport interface InfiniteQueryPageParamsOptions<\n  TQueryFnData = unknown,\n  TPageParam = unknown,\n> extends InitialPageParam<TPageParam> {\n  /**\n   * This function can be set to automatically get the previous cursor for infinite queries.\n   * The result will also be used to determine the value of `hasPreviousPage`.\n   */\n  getPreviousPageParam?: GetPreviousPageParamFunction<TPageParam, TQueryFnData>\n  /**\n   * This function can be set to automatically get the next cursor for infinite queries.\n   * The result will also be used to determine the value of `hasNextPage`.\n   */\n  getNextPageParam: GetNextPageParamFunction<TPageParam, TQueryFnData>\n}\n\nexport type ThrowOnError<\n  TQueryFnData,\n  TError,\n  TQueryData,\n  TQueryKey extends QueryKey,\n> =\n  | boolean\n  | ((\n      error: TError,\n      query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    ) => boolean)\n\nexport interface QueryObserverOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never,\n> extends WithRequired<\n    QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey, TPageParam>,\n    'queryKey'\n  > {\n  /**\n   * Set this to `false` or a function that returns `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Accepts a boolean or function that returns a boolean.\n   * Defaults to `true`.\n   */\n  enabled?: Enabled<TQueryFnData, TError, TQueryData, TQueryKey>\n  /**\n   * The time in milliseconds after data is considered stale.\n   * If set to `Infinity`, the data will never be considered stale.\n   * If set to a function, the function will be executed with the query to compute a `staleTime`.\n   * Defaults to `0`.\n   */\n  staleTime?: StaleTime<TQueryFnData, TError, TQueryData, TQueryKey>\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * If set to a function, the function will be executed with the latest data and query to compute a frequency\n   * Defaults to `false`.\n   */\n  refetchInterval?:\n    | number\n    | false\n    | ((\n        query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n      ) => number | false | undefined)\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * If set to `true`, the query will refetch on window focus if the data is stale.\n   * If set to `false`, the query will not refetch on window focus.\n   * If set to `'always'`, the query will always refetch on window focus.\n   * If set to a function, the function will be executed with the latest data and query to compute the value.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?:\n    | boolean\n    | 'always'\n    | ((\n        query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n      ) => boolean | 'always')\n  /**\n   * If set to `true`, the query will refetch on reconnect if the data is stale.\n   * If set to `false`, the query will not refetch on reconnect.\n   * If set to `'always'`, the query will always refetch on reconnect.\n   * If set to a function, the function will be executed with the latest data and query to compute the value.\n   * Defaults to the value of `networkOnline` (`true`)\n   */\n  refetchOnReconnect?:\n    | boolean\n    | 'always'\n    | ((\n        query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n      ) => boolean | 'always')\n  /**\n   * If set to `true`, the query will refetch on mount if the data is stale.\n   * If set to `false`, will disable additional instances of a query to trigger background refetch.\n   * If set to `'always'`, the query will always refetch on mount.\n   * If set to a function, the function will be executed with the latest data and query to compute the value\n   * Defaults to `true`.\n   */\n  refetchOnMount?:\n    | boolean\n    | 'always'\n    | ((\n        query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n      ) => boolean | 'always')\n  /**\n   * If set to `false`, the query will not be retried on mount if it contains an error.\n   * Defaults to `true`.\n   */\n  retryOnMount?: boolean\n  /**\n   * If set, the component will only re-render if any of the listed properties change.\n   * When set to `['data', 'error']`, the component will only re-render when the `data` or `error` properties change.\n   * When set to `'all'`, the component will re-render whenever a query is updated.\n   * When set to a function, the function will be executed to compute the list of properties.\n   * By default, access to properties will be tracked, and the component will only re-render when one of the tracked properties change.\n   */\n  notifyOnChangeProps?: NotifyOnChangeProps\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * If set to `true` or `suspense` is `true`, all errors will be thrown to the error boundary.\n   * If set to `false` and `suspense` is `false`, errors are returned as state.\n   * If set to a function, it will be passed the error and the query, and it should return a boolean indicating whether to show the error in an error boundary (`true`) or return the error as state (`false`).\n   * Defaults to `false`.\n   */\n  throwOnError?: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  /**\n   * This option can be used to transform or select a part of the data returned by the query function.\n   */\n  select?: (data: TQueryData) => TData\n  /**\n   * If set to `true`, the query will suspend when `status === 'pending'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * If set, this value will be used as the placeholder data for this particular query observer while the query is still in the `loading` data and no initialData has been provided.\n   */\n  placeholderData?:\n    | NonFunctionGuard<TQueryData>\n    | PlaceholderDataFunction<\n        NonFunctionGuard<TQueryData>,\n        TError,\n        NonFunctionGuard<TQueryData>,\n        TQueryKey\n      >\n\n  _optimisticResults?: 'optimistic' | 'isRestoring'\n\n  /**\n   * Enable prefetching during rendering\n   */\n  experimental_prefetchInRender?: boolean\n}\n\nexport type WithRequired<TTarget, TKey extends keyof TTarget> = TTarget & {\n  [_ in TKey]: {}\n}\nexport type Optional<TTarget, TKey extends keyof TTarget> = Pick<\n  Partial<TTarget>,\n  TKey\n> &\n  OmitKeyof<TTarget, TKey>\n\nexport type DefaultedQueryObserverOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = WithRequired<\n  QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  'throwOnError' | 'refetchOnReconnect' | 'queryHash'\n>\n\nexport interface InfiniteQueryObserverOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey,\n      TPageParam\n    >,\n    InfiniteQueryPageParamsOptions<TQueryFnData, TPageParam> {}\n\nexport type DefaultedInfiniteQueryObserverOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> = WithRequired<\n  InfiniteQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey,\n    TPageParam\n  >,\n  'throwOnError' | 'refetchOnReconnect' | 'queryHash'\n>\n\nexport interface FetchQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never,\n> extends WithRequired<\n    QueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>,\n    'queryKey'\n  > {\n  initialPageParam?: never\n  /**\n   * The time in milliseconds after data is considered stale.\n   * If the data is fresh it will be returned from the cache.\n   */\n  staleTime?: StaleTime<TQueryFnData, TError, TData, TQueryKey>\n}\n\nexport interface EnsureQueryDataOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never,\n> extends FetchQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  > {\n  revalidateIfStale?: boolean\n}\n\nexport type EnsureInfiniteQueryDataOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> = FetchInfiniteQueryOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey,\n  TPageParam\n> & {\n  revalidateIfStale?: boolean\n}\n\ntype FetchInfiniteQueryPages<TQueryFnData = unknown, TPageParam = unknown> =\n  | { pages?: never }\n  | {\n      pages: number\n      getNextPageParam: GetNextPageParamFunction<TPageParam, TQueryFnData>\n    }\n\nexport type FetchInfiniteQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> = Omit<\n  FetchQueryOptions<\n    TQueryFnData,\n    TError,\n    InfiniteData<TData, TPageParam>,\n    TQueryKey,\n    TPageParam\n  >,\n  'initialPageParam'\n> &\n  InitialPageParam<TPageParam> &\n  FetchInfiniteQueryPages<TQueryFnData, TPageParam>\n\nexport interface ResultOptions {\n  throwOnError?: boolean\n}\n\nexport interface RefetchOptions extends ResultOptions {\n  /**\n   * If set to `true`, a currently running request will be cancelled before a new request is made\n   *\n   * If set to `false`, no refetch will be made if there is already a request running.\n   *\n   * Defaults to `true`.\n   */\n  cancelRefetch?: boolean\n}\n\nexport interface InvalidateQueryFilters<TQueryKey extends QueryKey = QueryKey>\n  extends QueryFilters<TQueryKey> {\n  refetchType?: QueryTypeFilter | 'none'\n}\n\nexport interface RefetchQueryFilters<TQueryKey extends QueryKey = QueryKey>\n  extends QueryFilters<TQueryKey> {}\n\nexport interface InvalidateOptions extends RefetchOptions {}\nexport interface ResetOptions extends RefetchOptions {}\n\nexport interface FetchNextPageOptions extends ResultOptions {\n  /**\n   * If set to `true`, calling `fetchNextPage` repeatedly will invoke `queryFn` every time,\n   * whether the previous invocation has resolved or not. Also, the result from previous invocations will be ignored.\n   *\n   * If set to `false`, calling `fetchNextPage` repeatedly won't have any effect until the first invocation has resolved.\n   *\n   * Defaults to `true`.\n   */\n  cancelRefetch?: boolean\n}\n\nexport interface FetchPreviousPageOptions extends ResultOptions {\n  /**\n   * If set to `true`, calling `fetchPreviousPage` repeatedly will invoke `queryFn` every time,\n   * whether the previous invocation has resolved or not. Also, the result from previous invocations will be ignored.\n   *\n   * If set to `false`, calling `fetchPreviousPage` repeatedly won't have any effect until the first invocation has resolved.\n   *\n   * Defaults to `true`.\n   */\n  cancelRefetch?: boolean\n}\n\nexport type QueryStatus = 'pending' | 'error' | 'success'\nexport type FetchStatus = 'fetching' | 'paused' | 'idle'\n\nexport interface QueryObserverBaseResult<\n  TData = unknown,\n  TError = DefaultError,\n> {\n  /**\n   * The last successfully resolved data for the query.\n   */\n  data: TData | undefined\n  /**\n   * The timestamp for when the query most recently returned the `status` as `\"success\"`.\n   */\n  dataUpdatedAt: number\n  /**\n   * The error object for the query, if an error was thrown.\n   * - Defaults to `null`.\n   */\n  error: TError | null\n  /**\n   * The timestamp for when the query most recently returned the `status` as `\"error\"`.\n   */\n  errorUpdatedAt: number\n  /**\n   * The failure count for the query.\n   * - Incremented every time the query fails.\n   * - Reset to `0` when the query succeeds.\n   */\n  failureCount: number\n  /**\n   * The failure reason for the query retry.\n   * - Reset to `null` when the query succeeds.\n   */\n  failureReason: TError | null\n  /**\n   * The sum of all errors.\n   */\n  errorUpdateCount: number\n  /**\n   * A derived boolean from the `status` variable, provided for convenience.\n   * - `true` if the query attempt resulted in an error.\n   */\n  isError: boolean\n  /**\n   * Will be `true` if the query has been fetched.\n   */\n  isFetched: boolean\n  /**\n   * Will be `true` if the query has been fetched after the component mounted.\n   * - This property can be used to not show any previously cached data.\n   */\n  isFetchedAfterMount: boolean\n  /**\n   * A derived boolean from the `fetchStatus` variable, provided for convenience.\n   * - `true` whenever the `queryFn` is executing, which includes initial `pending` as well as background refetch.\n   */\n  isFetching: boolean\n  /**\n   * Is `true` whenever the first fetch for a query is in-flight.\n   * - Is the same as `isFetching && isPending`.\n   */\n  isLoading: boolean\n  /**\n   * Will be `pending` if there's no cached data and no query attempt was finished yet.\n   */\n  isPending: boolean\n  /**\n   * Will be `true` if the query failed while fetching for the first time.\n   */\n  isLoadingError: boolean\n  /**\n   * @deprecated `isInitialLoading` is being deprecated in favor of `isLoading`\n   * and will be removed in the next major version.\n   */\n  isInitialLoading: boolean\n  /**\n   * A derived boolean from the `fetchStatus` variable, provided for convenience.\n   * - The query wanted to fetch, but has been `paused`.\n   */\n  isPaused: boolean\n  /**\n   * Will be `true` if the data shown is the placeholder data.\n   */\n  isPlaceholderData: boolean\n  /**\n   * Will be `true` if the query failed while refetching.\n   */\n  isRefetchError: boolean\n  /**\n   * Is `true` whenever a background refetch is in-flight, which _does not_ include initial `pending`.\n   * - Is the same as `isFetching && !isPending`.\n   */\n  isRefetching: boolean\n  /**\n   * Will be `true` if the data in the cache is invalidated or if the data is older than the given `staleTime`.\n   */\n  isStale: boolean\n  /**\n   * A derived boolean from the `status` variable, provided for convenience.\n   * - `true` if the query has received a response with no errors and is ready to display its data.\n   */\n  isSuccess: boolean\n  /**\n   * A function to manually refetch the query.\n   */\n  refetch: (\n    options?: RefetchOptions,\n  ) => Promise<QueryObserverResult<TData, TError>>\n  /**\n   * The status of the query.\n   * - Will be:\n   *   - `pending` if there's no cached data and no query attempt was finished yet.\n   *   - `error` if the query attempt resulted in an error.\n   *   - `success` if the query has received a response with no errors and is ready to display its data.\n   */\n  status: QueryStatus\n  /**\n   * The fetch status of the query.\n   * - `fetching`: Is `true` whenever the queryFn is executing, which includes initial `pending` as well as background refetch.\n   * - `paused`: The query wanted to fetch, but has been `paused`.\n   * - `idle`: The query is not fetching.\n   * - See [Network Mode](https://tanstack.com/query/latest/docs/framework/react/guides/network-mode) for more information.\n   */\n  fetchStatus: FetchStatus\n  /**\n   * A stable promise that will be resolved with the data of the query.\n   * Requires the `experimental_prefetchInRender` feature flag to be enabled.\n   * @example\n   *\n   * ### Enabling the feature flag\n   * ```ts\n   * const client = new QueryClient({\n   *   defaultOptions: {\n   *     queries: {\n   *       experimental_prefetchInRender: true,\n   *     },\n   *   },\n   * })\n   * ```\n   *\n   * ### Usage\n   * ```tsx\n   * import { useQuery } from '@tanstack/react-query'\n   * import React from 'react'\n   * import { fetchTodos, type Todo } from './api'\n   *\n   * function TodoList({ query }: { query: UseQueryResult<Todo[], Error> }) {\n   *   const data = React.use(query.promise)\n   *\n   *   return (\n   *     <ul>\n   *       {data.map(todo => (\n   *         <li key={todo.id}>{todo.title}</li>\n   *       ))}\n   *     </ul>\n   *   )\n   * }\n   *\n   * export function App() {\n   *   const query = useQuery({ queryKey: ['todos'], queryFn: fetchTodos })\n   *\n   *   return (\n   *     <>\n   *       <h1>Todos</h1>\n   *       <React.Suspense fallback={<div>Loading...</div>}>\n   *         <TodoList query={query} />\n   *       </React.Suspense>\n   *     </>\n   *   )\n   * }\n   * ```\n   */\n  promise: Promise<TData>\n}\n\nexport interface QueryObserverPendingResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends QueryObserverBaseResult<TData, TError> {\n  data: undefined\n  error: null\n  isError: false\n  isPending: true\n  isLoadingError: false\n  isRefetchError: false\n  isSuccess: false\n  isPlaceholderData: false\n  status: 'pending'\n}\n\nexport interface QueryObserverLoadingResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends QueryObserverBaseResult<TData, TError> {\n  data: undefined\n  error: null\n  isError: false\n  isPending: true\n  isLoading: true\n  isLoadingError: false\n  isRefetchError: false\n  isSuccess: false\n  isPlaceholderData: false\n  status: 'pending'\n}\n\nexport interface QueryObserverLoadingErrorResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends QueryObserverBaseResult<TData, TError> {\n  data: undefined\n  error: TError\n  isError: true\n  isPending: false\n  isLoading: false\n  isLoadingError: true\n  isRefetchError: false\n  isSuccess: false\n  isPlaceholderData: false\n  status: 'error'\n}\n\nexport interface QueryObserverRefetchErrorResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends QueryObserverBaseResult<TData, TError> {\n  data: TData\n  error: TError\n  isError: true\n  isPending: false\n  isLoading: false\n  isLoadingError: false\n  isRefetchError: true\n  isSuccess: false\n  isPlaceholderData: false\n  status: 'error'\n}\n\nexport interface QueryObserverSuccessResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends QueryObserverBaseResult<TData, TError> {\n  data: TData\n  error: null\n  isError: false\n  isPending: false\n  isLoading: false\n  isLoadingError: false\n  isRefetchError: false\n  isSuccess: true\n  isPlaceholderData: false\n  status: 'success'\n}\n\nexport interface QueryObserverPlaceholderResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends QueryObserverBaseResult<TData, TError> {\n  data: TData\n  isError: false\n  error: null\n  isPending: false\n  isLoading: false\n  isLoadingError: false\n  isRefetchError: false\n  isSuccess: true\n  isPlaceholderData: true\n  status: 'success'\n}\n\nexport type DefinedQueryObserverResult<\n  TData = unknown,\n  TError = DefaultError,\n> =\n  | QueryObserverRefetchErrorResult<TData, TError>\n  | QueryObserverSuccessResult<TData, TError>\n\nexport type QueryObserverResult<TData = unknown, TError = DefaultError> =\n  | DefinedQueryObserverResult<TData, TError>\n  | QueryObserverLoadingErrorResult<TData, TError>\n  | QueryObserverLoadingResult<TData, TError>\n  | QueryObserverPendingResult<TData, TError>\n  | QueryObserverPlaceholderResult<TData, TError>\n\nexport interface InfiniteQueryObserverBaseResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends QueryObserverBaseResult<TData, TError> {\n  /**\n   * This function allows you to fetch the next \"page\" of results.\n   */\n  fetchNextPage: (\n    options?: FetchNextPageOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n  /**\n   * This function allows you to fetch the previous \"page\" of results.\n   */\n  fetchPreviousPage: (\n    options?: FetchPreviousPageOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n  /**\n   * Will be `true` if there is a next page to be fetched (known via the `getNextPageParam` option).\n   */\n  hasNextPage: boolean\n  /**\n   * Will be `true` if there is a previous page to be fetched (known via the `getPreviousPageParam` option).\n   */\n  hasPreviousPage: boolean\n  /**\n   * Will be `true` if the query failed while fetching the next page.\n   */\n  isFetchNextPageError: boolean\n  /**\n   * Will be `true` while fetching the next page with `fetchNextPage`.\n   */\n  isFetchingNextPage: boolean\n  /**\n   * Will be `true` if the query failed while fetching the previous page.\n   */\n  isFetchPreviousPageError: boolean\n  /**\n   * Will be `true` while fetching the previous page with `fetchPreviousPage`.\n   */\n  isFetchingPreviousPage: boolean\n}\n\nexport interface InfiniteQueryObserverPendingResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends InfiniteQueryObserverBaseResult<TData, TError> {\n  data: undefined\n  error: null\n  isError: false\n  isPending: true\n  isLoadingError: false\n  isRefetchError: false\n  isFetchNextPageError: false\n  isFetchPreviousPageError: false\n  isSuccess: false\n  isPlaceholderData: false\n  status: 'pending'\n}\n\nexport interface InfiniteQueryObserverLoadingResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends InfiniteQueryObserverBaseResult<TData, TError> {\n  data: undefined\n  error: null\n  isError: false\n  isPending: true\n  isLoading: true\n  isLoadingError: false\n  isRefetchError: false\n  isFetchNextPageError: false\n  isFetchPreviousPageError: false\n  isSuccess: false\n  isPlaceholderData: false\n  status: 'pending'\n}\n\nexport interface InfiniteQueryObserverLoadingErrorResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends InfiniteQueryObserverBaseResult<TData, TError> {\n  data: undefined\n  error: TError\n  isError: true\n  isPending: false\n  isLoading: false\n  isLoadingError: true\n  isRefetchError: false\n  isFetchNextPageError: false\n  isFetchPreviousPageError: false\n  isSuccess: false\n  isPlaceholderData: false\n  status: 'error'\n}\n\nexport interface InfiniteQueryObserverRefetchErrorResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends InfiniteQueryObserverBaseResult<TData, TError> {\n  data: TData\n  error: TError\n  isError: true\n  isPending: false\n  isLoading: false\n  isLoadingError: false\n  isRefetchError: true\n  isSuccess: false\n  isPlaceholderData: false\n  status: 'error'\n}\n\nexport interface InfiniteQueryObserverSuccessResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends InfiniteQueryObserverBaseResult<TData, TError> {\n  data: TData\n  error: null\n  isError: false\n  isPending: false\n  isLoading: false\n  isLoadingError: false\n  isRefetchError: false\n  isFetchNextPageError: false\n  isFetchPreviousPageError: false\n  isSuccess: true\n  isPlaceholderData: false\n  status: 'success'\n}\n\nexport interface InfiniteQueryObserverPlaceholderResult<\n  TData = unknown,\n  TError = DefaultError,\n> extends InfiniteQueryObserverBaseResult<TData, TError> {\n  data: TData\n  isError: false\n  error: null\n  isPending: false\n  isLoading: false\n  isLoadingError: false\n  isRefetchError: false\n  isSuccess: true\n  isPlaceholderData: true\n  isFetchNextPageError: false\n  isFetchPreviousPageError: false\n  status: 'success'\n}\n\nexport type DefinedInfiniteQueryObserverResult<\n  TData = unknown,\n  TError = DefaultError,\n> =\n  | InfiniteQueryObserverRefetchErrorResult<TData, TError>\n  | InfiniteQueryObserverSuccessResult<TData, TError>\n\nexport type InfiniteQueryObserverResult<\n  TData = unknown,\n  TError = DefaultError,\n> =\n  | DefinedInfiniteQueryObserverResult<TData, TError>\n  | InfiniteQueryObserverLoadingErrorResult<TData, TError>\n  | InfiniteQueryObserverLoadingResult<TData, TError>\n  | InfiniteQueryObserverPendingResult<TData, TError>\n  | InfiniteQueryObserverPlaceholderResult<TData, TError>\n\nexport type MutationKey = Register extends {\n  mutationKey: infer TMutationKey\n}\n  ? TMutationKey extends Array<unknown>\n    ? TMutationKey\n    : TMutationKey extends Array<unknown>\n      ? TMutationKey\n      : ReadonlyArray<unknown>\n  : ReadonlyArray<unknown>\n\nexport type MutationStatus = 'idle' | 'pending' | 'success' | 'error'\n\nexport type MutationScope = {\n  id: string\n}\n\nexport type MutationMeta = Register extends {\n  mutationMeta: infer TMutationMeta\n}\n  ? TMutationMeta extends Record<string, unknown>\n    ? TMutationMeta\n    : Record<string, unknown>\n  : Record<string, unknown>\n\nexport type MutationFunction<TData = unknown, TVariables = unknown> = (\n  variables: TVariables,\n) => Promise<TData>\n\nexport interface MutationOptions<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> {\n  mutationFn?: MutationFunction<TData, TVariables>\n  mutationKey?: MutationKey\n  onMutate?: (\n    variables: TVariables,\n  ) => Promise<TContext | undefined> | TContext | undefined\n  onSuccess?: (\n    data: TData,\n    variables: TVariables,\n    context: TContext,\n  ) => Promise<unknown> | unknown\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    context: TContext | undefined,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: TData | undefined,\n    error: TError | null,\n    variables: TVariables,\n    context: TContext | undefined,\n  ) => Promise<unknown> | unknown\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode?: NetworkMode\n  gcTime?: number\n  _defaulted?: boolean\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\nexport interface MutationObserverOptions<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends MutationOptions<TData, TError, TVariables, TContext> {\n  throwOnError?: boolean | ((error: TError) => boolean)\n}\n\nexport interface MutateOptions<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> {\n  onSuccess?: (data: TData, variables: TVariables, context: TContext) => void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    context: TContext | undefined,\n  ) => void\n  onSettled?: (\n    data: TData | undefined,\n    error: TError | null,\n    variables: TVariables,\n    context: TContext | undefined,\n  ) => void\n}\n\nexport type MutateFunction<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> = (\n  variables: TVariables,\n  options?: MutateOptions<TData, TError, TVariables, TContext>,\n) => Promise<TData>\n\nexport interface MutationObserverBaseResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends MutationState<TData, TError, TVariables, TContext> {\n  /**\n   * The last successfully resolved data for the mutation.\n   */\n  data: TData | undefined\n  /**\n   * The variables object passed to the `mutationFn`.\n   */\n  variables: TVariables | undefined\n  /**\n   * The error object for the mutation, if an error was encountered.\n   * - Defaults to `null`.\n   */\n  error: TError | null\n  /**\n   * A boolean variable derived from `status`.\n   * - `true` if the last mutation attempt resulted in an error.\n   */\n  isError: boolean\n  /**\n   * A boolean variable derived from `status`.\n   * - `true` if the mutation is in its initial state prior to executing.\n   */\n  isIdle: boolean\n  /**\n   * A boolean variable derived from `status`.\n   * - `true` if the mutation is currently executing.\n   */\n  isPending: boolean\n  /**\n   * A boolean variable derived from `status`.\n   * - `true` if the last mutation attempt was successful.\n   */\n  isSuccess: boolean\n  /**\n   * The status of the mutation.\n   * - Will be:\n   *   - `idle` initial status prior to the mutation function executing.\n   *   - `pending` if the mutation is currently executing.\n   *   - `error` if the last mutation attempt resulted in an error.\n   *   - `success` if the last mutation attempt was successful.\n   */\n  status: MutationStatus\n  /**\n   * The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.\n   * @param variables - The variables object to pass to the `mutationFn`.\n   * @param options.onSuccess - This function will fire when the mutation is successful and will be passed the mutation's result.\n   * @param options.onError - This function will fire if the mutation encounters an error and will be passed the error.\n   * @param options.onSettled - This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error.\n   * @remarks\n   * - If you make multiple requests, `onSuccess` will fire only after the latest call you've made.\n   * - All the callback functions (`onSuccess`, `onError`, `onSettled`) are void functions, and the returned value will be ignored.\n   */\n  mutate: MutateFunction<TData, TError, TVariables, TContext>\n  /**\n   * A function to clean the mutation internal state (i.e., it resets the mutation to its initial state).\n   */\n  reset: () => void\n}\n\nexport interface MutationObserverIdleResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends MutationObserverBaseResult<TData, TError, TVariables, TContext> {\n  data: undefined\n  variables: undefined\n  error: null\n  isError: false\n  isIdle: true\n  isPending: false\n  isSuccess: false\n  status: 'idle'\n}\n\nexport interface MutationObserverLoadingResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends MutationObserverBaseResult<TData, TError, TVariables, TContext> {\n  data: undefined\n  variables: TVariables\n  error: null\n  isError: false\n  isIdle: false\n  isPending: true\n  isSuccess: false\n  status: 'pending'\n}\n\nexport interface MutationObserverErrorResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends MutationObserverBaseResult<TData, TError, TVariables, TContext> {\n  data: undefined\n  error: TError\n  variables: TVariables\n  isError: true\n  isIdle: false\n  isPending: false\n  isSuccess: false\n  status: 'error'\n}\n\nexport interface MutationObserverSuccessResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends MutationObserverBaseResult<TData, TError, TVariables, TContext> {\n  data: TData\n  error: null\n  variables: TVariables\n  isError: false\n  isIdle: false\n  isPending: false\n  isSuccess: true\n  status: 'success'\n}\n\nexport type MutationObserverResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> =\n  | MutationObserverIdleResult<TData, TError, TVariables, TContext>\n  | MutationObserverLoadingResult<TData, TError, TVariables, TContext>\n  | MutationObserverErrorResult<TData, TError, TVariables, TContext>\n  | MutationObserverSuccessResult<TData, TError, TVariables, TContext>\n\nexport interface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\nexport interface DefaultOptions<TError = DefaultError> {\n  queries?: OmitKeyof<\n    QueryObserverOptions<unknown, TError>,\n    'suspense' | 'queryKey'\n  >\n  mutations?: MutationObserverOptions<unknown, TError, unknown, unknown>\n  hydrate?: HydrateOptions['defaultOptions']\n  dehydrate?: DehydrateOptions\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\nexport type NotifyEventType =\n  | 'added'\n  | 'removed'\n  | 'updated'\n  | 'observerAdded'\n  | 'observerRemoved'\n  | 'observerResultsUpdated'\n  | 'observerOptionsUpdated'\n\nexport interface NotifyEvent {\n  type: NotifyEventType\n}\n","import type {\n  DefaultError,\n  Enabled,\n  FetchStatus,\n  MutationKey,\n  MutationStatus,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n  StaleTime,\n} from './types'\nimport type { Mutation } from './mutation'\nimport type { FetchOptions, Query } from './query'\n\n// TYPES\n\nexport interface QueryFilters<TQueryKey extends QueryKey = QueryKey> {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: TQueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (\n    mutation: Mutation<TData, TError, TVariables, TContext>,\n  ) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Filter by mutation status\n   */\n  status?: MutationStatus\n}\n\nexport type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput)\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in globalThis\n\nexport function noop(): void\nexport function noop(): undefined\nexport function noop() {}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: TInput) => TOutput)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function resolveStaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  staleTime: undefined | StaleTime<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): number | undefined {\n  return typeof staleTime === 'function' ? staleTime(query) : staleTime\n}\n\nexport function resolveEnabled<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  enabled: undefined | Enabled<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): boolean | undefined {\n  return typeof enabled === 'function' ? enabled(query) : enabled\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: Pick<QueryOptions<any, any, any, any>, 'queryKeyHashFn'>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query & mutation keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return Object.keys(b).every((key) => partialMatchKey(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aItems = array ? a : Object.keys(a)\n    const aSize = aItems.length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      if (\n        ((!array && aItems.includes(key)) || array) &&\n        a[key] === undefined &&\n        b[key] === undefined\n      ) {\n        copy[key] = undefined\n        equalItems++\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key])\n        if (copy[key] === a[key] && a[key] !== undefined) {\n          equalItems++\n        }\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects.\n */\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\n// eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has no constructor\n  const ctor = o.constructor\n  if (ctor === undefined) {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Handles Objects created by Object.create(<arbitrary prototype>)\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data) as TData\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        return replaceEqualDeep(prevData, data)\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`,\n        )\n\n        // Prevent the replaceEqualDeep from being called again down below.\n        throw error\n      }\n    }\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n\nexport function keepPreviousData<T>(\n  previousData: T | undefined,\n): T | undefined {\n  return previousData\n}\n\nexport function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [...items, item]\n  return max && newItems.length > max ? newItems.slice(1) : newItems\n}\n\nexport function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [item, ...items]\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems\n}\n\nexport const skipToken = Symbol()\nexport type SkipToken = typeof skipToken\n\nexport function ensureQueryFn<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: {\n    queryFn?: QueryFunction<TQueryFnData, TQueryKey> | SkipToken\n    queryHash?: string\n  },\n  fetchOptions?: FetchOptions<TQueryFnData>,\n): QueryFunction<TQueryFnData, TQueryKey> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`,\n      )\n    }\n  }\n\n  // if we attempt to retry a fetch that was triggered from an initialPromise\n  // when we don't have a queryFn yet, we can't retry, so we just return the already rejected initialPromise\n  // if an observer has already mounted, we will be able to retry with that queryFn\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise!\n  }\n\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () =>\n      Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`))\n  }\n\n  return options.queryFn\n}\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n  suspense: boolean | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    ((suspense && result.data === undefined) ||\n      shouldThrowError(throwOnError, [result.error, query]))\n  )\n}\n","/* istanbul ignore file */\n\n// Re-export core\nexport * from '@tanstack/query-core'\n\n// React Query\nexport * from './types'\nexport { useQueries } from './useQueries'\nexport type { QueriesResults, QueriesOptions } from './useQueries'\nexport { useQuery } from './useQuery'\nexport { useSuspenseQuery } from './useSuspenseQuery'\nexport { useSuspenseInfiniteQuery } from './useSuspenseInfiniteQuery'\nexport { useSuspenseQueries } from './useSuspenseQueries'\nexport type {\n  SuspenseQueriesResults,\n  SuspenseQueriesOptions,\n} from './useSuspenseQueries'\nexport { usePrefetchQuery } from './usePrefetchQuery'\nexport { usePrefetchInfiniteQuery } from './usePrefetchInfiniteQuery'\nexport { queryOptions } from './queryOptions'\nexport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n  UnusedSkipTokenOptions,\n} from './queryOptions'\nexport { infiniteQueryOptions } from './infiniteQueryOptions'\nexport type {\n  DefinedInitialDataInfiniteOptions,\n  UndefinedInitialDataInfiniteOptions,\n  UnusedSkipTokenInfiniteOptions,\n} from './infiniteQueryOptions'\nexport {\n  QueryClientContext,\n  QueryClientProvider,\n  useQueryClient,\n} from './QueryClientProvider'\nexport type { QueryClientProviderProps } from './QueryClientProvider'\nexport type { QueryErrorResetBoundaryProps } from './QueryErrorResetBoundary'\nexport { HydrationBoundary } from './HydrationBoundary'\nexport type { HydrationBoundaryProps } from './HydrationBoundary'\nexport type {\n  QueryErrorClearResetFunction,\n  QueryErrorIsResetFunction,\n  QueryErrorResetBoundaryFunction,\n  QueryErrorResetFunction,\n} from './QueryErrorResetBoundary'\nexport {\n  QueryErrorResetBoundary,\n  useQueryErrorResetBoundary,\n} from './QueryErrorResetBoundary'\nexport { useIsFetching } from './useIsFetching'\nexport { useIsMutating, useMutationState } from './useMutationState'\nexport { useMutation } from './useMutation'\nexport { useInfiniteQuery } from './useInfiniteQuery'\nexport { useIsRestoring, IsRestoringProvider } from './isRestoring'\n","import type {\n  DataTag,\n  DefaultError,\n  InfiniteData,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryKey,\n  SkipToken,\n} from '@tanstack/query-core'\nimport type { UseInfiniteQueryOptions } from './types'\n\nexport type UndefinedInitialDataInfiniteOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> = UseInfiniteQueryOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryFnData,\n  TQueryKey,\n  TPageParam\n> & {\n  initialData?:\n    | undefined\n    | NonUndefinedGuard<InfiniteData<TQueryFnData, TPageParam>>\n    | InitialDataFunction<\n        NonUndefinedGuard<InfiniteData<TQueryFnData, TPageParam>>\n      >\n}\n\nexport type UnusedSkipTokenInfiniteOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> = OmitKeyof<\n  UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  'queryFn'\n> & {\n  queryFn?: Exclude<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey,\n      TPageParam\n    >['queryFn'],\n    SkipToken | undefined\n  >\n}\n\ntype NonUndefinedGuard<T> = T extends undefined ? never : T\n\nexport type DefinedInitialDataInfiniteOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> = UseInfiniteQueryOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryFnData,\n  TQueryKey,\n  TPageParam\n> & {\n  initialData:\n    | NonUndefinedGuard<InfiniteData<TQueryFnData, TPageParam>>\n    | (() => NonUndefinedGuard<InfiniteData<TQueryFnData, TPageParam>>)\n    | undefined\n}\n\nexport function infiniteQueryOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n): DefinedInitialDataInfiniteOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey,\n  TPageParam\n> & {\n  queryKey: DataTag<TQueryKey, InfiniteData<TQueryFnData>, TError>\n}\n\nexport function infiniteQueryOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UnusedSkipTokenInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n): UnusedSkipTokenInfiniteOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey,\n  TPageParam\n> & {\n  queryKey: DataTag<TQueryKey, InfiniteData<TQueryFnData>, TError>\n}\n\nexport function infiniteQueryOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n): UndefinedInitialDataInfiniteOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey,\n  TPageParam\n> & {\n  queryKey: DataTag<TQueryKey, InfiniteData<TQueryFnData>, TError>\n}\n\nexport function infiniteQueryOptions(options: unknown) {\n  return options\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import type {\n  DataTag,\n  DefaultError,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunction,\n  QueryKey,\n  SkipToken,\n} from '@tanstack/query-core'\nimport type { UseQueryOptions } from './types'\n\nexport type UndefinedInitialDataOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> & {\n  initialData?:\n    | undefined\n    | InitialDataFunction<NonUndefinedGuard<TQueryFnData>>\n    | NonUndefinedGuard<TQueryFnData>\n}\n\nexport type UnusedSkipTokenOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = OmitKeyof<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'queryFn'\n> & {\n  queryFn?: Exclude<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>['queryFn'],\n    SkipToken | undefined\n  >\n}\n\ntype NonUndefinedGuard<T> = T extends undefined ? never : T\n\nexport type DefinedInitialDataOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'queryFn'> & {\n  initialData:\n    | NonUndefinedGuard<TQueryFnData>\n    | (() => NonUndefinedGuard<TQueryFnData>)\n  queryFn?: QueryFunction<TQueryFnData, TQueryKey>\n}\n\nexport function queryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n): DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey> & {\n  queryKey: DataTag<TQueryKey, TQueryFnData, TError>\n}\n\nexport function queryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UnusedSkipTokenOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UnusedSkipTokenOptions<TQueryFnData, TError, TData, TQueryKey> & {\n  queryKey: DataTag<TQueryKey, TQueryFnData, TError>\n}\n\nexport function queryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey> & {\n  queryKey: DataTag<TQueryKey, TQueryFnData, TError>\n}\n\nexport function queryOptions(options: unknown) {\n  return options\n}\n","import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  const originalStaleTime = defaultedOptions.staleTime\n\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => Math.max(originalStaleTime(...args), 1000)\n        : Math.max(originalStaleTime ?? 1000, 1000)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n","/* istanbul ignore file */\n\nimport type {\n  DefaultError,\n  DefinedInfiniteQueryObserverResult,\n  DefinedQueryObserverResult,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  MutateFunction,\n  MutationObserverOptions,\n  MutationObserverResult,\n  OmitKeyof,\n  Override,\n  QueryKey,\n  QueryObserverOptions,\n  QueryObserverResult,\n  SkipToken,\n} from '@tanstack/query-core'\n\nexport type AnyUseBaseQueryOptions = UseBaseQueryOptions<\n  any,\n  any,\n  any,\n  any,\n  any\n>\nexport interface UseBaseQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n  /**\n   * Set this to `false` to unsubscribe this observer from updates to the query cache.\n   * Defaults to `true`.\n   */\n  subscribed?: boolean\n}\n\nexport type AnyUseQueryOptions = UseQueryOptions<any, any, any, any>\nexport interface UseQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends OmitKeyof<\n    UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>,\n    'suspense'\n  > {}\n\nexport type AnyUseSuspenseQueryOptions = UseSuspenseQueryOptions<\n  any,\n  any,\n  any,\n  any\n>\nexport interface UseSuspenseQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends OmitKeyof<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryFn' | 'enabled' | 'throwOnError' | 'placeholderData'\n  > {\n  queryFn?: Exclude<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>['queryFn'],\n    SkipToken\n  >\n}\n\nexport type AnyUseInfiniteQueryOptions = UseInfiniteQueryOptions<\n  any,\n  any,\n  any,\n  any,\n  any,\n  any\n>\nexport interface UseInfiniteQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends OmitKeyof<\n    InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    'suspense'\n  > {\n  /**\n   * Set this to `false` to unsubscribe this observer from updates to the query cache.\n   * Defaults to `true`.\n   */\n  subscribed?: boolean\n}\n\nexport type AnyUseSuspenseInfiniteQueryOptions =\n  UseSuspenseInfiniteQueryOptions<any, any, any, any, any, any>\nexport interface UseSuspenseInfiniteQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends OmitKeyof<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    'queryFn' | 'enabled' | 'throwOnError' | 'placeholderData'\n  > {\n  queryFn?: Exclude<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >['queryFn'],\n    SkipToken\n  >\n}\n\nexport type UseBaseQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = QueryObserverResult<TData, TError>\n\nexport type UseQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = UseBaseQueryResult<TData, TError>\n\nexport type UseSuspenseQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = OmitKeyof<\n  DefinedQueryObserverResult<TData, TError>,\n  'isPlaceholderData' | 'promise'\n>\n\nexport type DefinedUseQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = DefinedQueryObserverResult<TData, TError>\n\nexport type UseInfiniteQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = InfiniteQueryObserverResult<TData, TError>\n\nexport type DefinedUseInfiniteQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = DefinedInfiniteQueryObserverResult<TData, TError>\n\nexport type UseSuspenseInfiniteQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = OmitKeyof<\n  DefinedInfiniteQueryObserverResult<TData, TError>,\n  'isPlaceholderData' | 'promise'\n>\n\nexport type AnyUseMutationOptions = UseMutationOptions<any, any, any, any>\nexport interface UseMutationOptions<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends OmitKeyof<\n    MutationObserverOptions<TData, TError, TVariables, TContext>,\n    '_defaulted'\n  > {}\n\nexport type UseMutateFunction<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> = (\n  ...args: Parameters<MutateFunction<TData, TError, TVariables, TContext>>\n) => void\n\nexport type UseMutateAsyncFunction<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> = MutateFunction<TData, TError, TVariables, TContext>\n\nexport type UseBaseMutationResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> = Override<\n  MutationObserverResult<TData, TError, TVariables, TContext>,\n  { mutate: UseMutateFunction<TData, TError, TVariables, TContext> }\n> & { mutateAsync: UseMutateAsyncFunction<TData, TError, TVariables, TContext> }\n\nexport type UseMutationResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> = UseBaseMutationResult<TData, TError, TVariables, TContext>\n","'use client'\nimport * as React from 'react'\n\nimport { isServer, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`,\n      )\n    }\n  }\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions)\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n      suspense: defaultedOptions.suspense,\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseInfiniteQueryResult,\n  UseInfiniteQueryOptions,\n  UseInfiniteQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataInfiniteOptions,\n  UndefinedInitialDataInfiniteOptions,\n} from './infiniteQueryOptions'\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): DefinedUseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery(\n  options: UseInfiniteQueryOptions,\n  queryClient?: QueryClient,\n) {\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  )\n}\n","'use client'\nimport * as React from 'react'\nimport { notifyManager } from '@tanstack/query-core'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport type { QueryClient, QueryFilters } from '@tanstack/query-core'\n\nexport function useIsFetching(\n  filters?: QueryFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  const queryCache = client.getQueryCache()\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => client.isFetching(filters),\n    () => client.isFetching(filters),\n  )\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n","/* eslint-disable react-compiler/react-compiler */\n\n'use client'\nimport * as React from 'react'\n\nimport { notifyManager, replaceEqualDeep } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  Mutation,\n  MutationCache,\n  MutationFilters,\n  MutationState,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  return useMutationState(\n    { filters: { ...filters, status: 'pending' } },\n    client,\n  ).length\n}\n\ntype MutationStateOptions<TResult = MutationState> = {\n  filters?: MutationFilters\n  select?: (mutation: Mutation) => TResult\n}\n\nfunction getResult<TResult = MutationState>(\n  mutationCache: MutationCache,\n  options: MutationStateOptions<TResult>,\n): Array<TResult> {\n  return mutationCache\n    .findAll(options.filters)\n    .map(\n      (mutation): TResult =>\n        (options.select ? options.select(mutation) : mutation.state) as TResult,\n    )\n}\n\nexport function useMutationState<TResult = MutationState>(\n  options: MutationStateOptions<TResult> = {},\n  queryClient?: QueryClient,\n): Array<TResult> {\n  const mutationCache = useQueryClient(queryClient).getMutationCache()\n  const optionsRef = React.useRef(options)\n  const result = React.useRef<Array<TResult>>(null)\n  if (!result.current) {\n    result.current = getResult(mutationCache, options)\n  }\n\n  React.useEffect(() => {\n    optionsRef.current = options\n  })\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(() => {\n          const nextResult = replaceEqualDeep(\n            result.current,\n            getResult(mutationCache, optionsRef.current),\n          )\n          if (result.current !== nextResult) {\n            result.current = nextResult\n            notifyManager.schedule(onStoreChange)\n          }\n        }),\n      [mutationCache],\n    ),\n    () => result.current,\n    () => result.current,\n  )!\n}\n","'use client'\nimport * as React from 'react'\n\nimport {\n  QueriesObserver,\n  QueryObserver,\n  notifyManager,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefaultError,\n  OmitKeyof,\n  QueriesObserverOptions,\n  QueriesPlaceholderDataFunction,\n  QueryClient,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// `placeholderData` function always gets undefined passed\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = OmitKeyof<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'placeholderData' | 'subscribed'\n> & {\n  placeholderData?: TQueryFnData | QueriesPlaceholderDataFunction<TQueryFnData>\n}\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseQueryOptionsForUseQueries<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseQueryOptionsForUseQueries<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseQueryOptionsForUseQueries<\n                    TQueryFnData,\n                    unknown extends TError ? DefaultError : TError,\n                    unknown extends TData ? TQueryFnData : TData,\n                    TQueryKey\n                  >\n                : // Fallback\n                  UseQueryOptionsForUseQueries\n\n// A defined initialData setting should return a DefinedUseQueryResult rather than UseQueryResult\ntype GetDefinedOrUndefinedQueryResult<T, TData, TError = unknown> = T extends {\n  initialData?: infer TInitialData\n}\n  ? unknown extends TInitialData\n    ? UseQueryResult<TData, TError>\n    : TInitialData extends TData\n      ? DefinedUseQueryResult<TData, TError>\n      : TInitialData extends () => infer TInitialDataResult\n        ? unknown extends TInitialDataResult\n          ? UseQueryResult<TData, TError>\n          : TInitialDataResult extends TData\n            ? DefinedUseQueryResult<TData, TError>\n            : UseQueryResult<TData, TError>\n        : UseQueryResult<TData, TError>\n  : UseQueryResult<TData, TError>\n\ntype GetUseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? GetDefinedOrUndefinedQueryResult<\n                    T,\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : // Fallback\n                  UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryOptionsForUseQueries>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryOptionsForUseQueries<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesOptions<\n            [...Tails],\n            [...TResults, GetUseQueryOptionsForUseQueries<Head>],\n            [...TDepth, 1]\n          >\n        : ReadonlyArray<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseQueryOptionsForUseQueries<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseQueryOptionsForUseQueries<\n                  TQueryFnData,\n                  TError,\n                  TData,\n                  TQueryKey\n                >\n              >\n            : // Fallback\n              Array<UseQueryOptionsForUseQueries>\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesResults<\n            [...Tails],\n            [...TResults, GetUseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : { [K in keyof T]: GetUseQueryResult<T[K]> }\n\nexport function useQueries<\n  T extends Array<any>,\n  TCombinedResult = QueriesResults<T>,\n>(\n  {\n    queries,\n    ...options\n  }: {\n    queries:\n      | readonly [...QueriesOptions<T>]\n      | readonly [...{ [K in keyof T]: GetUseQueryOptionsForUseQueries<T[K]> }]\n    combine?: (result: QueriesResults<T>) => TCombinedResult\n    subscribed?: boolean\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((opts) => {\n        const defaultedOptions = client.defaultQueryOptions(\n          opts as QueryObserverOptions,\n        )\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, client, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureSuspenseTimers(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new QueriesObserver<TCombinedResult>(\n        client,\n        defaultedQueries,\n        options as QueriesObserverOptions<TCombinedResult>,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const [optimisticResult, getCombinedResult, trackResult] =\n    observer.getOptimisticResult(\n      defaultedQueries,\n      (options as QueriesObserverOptions<TCombinedResult>).combine,\n    )\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop,\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n    )\n  }, [defaultedQueries, options, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const opts = defaultedQueries[index]\n\n        if (opts) {\n          const queryObserver = new QueryObserver(client, opts)\n          if (shouldSuspend(opts, result)) {\n            return fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) => {\n      const query = defaultedQueries[index]\n      return (\n        query &&\n        getHasError({\n          result,\n          errorResetBoundary,\n          throwOnError: query.throwOnError,\n          query: client.getQueryCache().get(query.queryHash),\n          suspense: query.suspense,\n        })\n      )\n    },\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return getCombinedResult(trackResult())\n}\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","'use client'\nimport { InfiniteQueryObserver, skipToken } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport { defaultThrowOnError } from './suspense'\nimport type {\n  DefaultError,\n  InfiniteData,\n  InfiniteQueryObserverSuccessResult,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  UseSuspenseInfiniteQueryOptions,\n  UseSuspenseInfiniteQueryResult,\n} from './types'\n\nexport function useSuspenseInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseSuspenseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseSuspenseInfiniteQueryResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if ((options.queryFn as any) === skipToken) {\n      console.error('skipToken is not allowed for useSuspenseInfiniteQuery')\n    }\n  }\n\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      throwOnError: defaultThrowOnError,\n    },\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  ) as InfiniteQueryObserverSuccessResult<TData, TError>\n}\n","'use client'\nimport { skipToken } from '@tanstack/query-core'\nimport { useQueries } from './useQueries'\nimport { defaultThrowOnError } from './suspense'\nimport type { UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types'\nimport type {\n  DefaultError,\n  QueryClient,\n  QueryFunction,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseSuspenseQueryOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseSuspenseQueryOptions<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseSuspenseQueryOptions<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseSuspenseQueryOptions<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseSuspenseQueryOptions<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseSuspenseQueryOptions<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseSuspenseQueryOptions<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseSuspenseQueryOptions<\n                    TQueryFnData,\n                    TError,\n                    TData,\n                    TQueryKey\n                  >\n                : T extends {\n                      queryFn?:\n                        | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                        | SkipTokenForUseQueries\n                      throwOnError?: ThrowOnError<any, infer TError, any, any>\n                    }\n                  ? UseSuspenseQueryOptions<\n                      TQueryFnData,\n                      TError,\n                      TQueryFnData,\n                      TQueryKey\n                    >\n                  : // Fallback\n                    UseSuspenseQueryOptions\n\ntype GetUseSuspenseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseSuspenseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseSuspenseQueryResult<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseSuspenseQueryResult<TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? UseSuspenseQueryResult<TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseSuspenseQueryResult<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseSuspenseQueryResult<TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseSuspenseQueryResult<\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : T extends {\n                      queryFn?:\n                        | QueryFunction<infer TQueryFnData, any>\n                        | SkipTokenForUseQueries\n                      throwOnError?: ThrowOnError<any, infer TError, any, any>\n                    }\n                  ? UseSuspenseQueryResult<\n                      TQueryFnData,\n                      unknown extends TError ? DefaultError : TError\n                    >\n                  : // Fallback\n                    UseSuspenseQueryResult\n\n/**\n * SuspenseQueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type SuspenseQueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseSuspenseQueryOptions>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseSuspenseQueryOptions<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? SuspenseQueriesOptions<\n            [...Tails],\n            [...TResults, GetUseSuspenseQueryOptions<Head>],\n            [...TDepth, 1]\n          >\n        : Array<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseSuspenseQueryOptions<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseSuspenseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n              >\n            : // Fallback\n              Array<UseSuspenseQueryOptions>\n\n/**\n * SuspenseQueriesResults reducer recursively maps type param to results\n */\nexport type SuspenseQueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseSuspenseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseSuspenseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? SuspenseQueriesResults<\n            [...Tails],\n            [...TResults, GetUseSuspenseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : { [K in keyof T]: GetUseSuspenseQueryResult<T[K]> }\n\nexport function useSuspenseQueries<\n  T extends Array<any>,\n  TCombinedResult = SuspenseQueriesResults<T>,\n>(\n  options: {\n    queries:\n      | readonly [...SuspenseQueriesOptions<T>]\n      | readonly [...{ [K in keyof T]: GetUseSuspenseQueryOptions<T[K]> }]\n    combine?: (result: SuspenseQueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult\n\nexport function useSuspenseQueries<\n  T extends Array<any>,\n  TCombinedResult = SuspenseQueriesResults<T>,\n>(\n  options: {\n    queries: readonly [...SuspenseQueriesOptions<T>]\n    combine?: (result: SuspenseQueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult\n\nexport function useSuspenseQueries(options: any, queryClient?: QueryClient) {\n  return useQueries(\n    {\n      ...options,\n      queries: options.queries.map((query: any) => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (query.queryFn === skipToken) {\n            console.error('skipToken is not allowed for useSuspenseQueries')\n          }\n        }\n\n        return {\n          ...query,\n          suspense: true,\n          throwOnError: defaultThrowOnError,\n          enabled: true,\n          placeholderData: undefined,\n        }\n      }),\n    },\n    queryClient,\n  )\n}\n","'use client'\nimport { QueryObserver, skipToken } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport { defaultThrowOnError } from './suspense'\nimport type { UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\n\nexport function useSuspenseQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseSuspenseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseSuspenseQueryResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if ((options.queryFn as any) === skipToken) {\n      console.error('skipToken is not allowed for useSuspenseQuery')\n    }\n  }\n\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      throwOnError: defaultThrowOnError,\n      placeholderData: undefined,\n    },\n    QueryObserver,\n    queryClient,\n  ) as UseSuspenseQueryResult<TData, TError>\n}\n","export function shouldThrowError<T extends (...args: Array<any>) => boolean>(\n  throwError: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow throwError function to override throwing behavior on a per-error basis\n  if (typeof throwError === 'function') {\n    return throwError(...params)\n  }\n\n  return !!throwError\n}\n\nexport function noop(): void {}\n","/* eslint-disable react-compiler/react-compiler */\n\n'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DehydratedState,\n  HydrateOptions,\n  OmitKeyof,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state?: unknown\n  options?: OmitKeyof<HydrateOptions, 'defaultOptions'> & {\n    defaultOptions?: OmitKeyof<\n      Exclude<HydrateOptions['defaultOptions'], undefined>,\n      'mutations'\n    >\n  }\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nconst hasProperty = <TKey extends string>(\n  obj: unknown,\n  key: TKey,\n): obj is { [k in TKey]: unknown } => {\n  return typeof obj === 'object' && obj !== null && key in obj\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n  const [hydrationQueue, setHydrationQueue] = React.useState<\n    DehydratedState['queries'] | undefined\n  >()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // This useMemo is for performance reasons only, everything inside it _must_\n  // be safe to run in every render and code here should be read as \"in render\".\n  //\n  // This code needs to happen during the render phase, because after initial\n  // SSR, hydration needs to happen _before_ children render. Also, if hydrating\n  // during a transition, we want to hydrate as much as is safe in render so\n  // we can prerender as much as possible.\n  //\n  // For any queries that already exist in the cache, we want to hold back on\n  // hydrating until _after_ the render phase. The reason for this is that during\n  // transitions, we don't want the existing queries and observers to update to\n  // the new data on the current page, only _after_ the transition is committed.\n  // If the transition is aborted, we will have hydrated any _new_ queries, but\n  // we throw away the fresh data for any existing ones to avoid unexpectedly\n  // updating the UI.\n  React.useMemo(() => {\n    if (state) {\n      if (typeof state !== 'object') {\n        return\n      }\n\n      const queryCache = client.getQueryCache()\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const queries = (state as DehydratedState).queries || []\n\n      const newQueries: DehydratedState['queries'] = []\n      const existingQueries: DehydratedState['queries'] = []\n      for (const dehydratedQuery of queries) {\n        const existingQuery = queryCache.get(dehydratedQuery.queryHash)\n\n        if (!existingQuery) {\n          newQueries.push(dehydratedQuery)\n        } else {\n          const hydrationIsNewer =\n            dehydratedQuery.state.dataUpdatedAt >\n              existingQuery.state.dataUpdatedAt || // RSC special serialized then-able chunks\n            (hasProperty(dehydratedQuery.promise, 'status') &&\n              hasProperty(existingQuery.promise, 'status') &&\n              dehydratedQuery.promise.status !== existingQuery.promise.status)\n\n          const queryAlreadyQueued = hydrationQueue?.find(\n            (query) => query.queryHash === dehydratedQuery.queryHash,\n          )\n\n          if (\n            hydrationIsNewer &&\n            (!queryAlreadyQueued ||\n              dehydratedQuery.state.dataUpdatedAt >\n                queryAlreadyQueued.state.dataUpdatedAt)\n          ) {\n            existingQueries.push(dehydratedQuery)\n          }\n        }\n      }\n\n      if (newQueries.length > 0) {\n        // It's actually fine to call this with queries/state that already exists\n        // in the cache, or is older. hydrate() is idempotent for queries.\n        hydrate(client, { queries: newQueries }, optionsRef.current)\n      }\n      if (existingQueries.length > 0) {\n        setHydrationQueue((prev) =>\n          prev ? [...prev, ...existingQueries] : existingQueries,\n        )\n      }\n    }\n  }, [client, hydrationQueue, state])\n\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, { queries: hydrationQueue }, optionsRef.current)\n      setHydrationQueue(undefined)\n    }\n  }, [client, hydrationQueue])\n\n  return children as React.ReactElement\n}\n","'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): React.JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import { useQueryClient } from './QueryClientProvider'\nimport type {\n  DefaultError,\n  FetchInfiniteQueryOptions,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\n\nexport function usePrefetchInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: FetchInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n) {\n  const client = useQueryClient(queryClient)\n\n  if (!client.getQueryState(options.queryKey)) {\n    client.prefetchInfiniteQuery(options)\n  }\n}\n","import { useQueryClient } from './QueryClientProvider'\nimport type {\n  DefaultError,\n  FetchQueryOptions,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\n\nexport function usePrefetchQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n) {\n  const client = useQueryClient(queryClient)\n\n  if (!client.getQueryState(options.queryKey)) {\n    client.prefetchQuery(options)\n  }\n}\n"],"names":["_async_iterator","iterable","method","async","sync","retry","Symbol","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Object","Promise","done","value","arguments","ret","thr","exports","_class_private_field_loose_base","receiver","privateKey","id","_class_private_field_loose_key","name","_is_native_reflect_construct","require","_set_prototype_of","_construct","Parent","args","Class","Reflect","construct","a","Constructor","Function","instance","_extends","assign","target","i","source","key","_super_prop_base","_get","property","get","base","desc","_is_native_function","fn","_object_destructuring_empty","o","_get_prototype_of","object","_wrap_native_super","_cache","Map","undefined","Wrapper","FocusManager","focusManager","_focused","_cleanup","_setup","onFocus","_utils","window","listener","onSubscribe","onUnsubscribe","_this1","setEventListener","setup","focused","setFocused","changed","isFocused","_globalThis_document","_subscribable","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","dehydrate","hydrate","defaultTransformerFn","data","dehydrateMutation","mutation","dehydrateQuery","query","serializeData","shouldRedactErrors","_query_promise","error","process","console","Error","defaultShouldRedactErrors","_","client","ref","_client_getDefaultOptions_dehydrate","_client_getDefaultOptions_dehydrate1","_client_getDefaultOptions_dehydrate2","_client_getDefaultOptions_dehydrate3","filterMutation","options","mutations","filterQuery","queries","dehydratedState","_options_defaultOptions","_client_getDefaultOptions_hydrate","mutationCache","queryCache","deserializeData","state","mutationOptions","queryKey","queryHash","meta","promise","_ignored","serializedState","initialPromise","_retryer","_infiniteQueryObserver","_mutation","_mutationCache","_mutationObserver","_queriesObserver","_query","_queryCache","_queryClient","_queryObserver","_notifyManager","_hydration","_streamedQuery","_focusManager","_onlineManager","hasNextPage","hasPreviousPage","infiniteQueryBehavior","pages","context","_context_fetchOptions_meta_fetchMore","_context_state_data","_context_state_data1","direction","oldPages","oldPageParams","result","currentPage","fetchFn","cancelled","addSignalProperty","queryFn","fetchPage","param","previous","queryFnContext","page","maxPages","addTo","pageParamFn","getPreviousPageParam","getNextPageParam","oldData","remainingPages","param1","_context_options","pageParams","lastIndex","InfiniteQueryObserver","bindMethods","setOptions","_infiniteQueryBehavior","getOptimisticResult","fetchNextPage","fetchPreviousPage","createResult","_state_fetchMeta_fetchMore","parentResult","isFetching","isRefetching","isError","isRefetchError","fetchDirection","isFetchNextPageError","isFetchingNextPage","isFetchPreviousPageError","isFetchingPreviousPage","Mutation","getDefaultState","_observers","_retryer1","dispatch","config","addObserver","observer","removeObserver","x","optionalRemove","_continue","execute","variables","onContinue","_dispatch","failureCount","restored","isPaused","_class_private_field_loose_base__mutationCache_config","_this_options","_class_private_field_loose_base__mutationCache_config1","_this_options1","_class_private_field_loose_base__mutationCache_config2","_this_options2","_class_private_field_loose_base__mutationCache_config3","_this_options3","_class_private_field_loose_base__mutationCache_config4","_this_options4","_removable","action","reducer","Date","MutationCache","_mutations","_scopes","_mutationId","Set","build","add","scope","scopeFor","scopedMutations","remove","index","canRun","mutationsWithSameScope","firstPendingMutation","m","runNext","_class_private_field_loose_base__scopes_get","foundMutation","clear","getAll","Array","find","filters","defaultedFilters","findAll","notify","event","resumePausedMutations","pausedMutations","_mutation_options_scope","MutationObserver","_client","_currentResult","_currentMutation","_mutateOptions","updateResult","_updateResult","prevOptions","onMutationUpdate","_notify","getCurrentResult","reset","mutate","_class_private_field_loose_base__mutateOptions_onSuccess","_class_private_field_loose_base__mutateOptions_onSettled","_class_private_field_loose_base__mutateOptions_onError","_class_private_field_loose_base__mutateOptions_onSettled1","createNotifyManager","defaultScheduler","notifyManager","cb","setTimeout","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","schedule","flush","originalQueue","OnlineManager","onlineManager","_online","onOnline","onlineListener","offlineListener","setOnline","online","isOnline","QueriesObserver","difference","array1","array2","replaceAt","array","copy","_result","_queries","_options","_combinedResult","_lastCombine","_lastResult","_observerMatches","trackResult","combineResult","findMatchingObservers","onUpdate","_onUpdate","destroy","setQueries","queryHashes","prevObservers","newObserverMatches","_findMatchingObservers","match","newObservers","newResult","hasIndexChange","getQueries","getObservers","combine","matches","_combineResult","_trackResult","observerResult","accessedProp","input","prevObserversMap","observers","defaultedOptions","previousResult","newTracked","Query","fetchState","_initialState","_revertState","_defaultOptions","_abortSignalConsumed","setData","newData","setState","setStateOptions","cancel","isActive","isDisabled","isStale","isStaleByTime","staleTime","getObserversCount","invalidate","fetch","fetchOptions","_this_options_behavior","_context_fetchOptions","abortController","AbortController","_context_fetchOptions1","onError","_class_private_field_loose_base__cache_config","_class_private_field_loose_base__cache_config1","hasData","initialDataUpdatedAt","QueryCache","queryInMap","QueryClient","_queryCache1","_mutationCache1","_queryDefaults","_mutationDefaults","_mountCount","_unsubscribeFocus","_unsubscribeOnline","mount","unmount","_this3","isMutating","getQueryData","_class_private_field_loose_base__queryCache_get","ensureQueryData","cachedData","getQueriesData","setQueryData","updater","prevData","setQueriesData","getQueryState","removeQueries","resetQueries","cancelQueries","defaultedCancelOptions","cancelOptions","promises","invalidateQueries","refetchQueries","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","ensureInfiniteQueryData","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","getQueryDefaults","defaults","queryDefault","setMutationDefaults","mutationKey","getMutationDefaults","defaultQueryOptions","defaultMutationOptions","QueryObserver","_currentQuery","_currentQueryInitialState","_currentResultState","_currentResultOptions","_currentThenable","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","executeFetch","updateStaleTimeout","computeRefetchInterval","updateRefetchInterval","updateTimers","clearStaleTimeout","clearRefetchInterval","updateQuery","_thenable","shouldFetchOnMount","_executeFetch","_updateTimers","shouldFetchOnReconnect","shouldFetchOn","shouldFetchOnWindowFocus","_clearStaleTimeout","_clearRefetchInterval","prevQuery","_updateQuery","mounted","shouldFetchOptionally","_updateStaleTimeout","nextRefetchInterval","_computeRefetchInterval","_updateRefetchInterval","shouldAssignObserverCurrentProperties","onPropTracked","trackedResult","trackProp","getCurrentQuery","refetch","_param","fetchOptimistic","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","newState","isPlaceholderData","fetchOnMount","fetchOptionally","errorUpdatedAt","status","skipSelect","placeholderData","selectError","isPending","isLoading","nextResult","finalizeThenableIfPossible","thenable","recreateThenable","pending","prevThenable","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","typedKey","onQueryUpdate","time","timeout","nextInterval","setInterval","clearTimeout","clearInterval","notifyOptions","shouldLoadOnMount","field","optimisticResult","Removable","_gcTimeout","scheduleGc","updateGcTime","newGcTime","Math","Infinity","clearGcTimeout","CancelledError","canFetch","createRetryer","isCancelledError","defaultRetryDelay","networkMode","isRetryCancelled","isResolved","continueFn","reject","cancelRetry","continueRetry","canContinue","canStart","resolve","pause","continueResolve","run","promiseOrValue","retryDelay","delay","shouldRetry","streamedQuery","refetchMode","stream","chunk","prev","Subscribable","subscribe","hasListeners","pendingThenable","_resolve","_reject","finalize","reason","dataTagErrorSymbol","dataTagSymbol","unsetMarker","addToEnd","addToStart","ensureQueryFn","functionalUpdate","hashKey","hashQueryKeyByOptions","isPlainArray","isPlainObject","isServer","isValidTimeout","keepPreviousData","matchMutation","matchQuery","noop","partialMatchKey","replaceData","replaceEqualDeep","resolveEnabled","resolveStaleTime","shallowEqualObjects","skipToken","sleep","timeUntilStale","globalThis","updatedAt","enabled","type","exact","fetchStatus","predicate","stale","hashFn","JSON","val","b","aItems","aSize","bItems","bSize","equalItems","hasObjectPrototype","ctor","prot","previousData","items","item","newItems","max","ensurePreventErrorBoundaryRetry","getHasError","useClearResetErrorBoundary","errorResetBoundary","_react","throwOnError","suspense","_HydrationBoundary","_isRestoring","_QueryClientProvider","_QueryErrorResetBoundary","_infiniteQueryOptions","_queryOptions","_useInfiniteQuery","_useIsFetching","_useMutationState","_useMutation","_usePrefetchInfiniteQuery","_usePrefetchQuery","_useQueries","_useQuery","_useSuspenseInfiniteQuery","_useSuspenseQueries","_useSuspenseQuery","infiniteQueryOptions","IsRestoringProvider","useIsRestoring","IsRestoringContext","queryOptions","defaultThrowOnError","ensureSuspenseTimers","shouldSuspend","willFetch","_error","originalStaleTime","isRestoring","useBaseQuery","Observer","queryClient","_client_getDefaultOptions_queries__experimental_beforeQuery","_client_getDefaultOptions_queries","_client_getDefaultOptions_queries__experimental_afterQuery","_client_getDefaultOptions_queries1","_suspense","_errorBoundaryUtils","isNewCacheEntry","_React_useState","shouldSubscribe","onStoreChange","unsubscribe","_querycore","_client_getQueryCache_get","useInfiniteQuery","_useBaseQuery","useIsFetching","useMutation","mutateOptions","useIsMutating","useMutationState","getResult","optionsRef","useQueries","defaultedQueries","opts","_observer_getOptimisticResult","getCombinedResult","shouldAtLeastOneSuspend","suspensePromises","queryObserver","firstSingleResultWhichShouldThrow","useQuery","useSuspenseInfiniteQuery","useSuspenseQueries","useSuspenseQuery","shouldThrowError","throwError","params","HydrationBoundary","hasProperty","obj","children","hydrationQueue","setHydrationQueue","existingQuery","dehydratedQuery","newQueries","hydrationIsNewer","queryAlreadyQueued","existingQueries","QueryClientContext","QueryClientProvider","useQueryClient","QueryErrorResetBoundary","useQueryErrorResetBoundary","createValue","isReset","QueryErrorResetBoundaryContext","usePrefetchInfiniteQuery","usePrefetchQuery"],"mappings":"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"}