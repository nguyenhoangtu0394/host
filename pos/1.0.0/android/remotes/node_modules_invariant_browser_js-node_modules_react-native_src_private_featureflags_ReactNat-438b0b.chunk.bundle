(self["webpackChunkpos"] = self["webpackChunkpos"] || []).push([["node_modules_invariant_browser_js-node_modules_react-native_src_private_featureflags_ReactNat-438b0b"], {
83610: (function (__unused_webpack_module, exports) {
"use strict";

function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
            else newObj[key] = obj[key];
        }
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
exports._ = _interop_require_wildcard;


}),
56481: (function (module) {
"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var invariant = function(condition, format, a, b, c, d, e, f) {
    if (false) {}
    if (!condition) {
        var error;
        if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
            var args = [
                a,
                b,
                c,
                d,
                e,
                f
            ];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
};
module.exports = invariant;


}),
51038: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeReactNativeFeatureFlags = _TurboModuleRegistry.get('NativeReactNativeFeatureFlagsCxx');
var _default = NativeReactNativeFeatureFlags;


}),
31022: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<5b1d3ba6712de7a927eeeb8602ee2a8f>>
 *       strict
 */ /**
 * IMPORTANT: Do NOT modify this file directly.
 *
 * To change the definition of the flags, edit
 *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.
 *
 * To regenerate this code, run the following script from the repo root:
 *   yarn featureflags --update
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    animatedShouldDebounceQueueFlush: function() {
        return animatedShouldDebounceQueueFlush;
    },
    animatedShouldUseSingleOp: function() {
        return animatedShouldUseSingleOp;
    },
    avoidStateUpdateInAnimatedPropsMemo: function() {
        return avoidStateUpdateInAnimatedPropsMemo;
    },
    commonTestFlag: function() {
        return commonTestFlag;
    },
    commonTestFlagWithoutNativeImplementation: function() {
        return commonTestFlagWithoutNativeImplementation;
    },
    disableInteractionManager: function() {
        return disableInteractionManager;
    },
    disableMountItemReorderingAndroid: function() {
        return disableMountItemReorderingAndroid;
    },
    enableAccessToHostTreeInFabric: function() {
        return enableAccessToHostTreeInFabric;
    },
    enableAccumulatedUpdatesInRawPropsAndroid: function() {
        return enableAccumulatedUpdatesInRawPropsAndroid;
    },
    enableAnimatedClearImmediateFix: function() {
        return enableAnimatedClearImmediateFix;
    },
    enableBridgelessArchitecture: function() {
        return enableBridgelessArchitecture;
    },
    enableCppPropsIteratorSetter: function() {
        return enableCppPropsIteratorSetter;
    },
    enableDOMDocumentAPI: function() {
        return enableDOMDocumentAPI;
    },
    enableEagerRootViewAttachment: function() {
        return enableEagerRootViewAttachment;
    },
    enableFabricLogs: function() {
        return enableFabricLogs;
    },
    enableFabricRenderer: function() {
        return enableFabricRenderer;
    },
    enableIOSViewClipToPaddingBox: function() {
        return enableIOSViewClipToPaddingBox;
    },
    enableImagePrefetchingAndroid: function() {
        return enableImagePrefetchingAndroid;
    },
    enableJSRuntimeGCOnMemoryPressureOnIOS: function() {
        return enableJSRuntimeGCOnMemoryPressureOnIOS;
    },
    enableLayoutAnimationsOnAndroid: function() {
        return enableLayoutAnimationsOnAndroid;
    },
    enableLayoutAnimationsOnIOS: function() {
        return enableLayoutAnimationsOnIOS;
    },
    enableLongTaskAPI: function() {
        return enableLongTaskAPI;
    },
    enableNativeCSSParsing: function() {
        return enableNativeCSSParsing;
    },
    enableNewBackgroundAndBorderDrawables: function() {
        return enableNewBackgroundAndBorderDrawables;
    },
    enablePreciseSchedulingForPremountItemsOnAndroid: function() {
        return enablePreciseSchedulingForPremountItemsOnAndroid;
    },
    enablePropsUpdateReconciliationAndroid: function() {
        return enablePropsUpdateReconciliationAndroid;
    },
    enableReportEventPaintTime: function() {
        return enableReportEventPaintTime;
    },
    enableSynchronousStateUpdates: function() {
        return enableSynchronousStateUpdates;
    },
    enableUIConsistency: function() {
        return enableUIConsistency;
    },
    enableViewCulling: function() {
        return enableViewCulling;
    },
    enableViewRecycling: function() {
        return enableViewRecycling;
    },
    enableViewRecyclingForText: function() {
        return enableViewRecyclingForText;
    },
    enableViewRecyclingForView: function() {
        return enableViewRecyclingForView;
    },
    excludeYogaFromRawProps: function() {
        return excludeYogaFromRawProps;
    },
    fixDifferentiatorEmittingUpdatesWithWrongParentTag: function() {
        return fixDifferentiatorEmittingUpdatesWithWrongParentTag;
    },
    fixMappingOfEventPrioritiesBetweenFabricAndReact: function() {
        return fixMappingOfEventPrioritiesBetweenFabricAndReact;
    },
    fixMountingCoordinatorReportedPendingTransactionsOnAndroid: function() {
        return fixMountingCoordinatorReportedPendingTransactionsOnAndroid;
    },
    fixVirtualizeListCollapseWindowSize: function() {
        return fixVirtualizeListCollapseWindowSize;
    },
    fuseboxEnabledRelease: function() {
        return fuseboxEnabledRelease;
    },
    fuseboxNetworkInspectionEnabled: function() {
        return fuseboxNetworkInspectionEnabled;
    },
    isLayoutAnimationEnabled: function() {
        return isLayoutAnimationEnabled;
    },
    jsOnlyTestFlag: function() {
        return jsOnlyTestFlag;
    },
    lazyAnimationCallbacks: function() {
        return lazyAnimationCallbacks;
    },
    override: function() {
        return override;
    },
    removeTurboModuleManagerDelegateMutex: function() {
        return removeTurboModuleManagerDelegateMutex;
    },
    scheduleAnimatedCleanupInMicrotask: function() {
        return scheduleAnimatedCleanupInMicrotask;
    },
    shouldUseAnimatedObjectForTransform: function() {
        return shouldUseAnimatedObjectForTransform;
    },
    shouldUseRemoveClippedSubviewsAsDefaultOnIOS: function() {
        return shouldUseRemoveClippedSubviewsAsDefaultOnIOS;
    },
    shouldUseSetNativePropsInFabric: function() {
        return shouldUseSetNativePropsInFabric;
    },
    throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS: function() {
        return throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS;
    },
    traceTurboModulePromiseRejectionsOnAndroid: function() {
        return traceTurboModulePromiseRejectionsOnAndroid;
    },
    updateRuntimeShadowNodeReferencesOnCommit: function() {
        return updateRuntimeShadowNodeReferencesOnCommit;
    },
    useAlwaysAvailableJSErrorHandling: function() {
        return useAlwaysAvailableJSErrorHandling;
    },
    useEditTextStockAndroidFocusBehavior: function() {
        return useEditTextStockAndroidFocusBehavior;
    },
    useFabricInterop: function() {
        return useFabricInterop;
    },
    useNativeViewConfigsInBridgelessMode: function() {
        return useNativeViewConfigsInBridgelessMode;
    },
    useOptimizedEventBatchingOnAndroid: function() {
        return useOptimizedEventBatchingOnAndroid;
    },
    useRawPropsJsiValue: function() {
        return useRawPropsJsiValue;
    },
    useRefsForTextInputState: function() {
        return useRefsForTextInputState;
    },
    useShadowNodeStateOnClone: function() {
        return useShadowNodeStateOnClone;
    },
    useTurboModuleInterop: function() {
        return useTurboModuleInterop;
    },
    useTurboModules: function() {
        return useTurboModules;
    }
});
var _ReactNativeFeatureFlagsBase = __webpack_require__(25282);
var jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var avoidStateUpdateInAnimatedPropsMemo = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('avoidStateUpdateInAnimatedPropsMemo', false);
var disableInteractionManager = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManager', false);
var enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableAnimatedClearImmediateFix = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedClearImmediateFix', true);
var enableDOMDocumentAPI = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableDOMDocumentAPI', false);
var fixVirtualizeListCollapseWindowSize = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('fixVirtualizeListCollapseWindowSize', false);
var isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var scheduleAnimatedCleanupInMicrotask = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('scheduleAnimatedCleanupInMicrotask', false);
var shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var commonTestFlagWithoutNativeImplementation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlagWithoutNativeImplementation', false);
var disableMountItemReorderingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMountItemReorderingAndroid', false);
var enableAccumulatedUpdatesInRawPropsAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAccumulatedUpdatesInRawPropsAndroid', false);
var enableBridgelessArchitecture = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBridgelessArchitecture', false);
var enableCppPropsIteratorSetter = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCppPropsIteratorSetter', false);
var enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRenderer = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRenderer', false);
var enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableImagePrefetchingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableImagePrefetchingAndroid', false);
var enableJSRuntimeGCOnMemoryPressureOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableJSRuntimeGCOnMemoryPressureOnIOS', false);
var enableLayoutAnimationsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnAndroid', false);
var enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableNativeCSSParsing = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNativeCSSParsing', false);
var enableNewBackgroundAndBorderDrawables = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNewBackgroundAndBorderDrawables', false);
var enablePreciseSchedulingForPremountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePreciseSchedulingForPremountItemsOnAndroid', false);
var enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewCulling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewCulling', false);
var enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var enableViewRecyclingForText = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForText', true);
var enableViewRecyclingForView = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForView', true);
var excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fixDifferentiatorEmittingUpdatesWithWrongParentTag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var fuseboxNetworkInspectionEnabled = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxNetworkInspectionEnabled', false);
var lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var removeTurboModuleManagerDelegateMutex = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('removeTurboModuleManagerDelegateMutex', false);
var throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS', false);
var traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var updateRuntimeShadowNodeReferencesOnCommit = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('updateRuntimeShadowNodeReferencesOnCommit', false);
var useAlwaysAvailableJSErrorHandling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useAlwaysAvailableJSErrorHandling', false);
var useEditTextStockAndroidFocusBehavior = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useEditTextStockAndroidFocusBehavior', true);
var useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRawPropsJsiValue = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRawPropsJsiValue', false);
var useShadowNodeStateOnClone = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useShadowNodeStateOnClone', false);
var useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var useTurboModules = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModules', false);
var override = _ReactNativeFeatureFlagsBase.setOverrides;


}),
25282: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createJavaScriptFlagGetter: function() {
        return createJavaScriptFlagGetter;
    },
    createNativeFlagGetter: function() {
        return createNativeFlagGetter;
    },
    getOverrides: function() {
        return getOverrides;
    },
    setOverrides: function() {
        return setOverrides;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51038));
var accessedFeatureFlags = new Set();
var overrides;
// This defines the types for the overrides object, whose methods also receive
// the default value as a parameter.
function createGetter(configName, customValueGetter, defaultValue) {
    var cachedValue;
    return ()=>{
        if (cachedValue == null) {
            cachedValue = customValueGetter() ?? defaultValue;
        }
        return cachedValue;
    };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
    return createGetter(configName, ()=>{
        var _overrides_configName;
        accessedFeatureFlags.add(configName);
        return overrides === null || overrides === void 0 ? void 0 : (_overrides_configName = overrides[configName]) === null || _overrides_configName === void 0 ? void 0 : _overrides_configName.call(overrides, defaultValue);
    }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue, ref) {
    var skipUnavailableNativeModuleError = ref === void 0 ? false : ref;
    return createGetter(configName, ()=>{
        var _NativeReactNativeFeatureFlags_configName;
        maybeLogUnavailableNativeModuleError(configName);
        return _NativeReactNativeFeatureFlags.default === null || _NativeReactNativeFeatureFlags.default === void 0 ? void 0 : (_NativeReactNativeFeatureFlags_configName = _NativeReactNativeFeatureFlags.default[configName]) === null || _NativeReactNativeFeatureFlags_configName === void 0 ? void 0 : _NativeReactNativeFeatureFlags_configName.call(_NativeReactNativeFeatureFlags.default);
    }, defaultValue);
}
function getOverrides() {
    return overrides;
}
function setOverrides(newOverrides) {
    if (overrides != null) {
        throw new Error('Feature flags cannot be overridden more than once');
    }
    if (accessedFeatureFlags.size > 0) {
        var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
        throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
    }
    overrides = newOverrides;
}
var reportedConfigNames = new Set();
function maybeLogUnavailableNativeModuleError(configName) {
    if (!_NativeReactNativeFeatureFlags.default && !reportedConfigNames.has(configName)) {
        reportedConfigNames.add(configName);
        console.error(`Could not access feature flag '${configName}' because native module method was not available`);
    }
}


}),

}]);//# sourceMappingURL=node_modules_invariant_browser_js-node_modules_react-native_src_private_featureflags_ReactNat-438b0b.chunk.bundle.map?platform=android