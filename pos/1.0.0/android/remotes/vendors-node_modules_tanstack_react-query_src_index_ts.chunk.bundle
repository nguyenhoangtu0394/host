(self["webpackChunkpos"] = self["webpackChunkpos"] || []).push([["vendors-node_modules_tanstack_react-query_src_index_ts"], {
64616: (function (__unused_webpack_module, exports) {
"use strict";

function _async_iterator(iterable) {
    var method, async, sync, retry = 2;
    for("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;){
        if (async && null != (method = iterable[async])) return method.call(iterable);
        if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable));
        async = "@@asyncIterator", sync = "@@iterator";
    }
    throw new TypeError("Object is not async iterable");
}
function AsyncFromSyncIterator(s) {
    function AsyncFromSyncIteratorContinuation(r) {
        if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object."));
        var done = r.done;
        return Promise.resolve(r.value).then(function(value) {
            return {
                value: value,
                done: done
            };
        });
    }
    return AsyncFromSyncIterator = function(s) {
        this.s = s, this.n = s.next;
    }, AsyncFromSyncIterator.prototype = {
        s: null,
        n: null,
        next: function() {
            return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));
        },
        return: function(value) {
            var ret = this.s.return;
            return void 0 === ret ? Promise.resolve({
                value: value,
                done: !0
            }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));
        },
        throw: function(value) {
            var thr = this.s.return;
            return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));
        }
    }, new AsyncFromSyncIterator(s);
}
exports._ = _async_iterator;


}),
28713: (function (__unused_webpack_module, exports) {
"use strict";

function _class_private_field_loose_base(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}
exports._ = _class_private_field_loose_base;


}),
7979: (function (__unused_webpack_module, exports) {
"use strict";

var id = 0;
function _class_private_field_loose_key(name) {
    return "__private_" + id++ + "_" + name;
}
exports._ = _class_private_field_loose_key;


}),
98812: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _is_native_reflect_construct = __webpack_require__(26019);
var _set_prototype_of = __webpack_require__(40998);
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct._()) exports._ = _construct = Reflect.construct;
    else {
        exports._ = _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of._(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
exports._ = _construct;


}),
38952: (function (__unused_webpack_module, exports) {
"use strict";

function _extends() {
    exports._ = _extends = Object.assign || function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports._ = _extends;


}),
616: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _super_prop_base = __webpack_require__(70777);
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) exports._ = _get = Reflect.get;
    else {
        exports._ = _get = function get(target, property, receiver) {
            var base = _super_prop_base._(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) return desc.get.call(receiver || target);
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
exports._ = _get;


}),
5534: (function (__unused_webpack_module, exports) {
"use strict";

function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
exports._ = _is_native_function;


}),
52439: (function (__unused_webpack_module, exports) {
"use strict";

function _object_destructuring_empty(o) {
    if (o === null || o === void 0) throw new TypeError("Cannot destructure " + o);
    return o;
}
exports._ = _object_destructuring_empty;


}),
70777: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _get_prototype_of = __webpack_require__(86880);
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of._(object);
        if (object === null) break;
    }
    return object;
}
exports._ = _super_prop_base;


}),
30753: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _construct = __webpack_require__(98812);
var _get_prototype_of = __webpack_require__(86880);
var _is_native_function = __webpack_require__(5534);
var _set_prototype_of = __webpack_require__(40998);
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    exports._ = _wrap_native_super = function(Class) {
        if (Class === null || !_is_native_function._(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct._(Class, arguments, _get_prototype_of._(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of._(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
exports._ = _wrap_native_super;


}),
51686: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FocusManager: function() {
        return FocusManager;
    },
    focusManager: function() {
        return focusManager;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _subscribable = __webpack_require__(81254);
var _utils = __webpack_require__(78812);
var _focused = /*#__PURE__*/ _class_private_field_loose_key._("_focused"), _cleanup = /*#__PURE__*/ _class_private_field_loose_key._("_cleanup"), _setup = /*#__PURE__*/ _class_private_field_loose_key._("_setup");
var FocusManager = /*#__PURE__*/ function(Subscribable) {
    "use strict";
    _inherits._(FocusManager, Subscribable);
    function FocusManager() {
        _class_call_check._(this, FocusManager);
        var _this;
        _this = _call_super._(this, FocusManager), Object.defineProperty(_this, _focused, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _cleanup, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _setup, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _setup)[_setup] = (onFocus)=>{
            // addEventListener does not exist in React Native, but window does
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (!_utils.isServer && window.addEventListener) {
                var listener = ()=>onFocus();
                // Listen to visibilitychange
                window.addEventListener('visibilitychange', listener, false);
                return ()=>{
                    // Be sure to unsubscribe if a new handler is set
                    window.removeEventListener('visibilitychange', listener);
                };
            }
            return;
        };
        return _this;
    }
    _create_class._(FocusManager, [
        {
            key: "onSubscribe",
            value: function onSubscribe() {
                if (!_class_private_field_loose_base._(this, _cleanup)[_cleanup]) {
                    this.setEventListener(_class_private_field_loose_base._(this, _setup)[_setup]);
                }
            }
        },
        {
            key: "onUnsubscribe",
            value: function onUnsubscribe() {
                var _this, _this1;
                if (!this.hasListeners()) {
                    (_this = _class_private_field_loose_base._(_this1 = this, _cleanup)[_cleanup]) === null || _this === void 0 ? void 0 : _this.call(_this1);
                    _class_private_field_loose_base._(this, _cleanup)[_cleanup] = undefined;
                }
            }
        },
        {
            key: "setEventListener",
            value: function setEventListener(setup) {
                var _this, _this1;
                _class_private_field_loose_base._(this, _setup)[_setup] = setup;
                (_this = _class_private_field_loose_base._(_this1 = this, _cleanup)[_cleanup]) === null || _this === void 0 ? void 0 : _this.call(_this1);
                _class_private_field_loose_base._(this, _cleanup)[_cleanup] = setup((focused)=>{
                    if (typeof focused === 'boolean') {
                        this.setFocused(focused);
                    } else {
                        this.onFocus();
                    }
                });
            }
        },
        {
            key: "setFocused",
            value: function setFocused(focused) {
                var changed = _class_private_field_loose_base._(this, _focused)[_focused] !== focused;
                if (changed) {
                    _class_private_field_loose_base._(this, _focused)[_focused] = focused;
                    this.onFocus();
                }
            }
        },
        {
            key: "onFocus",
            value: function onFocus() {
                var isFocused = this.isFocused();
                this.listeners.forEach((listener)=>{
                    listener(isFocused);
                });
            }
        },
        {
            key: "isFocused",
            value: function isFocused() {
                var _globalThis_document;
                if (typeof _class_private_field_loose_base._(this, _focused)[_focused] === 'boolean') {
                    return _class_private_field_loose_base._(this, _focused)[_focused];
                }
                // document global can be unavailable in react native
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                return ((_globalThis_document = globalThis.document) === null || _globalThis_document === void 0 ? void 0 : _globalThis_document.visibilityState) !== 'hidden';
            }
        }
    ]);
    return FocusManager;
}(_subscribable.Subscribable);
var focusManager = new FocusManager();


}),
55613: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    defaultShouldDehydrateMutation: function() {
        return defaultShouldDehydrateMutation;
    },
    defaultShouldDehydrateQuery: function() {
        return defaultShouldDehydrateQuery;
    },
    dehydrate: function() {
        return dehydrate;
    },
    hydrate: function() {
        return hydrate;
    }
});
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
function defaultTransformerFn(data) {
    return data;
}
// FUNCTIONS
function dehydrateMutation(mutation) {
    return _object_spread._({
        mutationKey: mutation.options.mutationKey,
        state: mutation.state
    }, mutation.options.scope && {
        scope: mutation.options.scope
    }, mutation.meta && {
        meta: mutation.meta
    });
}
// Most config is not dehydrated but instead meant to configure again when
// consuming the de/rehydrated data, typically with useQuery on the client.
// Sometimes it might make sense to prefetch data on the server and include
// in the html-payload, but not consume it on the initial render.
function dehydrateQuery(query, serializeData, shouldRedactErrors) {
    var _query_promise;
    return _object_spread._({
        state: _object_spread._({}, query.state, query.state.data !== undefined && {
            data: serializeData(query.state.data)
        }),
        queryKey: query.queryKey,
        queryHash: query.queryHash
    }, query.state.status === 'pending' && {
        promise: (_query_promise = query.promise) === null || _query_promise === void 0 ? void 0 : _query_promise.then(serializeData).catch((error)=>{
            if (!shouldRedactErrors(error)) {
                // Reject original error if it should not be redacted
                return Promise.reject(error);
            }
            // If not in production, log original error before rejecting redacted error
            if (false) {}
            return Promise.reject(new Error('redacted'));
        })
    }, query.meta && {
        meta: query.meta
    });
}
function defaultShouldDehydrateMutation(mutation) {
    return mutation.state.isPaused;
}
function defaultShouldDehydrateQuery(query) {
    return query.state.status === 'success';
}
function defaultShouldRedactErrors(_) {
    return true;
}
function dehydrate(client, ref) {
    var options = ref === void 0 ? {} : ref;
    var _client_getDefaultOptions_dehydrate, _client_getDefaultOptions_dehydrate1, _client_getDefaultOptions_dehydrate2, _client_getDefaultOptions_dehydrate3;
    var filterMutation = options.shouldDehydrateMutation ?? ((_client_getDefaultOptions_dehydrate = client.getDefaultOptions().dehydrate) === null || _client_getDefaultOptions_dehydrate === void 0 ? void 0 : _client_getDefaultOptions_dehydrate.shouldDehydrateMutation) ?? defaultShouldDehydrateMutation;
    var mutations = client.getMutationCache().getAll().flatMap((mutation)=>filterMutation(mutation) ? [
            dehydrateMutation(mutation)
        ] : []);
    var filterQuery = options.shouldDehydrateQuery ?? ((_client_getDefaultOptions_dehydrate1 = client.getDefaultOptions().dehydrate) === null || _client_getDefaultOptions_dehydrate1 === void 0 ? void 0 : _client_getDefaultOptions_dehydrate1.shouldDehydrateQuery) ?? defaultShouldDehydrateQuery;
    var shouldRedactErrors = options.shouldRedactErrors ?? ((_client_getDefaultOptions_dehydrate2 = client.getDefaultOptions().dehydrate) === null || _client_getDefaultOptions_dehydrate2 === void 0 ? void 0 : _client_getDefaultOptions_dehydrate2.shouldRedactErrors) ?? defaultShouldRedactErrors;
    var serializeData = options.serializeData ?? ((_client_getDefaultOptions_dehydrate3 = client.getDefaultOptions().dehydrate) === null || _client_getDefaultOptions_dehydrate3 === void 0 ? void 0 : _client_getDefaultOptions_dehydrate3.serializeData) ?? defaultTransformerFn;
    var queries = client.getQueryCache().getAll().flatMap((query)=>filterQuery(query) ? [
            dehydrateQuery(query, serializeData, shouldRedactErrors)
        ] : []);
    return {
        mutations,
        queries
    };
}
function hydrate(client, dehydratedState, options) {
    var _options_defaultOptions, _client_getDefaultOptions_hydrate;
    if (typeof dehydratedState !== 'object' || dehydratedState === null) {
        return;
    }
    var mutationCache = client.getMutationCache();
    var queryCache = client.getQueryCache();
    var deserializeData = (options === null || options === void 0 ? void 0 : (_options_defaultOptions = options.defaultOptions) === null || _options_defaultOptions === void 0 ? void 0 : _options_defaultOptions.deserializeData) ?? ((_client_getDefaultOptions_hydrate = client.getDefaultOptions().hydrate) === null || _client_getDefaultOptions_hydrate === void 0 ? void 0 : _client_getDefaultOptions_hydrate.deserializeData) ?? defaultTransformerFn;
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    var mutations = dehydratedState.mutations || [];
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    var queries = dehydratedState.queries || [];
    mutations.forEach((_param)=>{
        var state = _param.state, mutationOptions = _object_without_properties._(_param, [
            "state"
        ]);
        var _client_getDefaultOptions_hydrate, _options_defaultOptions;
        mutationCache.build(client, _object_spread._({}, (_client_getDefaultOptions_hydrate = client.getDefaultOptions().hydrate) === null || _client_getDefaultOptions_hydrate === void 0 ? void 0 : _client_getDefaultOptions_hydrate.mutations, options === null || options === void 0 ? void 0 : (_options_defaultOptions = options.defaultOptions) === null || _options_defaultOptions === void 0 ? void 0 : _options_defaultOptions.mutations, mutationOptions), state);
    });
    queries.forEach((ref)=>{
        var queryKey = ref.queryKey, state = ref.state, queryHash = ref.queryHash, meta = ref.meta, promise = ref.promise;
        var query = queryCache.get(queryHash);
        var data = state.data === undefined ? state.data : deserializeData(state.data);
        // Do not hydrate if an existing query exists with newer data
        if (query) {
            if (query.state.dataUpdatedAt < state.dataUpdatedAt) {
                // omit fetchStatus from dehydrated state
                // so that query stays in its current fetchStatus
                var _ignored = state.fetchStatus, serializedState = _object_without_properties._(state, [
                    "fetchStatus"
                ]);
                query.setState(_object_spread_props._(_object_spread._({}, serializedState), {
                    data
                }));
            }
        } else {
            var _client_getDefaultOptions_hydrate, _options_defaultOptions;
            // Restore query
            query = queryCache.build(client, _object_spread_props._(_object_spread._({}, (_client_getDefaultOptions_hydrate = client.getDefaultOptions().hydrate) === null || _client_getDefaultOptions_hydrate === void 0 ? void 0 : _client_getDefaultOptions_hydrate.queries, options === null || options === void 0 ? void 0 : (_options_defaultOptions = options.defaultOptions) === null || _options_defaultOptions === void 0 ? void 0 : _options_defaultOptions.queries), {
                queryKey,
                queryHash,
                meta
            }), // Reset fetch status to idle to avoid
            // query being stuck in fetching state upon hydration
            _object_spread_props._(_object_spread._({}, state), {
                data,
                fetchStatus: 'idle'
            }));
        }
        if (promise) {
            // Note: `Promise.resolve` required cause
            // RSC transformed promises are not thenable
            var initialPromise = Promise.resolve(promise).then(deserializeData);
            // this doesn't actually fetch - it just creates a retryer
            // which will re-use the passed `initialPromise`
            void query.fetch(undefined, {
                initialPromise
            });
        }
    });
}


}),
85821: (function (__unused_webpack_module, exports, __webpack_require__) {
/* istanbul ignore file */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CancelledError: function() {
        return _retryer.CancelledError;
    },
    InfiniteQueryObserver: function() {
        return _infiniteQueryObserver.InfiniteQueryObserver;
    },
    Mutation: function() {
        return _mutation.Mutation;
    },
    MutationCache: function() {
        return _mutationCache.MutationCache;
    },
    MutationObserver: function() {
        return _mutationObserver.MutationObserver;
    },
    QueriesObserver: function() {
        return _queriesObserver.QueriesObserver;
    },
    Query: function() {
        return _query.Query;
    },
    QueryCache: function() {
        return _queryCache.QueryCache;
    },
    QueryClient: function() {
        return _queryClient.QueryClient;
    },
    QueryObserver: function() {
        return _queryObserver.QueryObserver;
    },
    defaultScheduler: function() {
        return _notifyManager.defaultScheduler;
    },
    defaultShouldDehydrateMutation: function() {
        return _hydration.defaultShouldDehydrateMutation;
    },
    defaultShouldDehydrateQuery: function() {
        return _hydration.defaultShouldDehydrateQuery;
    },
    dehydrate: function() {
        return _hydration.dehydrate;
    },
    experimental_streamedQuery: function() {
        return _streamedQuery.streamedQuery;
    },
    focusManager: function() {
        return _focusManager.focusManager;
    },
    hashKey: function() {
        return _utils.hashKey;
    },
    hydrate: function() {
        return _hydration.hydrate;
    },
    isCancelledError: function() {
        return _retryer.isCancelledError;
    },
    isServer: function() {
        return _utils.isServer;
    },
    keepPreviousData: function() {
        return _utils.keepPreviousData;
    },
    matchMutation: function() {
        return _utils.matchMutation;
    },
    matchQuery: function() {
        return _utils.matchQuery;
    },
    notifyManager: function() {
        return _notifyManager.notifyManager;
    },
    onlineManager: function() {
        return _onlineManager.onlineManager;
    },
    replaceEqualDeep: function() {
        return _utils.replaceEqualDeep;
    },
    skipToken: function() {
        return _utils.skipToken;
    }
});
var _export_star = __webpack_require__(4084);
var _retryer = __webpack_require__(71984);
var _queryCache = __webpack_require__(22633);
var _queryClient = __webpack_require__(1322);
var _queryObserver = __webpack_require__(55854);
var _queriesObserver = __webpack_require__(18683);
var _infiniteQueryObserver = __webpack_require__(7129);
var _mutationCache = __webpack_require__(77280);
var _mutationObserver = __webpack_require__(72397);
var _notifyManager = __webpack_require__(99355);
var _focusManager = __webpack_require__(51686);
var _onlineManager = __webpack_require__(58307);
var _utils = __webpack_require__(78812);
var _hydration = __webpack_require__(55613);
var _streamedQuery = __webpack_require__(7094);
_export_star._(__webpack_require__(11267), exports);
var _query = __webpack_require__(15043);
var _mutation = __webpack_require__(24641);


}),
71666: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasNextPage: function() {
        return hasNextPage;
    },
    hasPreviousPage: function() {
        return hasPreviousPage;
    },
    infiniteQueryBehavior: function() {
        return infiniteQueryBehavior;
    }
});
var _async_to_generator = __webpack_require__(11809);
var _utils = __webpack_require__(78812);
function infiniteQueryBehavior(pages) {
    return {
        onFetch: (context, query)=>{
            var _context_fetchOptions_meta_fetchMore, _context_fetchOptions_meta, _context_fetchOptions, _context_state_data, _context_state_data1;
            var options = context.options;
            var direction = (_context_fetchOptions = context.fetchOptions) === null || _context_fetchOptions === void 0 ? void 0 : (_context_fetchOptions_meta = _context_fetchOptions.meta) === null || _context_fetchOptions_meta === void 0 ? void 0 : (_context_fetchOptions_meta_fetchMore = _context_fetchOptions_meta.fetchMore) === null || _context_fetchOptions_meta_fetchMore === void 0 ? void 0 : _context_fetchOptions_meta_fetchMore.direction;
            var oldPages = ((_context_state_data = context.state.data) === null || _context_state_data === void 0 ? void 0 : _context_state_data.pages) || [];
            var oldPageParams = ((_context_state_data1 = context.state.data) === null || _context_state_data1 === void 0 ? void 0 : _context_state_data1.pageParams) || [];
            var result = {
                pages: [],
                pageParams: []
            };
            var currentPage = 0;
            var fetchFn = /*#__PURE__*/ function() {
                var _ref = _async_to_generator._(function*() {
                    var cancelled = false;
                    var addSignalProperty = (object)=>{
                        Object.defineProperty(object, 'signal', {
                            enumerable: true,
                            get: ()=>{
                                if (context.signal.aborted) {
                                    cancelled = true;
                                } else {
                                    context.signal.addEventListener('abort', ()=>{
                                        cancelled = true;
                                    });
                                }
                                return context.signal;
                            }
                        });
                    };
                    var queryFn = (0, _utils.ensureQueryFn)(context.options, context.fetchOptions);
                    // Create function to fetch a page
                    var fetchPage = /*#__PURE__*/ function() {
                        var _ref = _async_to_generator._(function*(data, param, previous) {
                            if (cancelled) {
                                return Promise.reject();
                            }
                            if (param == null && data.pages.length) {
                                return Promise.resolve(data);
                            }
                            var queryFnContext = {
                                client: context.client,
                                queryKey: context.queryKey,
                                pageParam: param,
                                direction: previous ? 'backward' : 'forward',
                                meta: context.options.meta
                            };
                            addSignalProperty(queryFnContext);
                            var page = yield queryFn(queryFnContext);
                            var maxPages = context.options.maxPages;
                            var addTo = previous ? _utils.addToStart : _utils.addToEnd;
                            return {
                                pages: addTo(data.pages, page, maxPages),
                                pageParams: addTo(data.pageParams, param, maxPages)
                            };
                        });
                        return function fetchPage(data, param, previous) {
                            return _ref.apply(this, arguments);
                        };
                    }();
                    // fetch next / previous page?
                    if (direction && oldPages.length) {
                        var previous = direction === 'backward';
                        var pageParamFn = previous ? getPreviousPageParam : getNextPageParam;
                        var oldData = {
                            pages: oldPages,
                            pageParams: oldPageParams
                        };
                        var param = pageParamFn(options, oldData);
                        result = yield fetchPage(oldData, param, previous);
                    } else {
                        var remainingPages = pages ?? oldPages.length;
                        // Fetch all pages
                        do {
                            var param1 = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);
                            if (currentPage > 0 && param1 == null) {
                                break;
                            }
                            result = yield fetchPage(result, param1);
                            currentPage++;
                        }while (currentPage < remainingPages);
                    }
                    return result;
                });
                return function fetchFn() {
                    return _ref.apply(this, arguments);
                };
            }();
            if (context.options.persister) {
                context.fetchFn = ()=>{
                    var _context_options_persister, _context_options;
                    return (_context_options_persister = (_context_options = context.options).persister) === null || _context_options_persister === void 0 ? void 0 : _context_options_persister.call(_context_options, fetchFn, {
                        client: context.client,
                        queryKey: context.queryKey,
                        meta: context.options.meta,
                        signal: context.signal
                    }, query);
                };
            } else {
                context.fetchFn = fetchFn;
            }
        }
    };
}
function getNextPageParam(options, ref) {
    var pages = ref.pages, pageParams = ref.pageParams;
    var lastIndex = pages.length - 1;
    return pages.length > 0 ? options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams) : undefined;
}
function getPreviousPageParam(options, ref) {
    var pages = ref.pages, pageParams = ref.pageParams;
    var _options_getPreviousPageParam;
    return pages.length > 0 ? (_options_getPreviousPageParam = options.getPreviousPageParam) === null || _options_getPreviousPageParam === void 0 ? void 0 : _options_getPreviousPageParam.call(options, pages[0], pages, pageParams[0], pageParams) : undefined;
}
function hasNextPage(options, data) {
    if (!data) return false;
    return getNextPageParam(options, data) != null;
}
function hasPreviousPage(options, data) {
    if (!data || !options.getPreviousPageParam) return false;
    return getPreviousPageParam(options, data) != null;
}


}),
7129: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "InfiniteQueryObserver", ({
    enumerable: true,
    get: function() {
        return InfiniteQueryObserver;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _queryObserver = __webpack_require__(55854);
var _infiniteQueryBehavior = __webpack_require__(71666);
var InfiniteQueryObserver = /*#__PURE__*/ function(QueryObserver) {
    "use strict";
    _inherits._(InfiniteQueryObserver, QueryObserver);
    function InfiniteQueryObserver(client, options) {
        _class_call_check._(this, InfiniteQueryObserver);
        return _call_super._(this, InfiniteQueryObserver, [
            client,
            options
        ]);
    }
    _create_class._(InfiniteQueryObserver, [
        {
            key: "bindMethods",
            value: function bindMethods() {
                _get._(_get_prototype_of._(InfiniteQueryObserver.prototype), "bindMethods", this).call(this);
                this.fetchNextPage = this.fetchNextPage.bind(this);
                this.fetchPreviousPage = this.fetchPreviousPage.bind(this);
            }
        },
        {
            key: "setOptions",
            value: function setOptions(options) {
                _get._(_get_prototype_of._(InfiniteQueryObserver.prototype), "setOptions", this).call(this, _object_spread_props._(_object_spread._({}, options), {
                    behavior: (0, _infiniteQueryBehavior.infiniteQueryBehavior)()
                }));
            }
        },
        {
            key: "getOptimisticResult",
            value: function getOptimisticResult(options) {
                options.behavior = (0, _infiniteQueryBehavior.infiniteQueryBehavior)();
                return _get._(_get_prototype_of._(InfiniteQueryObserver.prototype), "getOptimisticResult", this).call(this, options);
            }
        },
        {
            key: "fetchNextPage",
            value: function fetchNextPage(options) {
                return this.fetch(_object_spread_props._(_object_spread._({}, options), {
                    meta: {
                        fetchMore: {
                            direction: 'forward'
                        }
                    }
                }));
            }
        },
        {
            key: "fetchPreviousPage",
            value: function fetchPreviousPage(options) {
                return this.fetch(_object_spread_props._(_object_spread._({}, options), {
                    meta: {
                        fetchMore: {
                            direction: 'backward'
                        }
                    }
                }));
            }
        },
        {
            key: "createResult",
            value: function createResult(query, options) {
                var _state_fetchMeta_fetchMore, _state_fetchMeta;
                var state = query.state;
                var parentResult = _get._(_get_prototype_of._(InfiniteQueryObserver.prototype), "createResult", this).call(this, query, options);
                var isFetching = parentResult.isFetching, isRefetching = parentResult.isRefetching, isError = parentResult.isError, isRefetchError = parentResult.isRefetchError;
                var fetchDirection = (_state_fetchMeta = state.fetchMeta) === null || _state_fetchMeta === void 0 ? void 0 : (_state_fetchMeta_fetchMore = _state_fetchMeta.fetchMore) === null || _state_fetchMeta_fetchMore === void 0 ? void 0 : _state_fetchMeta_fetchMore.direction;
                var isFetchNextPageError = isError && fetchDirection === 'forward';
                var isFetchingNextPage = isFetching && fetchDirection === 'forward';
                var isFetchPreviousPageError = isError && fetchDirection === 'backward';
                var isFetchingPreviousPage = isFetching && fetchDirection === 'backward';
                var result = _object_spread_props._(_object_spread._({}, parentResult), {
                    fetchNextPage: this.fetchNextPage,
                    fetchPreviousPage: this.fetchPreviousPage,
                    hasNextPage: (0, _infiniteQueryBehavior.hasNextPage)(options, state.data),
                    hasPreviousPage: (0, _infiniteQueryBehavior.hasPreviousPage)(options, state.data),
                    isFetchNextPageError,
                    isFetchingNextPage,
                    isFetchPreviousPageError,
                    isFetchingPreviousPage,
                    isRefetchError: isRefetchError && !isFetchNextPageError && !isFetchPreviousPageError,
                    isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage
                });
                return result;
            }
        }
    ]);
    return InfiniteQueryObserver;
}(_queryObserver.QueryObserver);


}),
24641: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Mutation: function() {
        return Mutation;
    },
    getDefaultState: function() {
        return getDefaultState;
    }
});
var _async_to_generator = __webpack_require__(11809);
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _notifyManager = __webpack_require__(99355);
var _removable = __webpack_require__(61893);
var _retryer = __webpack_require__(71984);
var _observers = /*#__PURE__*/ _class_private_field_loose_key._("_observers"), _mutationCache = /*#__PURE__*/ _class_private_field_loose_key._("_mutationCache"), _retryer1 = /*#__PURE__*/ _class_private_field_loose_key._("_retryer"), _dispatch = /*#__PURE__*/ _class_private_field_loose_key._("_dispatch");
var Mutation = /*#__PURE__*/ function(Removable) {
    "use strict";
    _inherits._(Mutation, Removable);
    function Mutation(config) {
        _class_call_check._(this, Mutation);
        var _this;
        _this = _call_super._(this, Mutation), Object.defineProperty(_this, _dispatch, {
            value: dispatch
        }), Object.defineProperty(_this, _observers, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _mutationCache, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _retryer1, {
            writable: true,
            value: void 0
        });
        _this.mutationId = config.mutationId;
        _class_private_field_loose_base._(_this, _mutationCache)[_mutationCache] = config.mutationCache;
        _class_private_field_loose_base._(_this, _observers)[_observers] = [];
        _this.state = config.state || getDefaultState();
        _this.setOptions(config.options);
        _this.scheduleGc();
        return _this;
    }
    _create_class._(Mutation, [
        {
            key: "setOptions",
            value: function setOptions(options) {
                this.options = options;
                this.updateGcTime(this.options.gcTime);
            }
        },
        {
            key: "meta",
            get: function() {
                return this.options.meta;
            }
        },
        {
            key: "addObserver",
            value: function addObserver(observer) {
                if (!_class_private_field_loose_base._(this, _observers)[_observers].includes(observer)) {
                    _class_private_field_loose_base._(this, _observers)[_observers].push(observer);
                    // Stop the mutation from being garbage collected
                    this.clearGcTimeout();
                    _class_private_field_loose_base._(this, _mutationCache)[_mutationCache].notify({
                        type: 'observerAdded',
                        mutation: this,
                        observer
                    });
                }
            }
        },
        {
            key: "removeObserver",
            value: function removeObserver(observer) {
                _class_private_field_loose_base._(this, _observers)[_observers] = _class_private_field_loose_base._(this, _observers)[_observers].filter((x)=>x !== observer);
                this.scheduleGc();
                _class_private_field_loose_base._(this, _mutationCache)[_mutationCache].notify({
                    type: 'observerRemoved',
                    mutation: this,
                    observer
                });
            }
        },
        {
            key: "optionalRemove",
            value: function optionalRemove() {
                if (!_class_private_field_loose_base._(this, _observers)[_observers].length) {
                    if (this.state.status === 'pending') {
                        this.scheduleGc();
                    } else {
                        _class_private_field_loose_base._(this, _mutationCache)[_mutationCache].remove(this);
                    }
                }
            }
        },
        {
            key: "continue",
            value: function _continue() {
                var _class_private_field_loose_base__retryer;
                return ((_class_private_field_loose_base__retryer = _class_private_field_loose_base._(this, _retryer1)[_retryer1]) === null || _class_private_field_loose_base__retryer === void 0 ? void 0 : _class_private_field_loose_base__retryer.continue()) ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before
                this.execute(this.state.variables);
            }
        },
        {
            key: "execute",
            value: function execute(variables) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var onContinue = ()=>{
                        _class_private_field_loose_base._(_this, _dispatch)[_dispatch]({
                            type: 'continue'
                        });
                    };
                    _class_private_field_loose_base._(_this, _retryer1)[_retryer1] = (0, _retryer.createRetryer)({
                        fn: ()=>{
                            if (!_this.options.mutationFn) {
                                return Promise.reject(new Error('No mutationFn found'));
                            }
                            return _this.options.mutationFn(variables);
                        },
                        onFail: (failureCount, error)=>{
                            _class_private_field_loose_base._(_this, _dispatch)[_dispatch]({
                                type: 'failed',
                                failureCount,
                                error
                            });
                        },
                        onPause: ()=>{
                            _class_private_field_loose_base._(_this, _dispatch)[_dispatch]({
                                type: 'pause'
                            });
                        },
                        onContinue,
                        retry: _this.options.retry ?? 0,
                        retryDelay: _this.options.retryDelay,
                        networkMode: _this.options.networkMode,
                        canRun: ()=>_class_private_field_loose_base._(_this, _mutationCache)[_mutationCache].canRun(_this)
                    });
                    var restored = _this.state.status === 'pending';
                    var isPaused = !_class_private_field_loose_base._(_this, _retryer1)[_retryer1].canStart();
                    try {
                        var _class_private_field_loose_base__mutationCache_config_onSuccess, _class_private_field_loose_base__mutationCache_config, _this_options_onSuccess, _this_options, _class_private_field_loose_base__mutationCache_config_onSettled, _class_private_field_loose_base__mutationCache_config1, _this_options_onSettled, _this_options1;
                        if (restored) {
                            // Dispatch continue action to unpause restored mutation
                            onContinue();
                        } else {
                            var _class_private_field_loose_base__mutationCache_config_onMutate, _class_private_field_loose_base__mutationCache_config2, _this_options_onMutate, _this_options2;
                            _class_private_field_loose_base._(_this, _dispatch)[_dispatch]({
                                type: 'pending',
                                variables,
                                isPaused
                            });
                            // Notify cache callback
                            yield (_class_private_field_loose_base__mutationCache_config_onMutate = (_class_private_field_loose_base__mutationCache_config2 = _class_private_field_loose_base._(_this, _mutationCache)[_mutationCache].config).onMutate) === null || _class_private_field_loose_base__mutationCache_config_onMutate === void 0 ? void 0 : _class_private_field_loose_base__mutationCache_config_onMutate.call(_class_private_field_loose_base__mutationCache_config2, variables, _this);
                            var context = yield (_this_options_onMutate = (_this_options2 = _this.options).onMutate) === null || _this_options_onMutate === void 0 ? void 0 : _this_options_onMutate.call(_this_options2, variables);
                            if (context !== _this.state.context) {
                                _class_private_field_loose_base._(_this, _dispatch)[_dispatch]({
                                    type: 'pending',
                                    context,
                                    variables,
                                    isPaused
                                });
                            }
                        }
                        var data = yield _class_private_field_loose_base._(_this, _retryer1)[_retryer1].start();
                        // Notify cache callback
                        yield (_class_private_field_loose_base__mutationCache_config_onSuccess = (_class_private_field_loose_base__mutationCache_config = _class_private_field_loose_base._(_this, _mutationCache)[_mutationCache].config).onSuccess) === null || _class_private_field_loose_base__mutationCache_config_onSuccess === void 0 ? void 0 : _class_private_field_loose_base__mutationCache_config_onSuccess.call(_class_private_field_loose_base__mutationCache_config, data, variables, _this.state.context, _this);
                        yield (_this_options_onSuccess = (_this_options = _this.options).onSuccess) === null || _this_options_onSuccess === void 0 ? void 0 : _this_options_onSuccess.call(_this_options, data, variables, _this.state.context);
                        // Notify cache callback
                        yield (_class_private_field_loose_base__mutationCache_config_onSettled = (_class_private_field_loose_base__mutationCache_config1 = _class_private_field_loose_base._(_this, _mutationCache)[_mutationCache].config).onSettled) === null || _class_private_field_loose_base__mutationCache_config_onSettled === void 0 ? void 0 : _class_private_field_loose_base__mutationCache_config_onSettled.call(_class_private_field_loose_base__mutationCache_config1, data, null, _this.state.variables, _this.state.context, _this);
                        yield (_this_options_onSettled = (_this_options1 = _this.options).onSettled) === null || _this_options_onSettled === void 0 ? void 0 : _this_options_onSettled.call(_this_options1, data, null, variables, _this.state.context);
                        _class_private_field_loose_base._(_this, _dispatch)[_dispatch]({
                            type: 'success',
                            data
                        });
                        return data;
                    } catch (error) {
                        try {
                            var _class_private_field_loose_base__mutationCache_config_onError, _class_private_field_loose_base__mutationCache_config3, _this_options_onError, _this_options3, _class_private_field_loose_base__mutationCache_config_onSettled1, _class_private_field_loose_base__mutationCache_config4, _this_options_onSettled1, _this_options4;
                            // Notify cache callback
                            yield (_class_private_field_loose_base__mutationCache_config_onError = (_class_private_field_loose_base__mutationCache_config3 = _class_private_field_loose_base._(_this, _mutationCache)[_mutationCache].config).onError) === null || _class_private_field_loose_base__mutationCache_config_onError === void 0 ? void 0 : _class_private_field_loose_base__mutationCache_config_onError.call(_class_private_field_loose_base__mutationCache_config3, error, variables, _this.state.context, _this);
                            yield (_this_options_onError = (_this_options3 = _this.options).onError) === null || _this_options_onError === void 0 ? void 0 : _this_options_onError.call(_this_options3, error, variables, _this.state.context);
                            // Notify cache callback
                            yield (_class_private_field_loose_base__mutationCache_config_onSettled1 = (_class_private_field_loose_base__mutationCache_config4 = _class_private_field_loose_base._(_this, _mutationCache)[_mutationCache].config).onSettled) === null || _class_private_field_loose_base__mutationCache_config_onSettled1 === void 0 ? void 0 : _class_private_field_loose_base__mutationCache_config_onSettled1.call(_class_private_field_loose_base__mutationCache_config4, undefined, error, _this.state.variables, _this.state.context, _this);
                            yield (_this_options_onSettled1 = (_this_options4 = _this.options).onSettled) === null || _this_options_onSettled1 === void 0 ? void 0 : _this_options_onSettled1.call(_this_options4, undefined, error, variables, _this.state.context);
                            throw error;
                        } finally{
                            _class_private_field_loose_base._(_this, _dispatch)[_dispatch]({
                                type: 'error',
                                error: error
                            });
                        }
                    } finally{
                        _class_private_field_loose_base._(_this, _mutationCache)[_mutationCache].runNext(_this);
                    }
                })();
            }
        }
    ]);
    return Mutation;
}(_removable.Removable);
function dispatch(action) {
    var reducer = (state)=>{
        switch(action.type){
            case 'failed':
                return _object_spread_props._(_object_spread._({}, state), {
                    failureCount: action.failureCount,
                    failureReason: action.error
                });
            case 'pause':
                return _object_spread_props._(_object_spread._({}, state), {
                    isPaused: true
                });
            case 'continue':
                return _object_spread_props._(_object_spread._({}, state), {
                    isPaused: false
                });
            case 'pending':
                return _object_spread_props._(_object_spread._({}, state), {
                    context: action.context,
                    data: undefined,
                    failureCount: 0,
                    failureReason: null,
                    error: null,
                    isPaused: action.isPaused,
                    status: 'pending',
                    variables: action.variables,
                    submittedAt: Date.now()
                });
            case 'success':
                return _object_spread_props._(_object_spread._({}, state), {
                    data: action.data,
                    failureCount: 0,
                    failureReason: null,
                    error: null,
                    status: 'success',
                    isPaused: false
                });
            case 'error':
                return _object_spread_props._(_object_spread._({}, state), {
                    data: undefined,
                    error: action.error,
                    failureCount: state.failureCount + 1,
                    failureReason: action.error,
                    isPaused: false,
                    status: 'error'
                });
        }
    };
    this.state = reducer(this.state);
    _notifyManager.notifyManager.batch(()=>{
        _class_private_field_loose_base._(this, _observers)[_observers].forEach((observer)=>{
            observer.onMutationUpdate(action);
        });
        _class_private_field_loose_base._(this, _mutationCache)[_mutationCache].notify({
            mutation: this,
            type: 'updated',
            action
        });
    });
}
function getDefaultState() {
    return {
        context: undefined,
        data: undefined,
        error: null,
        failureCount: 0,
        failureReason: null,
        isPaused: false,
        status: 'idle',
        variables: undefined,
        submittedAt: 0
    };
}


}),
77280: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "MutationCache", ({
    enumerable: true,
    get: function() {
        return MutationCache;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _notifyManager = __webpack_require__(99355);
var _mutation = __webpack_require__(24641);
var _utils = __webpack_require__(78812);
var _subscribable = __webpack_require__(81254);
var _mutations = /*#__PURE__*/ _class_private_field_loose_key._("_mutations"), _scopes = /*#__PURE__*/ _class_private_field_loose_key._("_scopes"), _mutationId = /*#__PURE__*/ _class_private_field_loose_key._("_mutationId");
var MutationCache = /*#__PURE__*/ function(Subscribable) {
    "use strict";
    _inherits._(MutationCache, Subscribable);
    function MutationCache(ref) {
        var config = ref === void 0 ? {} : ref;
        _class_call_check._(this, MutationCache);
        var _this;
        _this = _call_super._(this, MutationCache), Object.defineProperty(_this, _mutations, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _scopes, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _mutationId, {
            writable: true,
            value: void 0
        }), _this.config = config;
        _class_private_field_loose_base._(_this, _mutations)[_mutations] = new Set();
        _class_private_field_loose_base._(_this, _scopes)[_scopes] = new Map();
        _class_private_field_loose_base._(_this, _mutationId)[_mutationId] = 0;
        return _this;
    }
    _create_class._(MutationCache, [
        {
            key: "build",
            value: function build(client, options, state) {
                var mutation = new _mutation.Mutation({
                    mutationCache: this,
                    mutationId: ++_class_private_field_loose_base._(this, _mutationId)[_mutationId],
                    options: client.defaultMutationOptions(options),
                    state
                });
                this.add(mutation);
                return mutation;
            }
        },
        {
            key: "add",
            value: function add(mutation) {
                _class_private_field_loose_base._(this, _mutations)[_mutations].add(mutation);
                var scope = scopeFor(mutation);
                if (typeof scope === 'string') {
                    var scopedMutations = _class_private_field_loose_base._(this, _scopes)[_scopes].get(scope);
                    if (scopedMutations) {
                        scopedMutations.push(mutation);
                    } else {
                        _class_private_field_loose_base._(this, _scopes)[_scopes].set(scope, [
                            mutation
                        ]);
                    }
                }
                this.notify({
                    type: 'added',
                    mutation
                });
            }
        },
        {
            key: "remove",
            value: function remove(mutation) {
                if (_class_private_field_loose_base._(this, _mutations)[_mutations].delete(mutation)) {
                    var scope = scopeFor(mutation);
                    if (typeof scope === 'string') {
                        var scopedMutations = _class_private_field_loose_base._(this, _scopes)[_scopes].get(scope);
                        if (scopedMutations) {
                            if (scopedMutations.length > 1) {
                                var index = scopedMutations.indexOf(mutation);
                                if (index !== -1) {
                                    scopedMutations.splice(index, 1);
                                }
                            } else if (scopedMutations[0] === mutation) {
                                _class_private_field_loose_base._(this, _scopes)[_scopes].delete(scope);
                            }
                        }
                    }
                }
                // Currently we notify the removal even if the mutation was already removed.
                // Consider making this an error or not notifying of the removal depending on the desired semantics.
                this.notify({
                    type: 'removed',
                    mutation
                });
            }
        },
        {
            key: "canRun",
            value: function canRun(mutation) {
                var scope = scopeFor(mutation);
                if (typeof scope === 'string') {
                    var mutationsWithSameScope = _class_private_field_loose_base._(this, _scopes)[_scopes].get(scope);
                    var firstPendingMutation = mutationsWithSameScope === null || mutationsWithSameScope === void 0 ? void 0 : mutationsWithSameScope.find((m)=>m.state.status === 'pending');
                    // we can run if there is no current pending mutation (start use-case)
                    // or if WE are the first pending mutation (continue use-case)
                    return !firstPendingMutation || firstPendingMutation === mutation;
                } else {
                    // For unscoped mutations there are never any pending mutations in front of the
                    // current mutation
                    return true;
                }
            }
        },
        {
            key: "runNext",
            value: function runNext(mutation) {
                var scope = scopeFor(mutation);
                if (typeof scope === 'string') {
                    var _class_private_field_loose_base__scopes_get;
                    var foundMutation = (_class_private_field_loose_base__scopes_get = _class_private_field_loose_base._(this, _scopes)[_scopes].get(scope)) === null || _class_private_field_loose_base__scopes_get === void 0 ? void 0 : _class_private_field_loose_base__scopes_get.find((m)=>m !== mutation && m.state.isPaused);
                    return (foundMutation === null || foundMutation === void 0 ? void 0 : foundMutation.continue()) ?? Promise.resolve();
                } else {
                    return Promise.resolve();
                }
            }
        },
        {
            key: "clear",
            value: function clear() {
                _notifyManager.notifyManager.batch(()=>{
                    _class_private_field_loose_base._(this, _mutations)[_mutations].forEach((mutation)=>{
                        this.notify({
                            type: 'removed',
                            mutation
                        });
                    });
                    _class_private_field_loose_base._(this, _mutations)[_mutations].clear();
                    _class_private_field_loose_base._(this, _scopes)[_scopes].clear();
                });
            }
        },
        {
            key: "getAll",
            value: function getAll() {
                return Array.from(_class_private_field_loose_base._(this, _mutations)[_mutations]);
            }
        },
        {
            key: "find",
            value: function find(filters) {
                var defaultedFilters = _object_spread._({
                    exact: true
                }, filters);
                return this.getAll().find((mutation)=>(0, _utils.matchMutation)(defaultedFilters, mutation));
            }
        },
        {
            key: "findAll",
            value: function findAll(ref) {
                var filters = ref === void 0 ? {} : ref;
                return this.getAll().filter((mutation)=>(0, _utils.matchMutation)(filters, mutation));
            }
        },
        {
            key: "notify",
            value: function notify(event) {
                _notifyManager.notifyManager.batch(()=>{
                    this.listeners.forEach((listener)=>{
                        listener(event);
                    });
                });
            }
        },
        {
            key: "resumePausedMutations",
            value: function resumePausedMutations() {
                var pausedMutations = this.getAll().filter((x)=>x.state.isPaused);
                return _notifyManager.notifyManager.batch(()=>Promise.all(pausedMutations.map((mutation)=>mutation.continue().catch(_utils.noop))));
            }
        }
    ]);
    return MutationCache;
}(_subscribable.Subscribable);
function scopeFor(mutation) {
    var _mutation_options_scope;
    return (_mutation_options_scope = mutation.options.scope) === null || _mutation_options_scope === void 0 ? void 0 : _mutation_options_scope.id;
}


}),
72397: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "MutationObserver", ({
    enumerable: true,
    get: function() {
        return MutationObserver;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _mutation = __webpack_require__(24641);
var _notifyManager = __webpack_require__(99355);
var _subscribable = __webpack_require__(81254);
var _utils = __webpack_require__(78812);
var _client = /*#__PURE__*/ _class_private_field_loose_key._("_client"), _currentResult = /*#__PURE__*/ _class_private_field_loose_key._("_currentResult"), _currentMutation = /*#__PURE__*/ _class_private_field_loose_key._("_currentMutation"), _mutateOptions = /*#__PURE__*/ _class_private_field_loose_key._("_mutateOptions"), _updateResult = /*#__PURE__*/ _class_private_field_loose_key._("_updateResult"), _notify = /*#__PURE__*/ _class_private_field_loose_key._("_notify");
var MutationObserver = /*#__PURE__*/ function(Subscribable) {
    "use strict";
    _inherits._(MutationObserver, Subscribable);
    function MutationObserver(client, options) {
        _class_call_check._(this, MutationObserver);
        var _this;
        _this = _call_super._(this, MutationObserver), Object.defineProperty(_this, _updateResult, {
            value: updateResult
        }), Object.defineProperty(_this, _notify, {
            value: notify
        }), Object.defineProperty(_this, _client, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentResult, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentMutation, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _mutateOptions, {
            writable: true,
            value: void 0
        }), _class_private_field_loose_base._(_this, _currentResult)[_currentResult] = undefined;
        _class_private_field_loose_base._(_this, _client)[_client] = client;
        _this.setOptions(options);
        _this.bindMethods();
        _class_private_field_loose_base._(_this, _updateResult)[_updateResult]();
        return _this;
    }
    _create_class._(MutationObserver, [
        {
            key: "bindMethods",
            value: function bindMethods() {
                this.mutate = this.mutate.bind(this);
                this.reset = this.reset.bind(this);
            }
        },
        {
            key: "setOptions",
            value: function setOptions(options) {
                var _class_private_field_loose_base__currentMutation;
                var prevOptions = this.options;
                this.options = _class_private_field_loose_base._(this, _client)[_client].defaultMutationOptions(options);
                if (!(0, _utils.shallowEqualObjects)(this.options, prevOptions)) {
                    _class_private_field_loose_base._(this, _client)[_client].getMutationCache().notify({
                        type: 'observerOptionsUpdated',
                        mutation: _class_private_field_loose_base._(this, _currentMutation)[_currentMutation],
                        observer: this
                    });
                }
                if ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.mutationKey) && this.options.mutationKey && (0, _utils.hashKey)(prevOptions.mutationKey) !== (0, _utils.hashKey)(this.options.mutationKey)) {
                    this.reset();
                } else if (((_class_private_field_loose_base__currentMutation = _class_private_field_loose_base._(this, _currentMutation)[_currentMutation]) === null || _class_private_field_loose_base__currentMutation === void 0 ? void 0 : _class_private_field_loose_base__currentMutation.state.status) === 'pending') {
                    _class_private_field_loose_base._(this, _currentMutation)[_currentMutation].setOptions(this.options);
                }
            }
        },
        {
            key: "onUnsubscribe",
            value: function onUnsubscribe() {
                if (!this.hasListeners()) {
                    var _class_private_field_loose_base__currentMutation;
                    (_class_private_field_loose_base__currentMutation = _class_private_field_loose_base._(this, _currentMutation)[_currentMutation]) === null || _class_private_field_loose_base__currentMutation === void 0 ? void 0 : _class_private_field_loose_base__currentMutation.removeObserver(this);
                }
            }
        },
        {
            key: "onMutationUpdate",
            value: function onMutationUpdate(action) {
                _class_private_field_loose_base._(this, _updateResult)[_updateResult]();
                _class_private_field_loose_base._(this, _notify)[_notify](action);
            }
        },
        {
            key: "getCurrentResult",
            value: function getCurrentResult() {
                return _class_private_field_loose_base._(this, _currentResult)[_currentResult];
            }
        },
        {
            key: "reset",
            value: function reset() {
                var _class_private_field_loose_base__currentMutation;
                // reset needs to remove the observer from the mutation because there is no way to "get it back"
                // another mutate call will yield a new mutation!
                (_class_private_field_loose_base__currentMutation = _class_private_field_loose_base._(this, _currentMutation)[_currentMutation]) === null || _class_private_field_loose_base__currentMutation === void 0 ? void 0 : _class_private_field_loose_base__currentMutation.removeObserver(this);
                _class_private_field_loose_base._(this, _currentMutation)[_currentMutation] = undefined;
                _class_private_field_loose_base._(this, _updateResult)[_updateResult]();
                _class_private_field_loose_base._(this, _notify)[_notify]();
            }
        },
        {
            key: "mutate",
            value: function mutate(variables, options) {
                var _class_private_field_loose_base__currentMutation;
                _class_private_field_loose_base._(this, _mutateOptions)[_mutateOptions] = options;
                (_class_private_field_loose_base__currentMutation = _class_private_field_loose_base._(this, _currentMutation)[_currentMutation]) === null || _class_private_field_loose_base__currentMutation === void 0 ? void 0 : _class_private_field_loose_base__currentMutation.removeObserver(this);
                _class_private_field_loose_base._(this, _currentMutation)[_currentMutation] = _class_private_field_loose_base._(this, _client)[_client].getMutationCache().build(_class_private_field_loose_base._(this, _client)[_client], this.options);
                _class_private_field_loose_base._(this, _currentMutation)[_currentMutation].addObserver(this);
                return _class_private_field_loose_base._(this, _currentMutation)[_currentMutation].execute(variables);
            }
        }
    ]);
    return MutationObserver;
}(_subscribable.Subscribable);
function updateResult() {
    var _class_private_field_loose_base__currentMutation;
    var state = ((_class_private_field_loose_base__currentMutation = _class_private_field_loose_base._(this, _currentMutation)[_currentMutation]) === null || _class_private_field_loose_base__currentMutation === void 0 ? void 0 : _class_private_field_loose_base__currentMutation.state) ?? (0, _mutation.getDefaultState)();
    _class_private_field_loose_base._(this, _currentResult)[_currentResult] = _object_spread_props._(_object_spread._({}, state), {
        isPending: state.status === 'pending',
        isSuccess: state.status === 'success',
        isError: state.status === 'error',
        isIdle: state.status === 'idle',
        mutate: this.mutate,
        reset: this.reset
    });
}
function notify(action) {
    _notifyManager.notifyManager.batch(()=>{
        // First trigger the mutate callbacks
        if (_class_private_field_loose_base._(this, _mutateOptions)[_mutateOptions] && this.hasListeners()) {
            var variables = _class_private_field_loose_base._(this, _currentResult)[_currentResult].variables;
            var context = _class_private_field_loose_base._(this, _currentResult)[_currentResult].context;
            if ((action === null || action === void 0 ? void 0 : action.type) === 'success') {
                var _class_private_field_loose_base__mutateOptions_onSuccess, _class_private_field_loose_base__mutateOptions, _class_private_field_loose_base__mutateOptions_onSettled, _class_private_field_loose_base__mutateOptions1;
                (_class_private_field_loose_base__mutateOptions_onSuccess = (_class_private_field_loose_base__mutateOptions = _class_private_field_loose_base._(this, _mutateOptions)[_mutateOptions]).onSuccess) === null || _class_private_field_loose_base__mutateOptions_onSuccess === void 0 ? void 0 : _class_private_field_loose_base__mutateOptions_onSuccess.call(_class_private_field_loose_base__mutateOptions, action.data, variables, context);
                (_class_private_field_loose_base__mutateOptions_onSettled = (_class_private_field_loose_base__mutateOptions1 = _class_private_field_loose_base._(this, _mutateOptions)[_mutateOptions]).onSettled) === null || _class_private_field_loose_base__mutateOptions_onSettled === void 0 ? void 0 : _class_private_field_loose_base__mutateOptions_onSettled.call(_class_private_field_loose_base__mutateOptions1, action.data, null, variables, context);
            } else if ((action === null || action === void 0 ? void 0 : action.type) === 'error') {
                var _class_private_field_loose_base__mutateOptions_onError, _class_private_field_loose_base__mutateOptions2, _class_private_field_loose_base__mutateOptions_onSettled1, _class_private_field_loose_base__mutateOptions3;
                (_class_private_field_loose_base__mutateOptions_onError = (_class_private_field_loose_base__mutateOptions2 = _class_private_field_loose_base._(this, _mutateOptions)[_mutateOptions]).onError) === null || _class_private_field_loose_base__mutateOptions_onError === void 0 ? void 0 : _class_private_field_loose_base__mutateOptions_onError.call(_class_private_field_loose_base__mutateOptions2, action.error, variables, context);
                (_class_private_field_loose_base__mutateOptions_onSettled1 = (_class_private_field_loose_base__mutateOptions3 = _class_private_field_loose_base._(this, _mutateOptions)[_mutateOptions]).onSettled) === null || _class_private_field_loose_base__mutateOptions_onSettled1 === void 0 ? void 0 : _class_private_field_loose_base__mutateOptions_onSettled1.call(_class_private_field_loose_base__mutateOptions3, undefined, action.error, variables, context);
            }
        }
        // Then trigger the listeners
        this.listeners.forEach((listener)=>{
            listener(_class_private_field_loose_base._(this, _currentResult)[_currentResult]);
        });
    });
}


}),
99355: (function (__unused_webpack_module, exports, __webpack_require__) {
// TYPES
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createNotifyManager: function() {
        return createNotifyManager;
    },
    defaultScheduler: function() {
        return defaultScheduler;
    },
    notifyManager: function() {
        return notifyManager;
    }
});
var _to_consumable_array = __webpack_require__(92716);
var defaultScheduler = (cb)=>setTimeout(cb, 0);
function createNotifyManager() {
    var queue = [];
    var transactions = 0;
    var notifyFn = (callback)=>{
        callback();
    };
    var batchNotifyFn = (callback)=>{
        callback();
    };
    var scheduleFn = defaultScheduler;
    var schedule = (callback)=>{
        if (transactions) {
            queue.push(callback);
        } else {
            scheduleFn(()=>{
                notifyFn(callback);
            });
        }
    };
    var flush = ()=>{
        var originalQueue = queue;
        queue = [];
        if (originalQueue.length) {
            scheduleFn(()=>{
                batchNotifyFn(()=>{
                    originalQueue.forEach((callback)=>{
                        notifyFn(callback);
                    });
                });
            });
        }
    };
    return {
        batch: (callback)=>{
            var result;
            transactions++;
            try {
                result = callback();
            } finally{
                transactions--;
                if (!transactions) {
                    flush();
                }
            }
            return result;
        },
        /**
     * All calls to the wrapped function will be batched.
     */ batchCalls: (callback)=>{
            return (...args)=>{
                schedule(()=>{
                    callback.apply(void 0, _to_consumable_array._(args));
                });
            };
        },
        schedule,
        /**
     * Use this method to set a custom notify function.
     * This can be used to for example wrap notifications with `React.act` while running tests.
     */ setNotifyFunction: (fn)=>{
            notifyFn = fn;
        },
        /**
     * Use this method to set a custom function to batch notifications together into a single tick.
     * By default React Query will use the batch function provided by ReactDOM or React Native.
     */ setBatchNotifyFunction: (fn)=>{
            batchNotifyFn = fn;
        },
        setScheduler: (fn)=>{
            scheduleFn = fn;
        }
    };
}
var notifyManager = createNotifyManager();


}),
58307: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    OnlineManager: function() {
        return OnlineManager;
    },
    onlineManager: function() {
        return onlineManager;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _subscribable = __webpack_require__(81254);
var _utils = __webpack_require__(78812);
var _online = /*#__PURE__*/ _class_private_field_loose_key._("_online"), _cleanup = /*#__PURE__*/ _class_private_field_loose_key._("_cleanup"), _setup = /*#__PURE__*/ _class_private_field_loose_key._("_setup");
var OnlineManager = /*#__PURE__*/ function(Subscribable) {
    "use strict";
    _inherits._(OnlineManager, Subscribable);
    function OnlineManager() {
        _class_call_check._(this, OnlineManager);
        var _this;
        _this = _call_super._(this, OnlineManager), Object.defineProperty(_this, _online, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _cleanup, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _setup, {
            writable: true,
            value: void 0
        }), _class_private_field_loose_base._(_this, _online)[_online] = true;
        _class_private_field_loose_base._(_this, _setup)[_setup] = (onOnline)=>{
            // addEventListener does not exist in React Native, but window does
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (!_utils.isServer && window.addEventListener) {
                var onlineListener = ()=>onOnline(true);
                var offlineListener = ()=>onOnline(false);
                // Listen to online
                window.addEventListener('online', onlineListener, false);
                window.addEventListener('offline', offlineListener, false);
                return ()=>{
                    // Be sure to unsubscribe if a new handler is set
                    window.removeEventListener('online', onlineListener);
                    window.removeEventListener('offline', offlineListener);
                };
            }
            return;
        };
        return _this;
    }
    _create_class._(OnlineManager, [
        {
            key: "onSubscribe",
            value: function onSubscribe() {
                if (!_class_private_field_loose_base._(this, _cleanup)[_cleanup]) {
                    this.setEventListener(_class_private_field_loose_base._(this, _setup)[_setup]);
                }
            }
        },
        {
            key: "onUnsubscribe",
            value: function onUnsubscribe() {
                var _this, _this1;
                if (!this.hasListeners()) {
                    (_this = _class_private_field_loose_base._(_this1 = this, _cleanup)[_cleanup]) === null || _this === void 0 ? void 0 : _this.call(_this1);
                    _class_private_field_loose_base._(this, _cleanup)[_cleanup] = undefined;
                }
            }
        },
        {
            key: "setEventListener",
            value: function setEventListener(setup) {
                var _this, _this1;
                _class_private_field_loose_base._(this, _setup)[_setup] = setup;
                (_this = _class_private_field_loose_base._(_this1 = this, _cleanup)[_cleanup]) === null || _this === void 0 ? void 0 : _this.call(_this1);
                _class_private_field_loose_base._(this, _cleanup)[_cleanup] = setup(this.setOnline.bind(this));
            }
        },
        {
            key: "setOnline",
            value: function setOnline(online) {
                var changed = _class_private_field_loose_base._(this, _online)[_online] !== online;
                if (changed) {
                    _class_private_field_loose_base._(this, _online)[_online] = online;
                    this.listeners.forEach((listener)=>{
                        listener(online);
                    });
                }
            }
        },
        {
            key: "isOnline",
            value: function isOnline() {
                return _class_private_field_loose_base._(this, _online)[_online];
            }
        }
    ]);
    return OnlineManager;
}(_subscribable.Subscribable);
var onlineManager = new OnlineManager();


}),
18683: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "QueriesObserver", ({
    enumerable: true,
    get: function() {
        return QueriesObserver;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _notifyManager = __webpack_require__(99355);
var _queryObserver = __webpack_require__(55854);
var _subscribable = __webpack_require__(81254);
var _utils = __webpack_require__(78812);
function difference(array1, array2) {
    return array1.filter((x)=>!array2.includes(x));
}
function replaceAt(array, index, value) {
    var copy = array.slice(0);
    copy[index] = value;
    return copy;
}
var _client = /*#__PURE__*/ _class_private_field_loose_key._("_client"), _result = /*#__PURE__*/ _class_private_field_loose_key._("_result"), _queries = /*#__PURE__*/ _class_private_field_loose_key._("_queries"), _options = /*#__PURE__*/ _class_private_field_loose_key._("_options"), _observers = /*#__PURE__*/ _class_private_field_loose_key._("_observers"), _combinedResult = /*#__PURE__*/ _class_private_field_loose_key._("_combinedResult"), _lastCombine = /*#__PURE__*/ _class_private_field_loose_key._("_lastCombine"), _lastResult = /*#__PURE__*/ _class_private_field_loose_key._("_lastResult"), _observerMatches = /*#__PURE__*/ _class_private_field_loose_key._("_observerMatches"), _trackResult = /*#__PURE__*/ _class_private_field_loose_key._("_trackResult"), _combineResult = /*#__PURE__*/ _class_private_field_loose_key._("_combineResult"), _findMatchingObservers = /*#__PURE__*/ _class_private_field_loose_key._("_findMatchingObservers"), _onUpdate = /*#__PURE__*/ _class_private_field_loose_key._("_onUpdate"), _notify = /*#__PURE__*/ _class_private_field_loose_key._("_notify");
var QueriesObserver = /*#__PURE__*/ function(Subscribable) {
    "use strict";
    _inherits._(QueriesObserver, Subscribable);
    function QueriesObserver(client, queries, options) {
        _class_call_check._(this, QueriesObserver);
        var _this;
        _this = _call_super._(this, QueriesObserver), Object.defineProperty(_this, _trackResult, {
            value: trackResult
        }), Object.defineProperty(_this, _combineResult, {
            value: combineResult
        }), Object.defineProperty(_this, _findMatchingObservers, {
            value: findMatchingObservers
        }), Object.defineProperty(_this, _onUpdate, {
            value: onUpdate
        }), Object.defineProperty(_this, _notify, {
            value: notify
        }), Object.defineProperty(_this, _client, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _result, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _queries, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _options, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _observers, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _combinedResult, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _lastCombine, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _lastResult, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _observerMatches, {
            writable: true,
            value: void 0
        }), _class_private_field_loose_base._(_this, _observerMatches)[_observerMatches] = [];
        _class_private_field_loose_base._(_this, _client)[_client] = client;
        _class_private_field_loose_base._(_this, _options)[_options] = options;
        _class_private_field_loose_base._(_this, _queries)[_queries] = [];
        _class_private_field_loose_base._(_this, _observers)[_observers] = [];
        _class_private_field_loose_base._(_this, _result)[_result] = [];
        _this.setQueries(queries);
        return _this;
    }
    _create_class._(QueriesObserver, [
        {
            key: "onSubscribe",
            value: function onSubscribe() {
                if (this.listeners.size === 1) {
                    _class_private_field_loose_base._(this, _observers)[_observers].forEach((observer)=>{
                        observer.subscribe((result)=>{
                            _class_private_field_loose_base._(this, _onUpdate)[_onUpdate](observer, result);
                        });
                    });
                }
            }
        },
        {
            key: "onUnsubscribe",
            value: function onUnsubscribe() {
                if (!this.listeners.size) {
                    this.destroy();
                }
            }
        },
        {
            key: "destroy",
            value: function destroy() {
                this.listeners = new Set();
                _class_private_field_loose_base._(this, _observers)[_observers].forEach((observer)=>{
                    observer.destroy();
                });
            }
        },
        {
            key: "setQueries",
            value: function setQueries(queries, options) {
                _class_private_field_loose_base._(this, _queries)[_queries] = queries;
                _class_private_field_loose_base._(this, _options)[_options] = options;
                if (false) { var queryHashes }
                _notifyManager.notifyManager.batch(()=>{
                    var prevObservers = _class_private_field_loose_base._(this, _observers)[_observers];
                    var newObserverMatches = _class_private_field_loose_base._(this, _findMatchingObservers)[_findMatchingObservers](_class_private_field_loose_base._(this, _queries)[_queries]);
                    _class_private_field_loose_base._(this, _observerMatches)[_observerMatches] = newObserverMatches;
                    // set options for the new observers to notify of changes
                    newObserverMatches.forEach((match)=>match.observer.setOptions(match.defaultedQueryOptions));
                    var newObservers = newObserverMatches.map((match)=>match.observer);
                    var newResult = newObservers.map((observer)=>observer.getCurrentResult());
                    var hasIndexChange = newObservers.some((observer, index)=>observer !== prevObservers[index]);
                    if (prevObservers.length === newObservers.length && !hasIndexChange) {
                        return;
                    }
                    _class_private_field_loose_base._(this, _observers)[_observers] = newObservers;
                    _class_private_field_loose_base._(this, _result)[_result] = newResult;
                    if (!this.hasListeners()) {
                        return;
                    }
                    difference(prevObservers, newObservers).forEach((observer)=>{
                        observer.destroy();
                    });
                    difference(newObservers, prevObservers).forEach((observer)=>{
                        observer.subscribe((result)=>{
                            _class_private_field_loose_base._(this, _onUpdate)[_onUpdate](observer, result);
                        });
                    });
                    _class_private_field_loose_base._(this, _notify)[_notify]();
                });
            }
        },
        {
            key: "getCurrentResult",
            value: function getCurrentResult() {
                return _class_private_field_loose_base._(this, _result)[_result];
            }
        },
        {
            key: "getQueries",
            value: function getQueries() {
                return _class_private_field_loose_base._(this, _observers)[_observers].map((observer)=>observer.getCurrentQuery());
            }
        },
        {
            key: "getObservers",
            value: function getObservers() {
                return _class_private_field_loose_base._(this, _observers)[_observers];
            }
        },
        {
            key: "getOptimisticResult",
            value: function getOptimisticResult(queries, combine) {
                var matches = _class_private_field_loose_base._(this, _findMatchingObservers)[_findMatchingObservers](queries);
                var result = matches.map((match)=>match.observer.getOptimisticResult(match.defaultedQueryOptions));
                return [
                    result,
                    (r)=>{
                        return _class_private_field_loose_base._(this, _combineResult)[_combineResult](r ?? result, combine);
                    },
                    ()=>{
                        return _class_private_field_loose_base._(this, _trackResult)[_trackResult](result, matches);
                    }
                ];
            }
        }
    ]);
    return QueriesObserver;
}(_subscribable.Subscribable);
function trackResult(result, matches) {
    return matches.map((match, index)=>{
        var observerResult = result[index];
        return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, (accessedProp)=>{
            // track property on all observers to ensure proper (synchronized) tracking (#7000)
            matches.forEach((m)=>{
                m.observer.trackProp(accessedProp);
            });
        }) : observerResult;
    });
}
function combineResult(input, combine) {
    if (combine) {
        if (!_class_private_field_loose_base._(this, _combinedResult)[_combinedResult] || _class_private_field_loose_base._(this, _result)[_result] !== _class_private_field_loose_base._(this, _lastResult)[_lastResult] || combine !== _class_private_field_loose_base._(this, _lastCombine)[_lastCombine]) {
            _class_private_field_loose_base._(this, _lastCombine)[_lastCombine] = combine;
            _class_private_field_loose_base._(this, _lastResult)[_lastResult] = _class_private_field_loose_base._(this, _result)[_result];
            _class_private_field_loose_base._(this, _combinedResult)[_combinedResult] = (0, _utils.replaceEqualDeep)(_class_private_field_loose_base._(this, _combinedResult)[_combinedResult], combine(input));
        }
        return _class_private_field_loose_base._(this, _combinedResult)[_combinedResult];
    }
    return input;
}
function findMatchingObservers(queries) {
    var prevObserversMap = new Map(_class_private_field_loose_base._(this, _observers)[_observers].map((observer)=>[
            observer.options.queryHash,
            observer
        ]));
    var observers = [];
    queries.forEach((options)=>{
        var defaultedOptions = _class_private_field_loose_base._(this, _client)[_client].defaultQueryOptions(options);
        var match = prevObserversMap.get(defaultedOptions.queryHash);
        if (match) {
            observers.push({
                defaultedQueryOptions: defaultedOptions,
                observer: match
            });
        } else {
            observers.push({
                defaultedQueryOptions: defaultedOptions,
                observer: new _queryObserver.QueryObserver(_class_private_field_loose_base._(this, _client)[_client], defaultedOptions)
            });
        }
    });
    return observers;
}
function onUpdate(observer, result) {
    var index = _class_private_field_loose_base._(this, _observers)[_observers].indexOf(observer);
    if (index !== -1) {
        _class_private_field_loose_base._(this, _result)[_result] = replaceAt(_class_private_field_loose_base._(this, _result)[_result], index, result);
        _class_private_field_loose_base._(this, _notify)[_notify]();
    }
}
function notify() {
    if (this.hasListeners()) {
        var _class_private_field_loose_base__options;
        var previousResult = _class_private_field_loose_base._(this, _combinedResult)[_combinedResult];
        var newTracked = _class_private_field_loose_base._(this, _trackResult)[_trackResult](_class_private_field_loose_base._(this, _result)[_result], _class_private_field_loose_base._(this, _observerMatches)[_observerMatches]);
        var newResult = _class_private_field_loose_base._(this, _combineResult)[_combineResult](newTracked, (_class_private_field_loose_base__options = _class_private_field_loose_base._(this, _options)[_options]) === null || _class_private_field_loose_base__options === void 0 ? void 0 : _class_private_field_loose_base__options.combine);
        if (previousResult !== newResult) {
            _notifyManager.notifyManager.batch(()=>{
                this.listeners.forEach((listener)=>{
                    listener(_class_private_field_loose_base._(this, _result)[_result]);
                });
            });
        }
    }
}


}),
15043: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Query: function() {
        return Query;
    },
    fetchState: function() {
        return fetchState;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _utils = __webpack_require__(78812);
var _notifyManager = __webpack_require__(99355);
var _retryer = __webpack_require__(71984);
var _removable = __webpack_require__(61893);
var _initialState = /*#__PURE__*/ _class_private_field_loose_key._("_initialState"), _revertState = /*#__PURE__*/ _class_private_field_loose_key._("_revertState"), _cache = /*#__PURE__*/ _class_private_field_loose_key._("_cache"), _client = /*#__PURE__*/ _class_private_field_loose_key._("_client"), _retryer1 = /*#__PURE__*/ _class_private_field_loose_key._("_retryer"), _defaultOptions = /*#__PURE__*/ _class_private_field_loose_key._("_defaultOptions"), _abortSignalConsumed = /*#__PURE__*/ _class_private_field_loose_key._("_abortSignalConsumed"), _dispatch = /*#__PURE__*/ _class_private_field_loose_key._("_dispatch");
var Query = /*#__PURE__*/ function(Removable) {
    "use strict";
    _inherits._(Query, Removable);
    function Query(config) {
        _class_call_check._(this, Query);
        var _this;
        _this = _call_super._(this, Query), Object.defineProperty(_this, _dispatch, {
            value: dispatch
        }), Object.defineProperty(_this, _initialState, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _revertState, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _cache, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _client, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _retryer1, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _defaultOptions, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _abortSignalConsumed, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _abortSignalConsumed)[_abortSignalConsumed] = false;
        _class_private_field_loose_base._(_this, _defaultOptions)[_defaultOptions] = config.defaultOptions;
        _this.setOptions(config.options);
        _this.observers = [];
        _class_private_field_loose_base._(_this, _client)[_client] = config.client;
        _class_private_field_loose_base._(_this, _cache)[_cache] = _class_private_field_loose_base._(_this, _client)[_client].getQueryCache();
        _this.queryKey = config.queryKey;
        _this.queryHash = config.queryHash;
        _class_private_field_loose_base._(_this, _initialState)[_initialState] = getDefaultState(_this.options);
        _this.state = config.state ?? _class_private_field_loose_base._(_this, _initialState)[_initialState];
        _this.scheduleGc();
        return _this;
    }
    _create_class._(Query, [
        {
            key: "meta",
            get: function() {
                return this.options.meta;
            }
        },
        {
            key: "promise",
            get: function() {
                var _class_private_field_loose_base__retryer;
                return (_class_private_field_loose_base__retryer = _class_private_field_loose_base._(this, _retryer1)[_retryer1]) === null || _class_private_field_loose_base__retryer === void 0 ? void 0 : _class_private_field_loose_base__retryer.promise;
            }
        },
        {
            key: "setOptions",
            value: function setOptions(options) {
                this.options = _object_spread._({}, _class_private_field_loose_base._(this, _defaultOptions)[_defaultOptions], options);
                this.updateGcTime(this.options.gcTime);
            }
        },
        {
            key: "optionalRemove",
            value: function optionalRemove() {
                if (!this.observers.length && this.state.fetchStatus === 'idle') {
                    _class_private_field_loose_base._(this, _cache)[_cache].remove(this);
                }
            }
        },
        {
            key: "setData",
            value: function setData(newData, options) {
                var data = (0, _utils.replaceData)(this.state.data, newData, this.options);
                // Set data and mark it as cached
                _class_private_field_loose_base._(this, _dispatch)[_dispatch]({
                    data,
                    type: 'success',
                    dataUpdatedAt: options === null || options === void 0 ? void 0 : options.updatedAt,
                    manual: options === null || options === void 0 ? void 0 : options.manual
                });
                return data;
            }
        },
        {
            key: "setState",
            value: function setState(state, setStateOptions) {
                _class_private_field_loose_base._(this, _dispatch)[_dispatch]({
                    type: 'setState',
                    state,
                    setStateOptions
                });
            }
        },
        {
            key: "cancel",
            value: function cancel(options) {
                var _class_private_field_loose_base__retryer, _class_private_field_loose_base__retryer1;
                var promise = (_class_private_field_loose_base__retryer = _class_private_field_loose_base._(this, _retryer1)[_retryer1]) === null || _class_private_field_loose_base__retryer === void 0 ? void 0 : _class_private_field_loose_base__retryer.promise;
                (_class_private_field_loose_base__retryer1 = _class_private_field_loose_base._(this, _retryer1)[_retryer1]) === null || _class_private_field_loose_base__retryer1 === void 0 ? void 0 : _class_private_field_loose_base__retryer1.cancel(options);
                return promise ? promise.then(_utils.noop).catch(_utils.noop) : Promise.resolve();
            }
        },
        {
            key: "destroy",
            value: function destroy() {
                _get._(_get_prototype_of._(Query.prototype), "destroy", this).call(this);
                this.cancel({
                    silent: true
                });
            }
        },
        {
            key: "reset",
            value: function reset() {
                this.destroy();
                this.setState(_class_private_field_loose_base._(this, _initialState)[_initialState]);
            }
        },
        {
            key: "isActive",
            value: function isActive() {
                return this.observers.some((observer)=>(0, _utils.resolveEnabled)(observer.options.enabled, this) !== false);
            }
        },
        {
            key: "isDisabled",
            value: function isDisabled() {
                if (this.getObserversCount() > 0) {
                    return !this.isActive();
                }
                // if a query has no observers, it should still be considered disabled if it never attempted a fetch
                return this.options.queryFn === _utils.skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;
            }
        },
        {
            key: "isStale",
            value: function isStale() {
                if (this.state.isInvalidated) {
                    return true;
                }
                if (this.getObserversCount() > 0) {
                    return this.observers.some((observer)=>observer.getCurrentResult().isStale);
                }
                return this.state.data === undefined;
            }
        },
        {
            key: "isStaleByTime",
            value: function isStaleByTime(ref) {
                var staleTime = ref === void 0 ? 0 : ref;
                return this.state.isInvalidated || this.state.data === undefined || !(0, _utils.timeUntilStale)(this.state.dataUpdatedAt, staleTime);
            }
        },
        {
            key: "onFocus",
            value: function onFocus() {
                var _class_private_field_loose_base__retryer;
                var observer = this.observers.find((x)=>x.shouldFetchOnWindowFocus());
                observer === null || observer === void 0 ? void 0 : observer.refetch({
                    cancelRefetch: false
                });
                // Continue fetch if currently paused
                (_class_private_field_loose_base__retryer = _class_private_field_loose_base._(this, _retryer1)[_retryer1]) === null || _class_private_field_loose_base__retryer === void 0 ? void 0 : _class_private_field_loose_base__retryer.continue();
            }
        },
        {
            key: "onOnline",
            value: function onOnline() {
                var _class_private_field_loose_base__retryer;
                var observer = this.observers.find((x)=>x.shouldFetchOnReconnect());
                observer === null || observer === void 0 ? void 0 : observer.refetch({
                    cancelRefetch: false
                });
                // Continue fetch if currently paused
                (_class_private_field_loose_base__retryer = _class_private_field_loose_base._(this, _retryer1)[_retryer1]) === null || _class_private_field_loose_base__retryer === void 0 ? void 0 : _class_private_field_loose_base__retryer.continue();
            }
        },
        {
            key: "addObserver",
            value: function addObserver(observer) {
                if (!this.observers.includes(observer)) {
                    this.observers.push(observer);
                    // Stop the query from being garbage collected
                    this.clearGcTimeout();
                    _class_private_field_loose_base._(this, _cache)[_cache].notify({
                        type: 'observerAdded',
                        query: this,
                        observer
                    });
                }
            }
        },
        {
            key: "removeObserver",
            value: function removeObserver(observer) {
                if (this.observers.includes(observer)) {
                    this.observers = this.observers.filter((x)=>x !== observer);
                    if (!this.observers.length) {
                        // If the transport layer does not support cancellation
                        // we'll let the query continue so the result can be cached
                        if (_class_private_field_loose_base._(this, _retryer1)[_retryer1]) {
                            if (_class_private_field_loose_base._(this, _abortSignalConsumed)[_abortSignalConsumed]) {
                                _class_private_field_loose_base._(this, _retryer1)[_retryer1].cancel({
                                    revert: true
                                });
                            } else {
                                _class_private_field_loose_base._(this, _retryer1)[_retryer1].cancelRetry();
                            }
                        }
                        this.scheduleGc();
                    }
                    _class_private_field_loose_base._(this, _cache)[_cache].notify({
                        type: 'observerRemoved',
                        query: this,
                        observer
                    });
                }
            }
        },
        {
            key: "getObserversCount",
            value: function getObserversCount() {
                return this.observers.length;
            }
        },
        {
            key: "invalidate",
            value: function invalidate() {
                if (!this.state.isInvalidated) {
                    _class_private_field_loose_base._(this, _dispatch)[_dispatch]({
                        type: 'invalidate'
                    });
                }
            }
        },
        {
            key: "fetch",
            value: function fetch(options, fetchOptions) {
                var _this_options_behavior, _context_fetchOptions;
                if (this.state.fetchStatus !== 'idle') {
                    if (this.state.data !== undefined && (fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.cancelRefetch)) {
                        // Silently cancel current fetch if the user wants to cancel refetch
                        this.cancel({
                            silent: true
                        });
                    } else if (_class_private_field_loose_base._(this, _retryer1)[_retryer1]) {
                        // make sure that retries that were potentially cancelled due to unmounts can continue
                        _class_private_field_loose_base._(this, _retryer1)[_retryer1].continueRetry();
                        // Return current promise if we are already fetching
                        return _class_private_field_loose_base._(this, _retryer1)[_retryer1].promise;
                    }
                }
                // Update config if passed, otherwise the config from the last execution is used
                if (options) {
                    this.setOptions(options);
                }
                // Use the options from the first observer with a query function if no function is found.
                // This can happen when the query is hydrated or created with setQueryData.
                if (!this.options.queryFn) {
                    var observer = this.observers.find((x)=>x.options.queryFn);
                    if (observer) {
                        this.setOptions(observer.options);
                    }
                }
                if (false) {}
                var abortController = new AbortController();
                // Adds an enumerable signal property to the object that
                // which sets abortSignalConsumed to true when the signal
                // is read.
                var addSignalProperty = (object)=>{
                    Object.defineProperty(object, 'signal', {
                        enumerable: true,
                        get: ()=>{
                            _class_private_field_loose_base._(this, _abortSignalConsumed)[_abortSignalConsumed] = true;
                            return abortController.signal;
                        }
                    });
                };
                // Create fetch function
                var fetchFn = ()=>{
                    var queryFn = (0, _utils.ensureQueryFn)(this.options, fetchOptions);
                    // Create query function context
                    var queryFnContext = {
                        client: _class_private_field_loose_base._(this, _client)[_client],
                        queryKey: this.queryKey,
                        meta: this.meta
                    };
                    addSignalProperty(queryFnContext);
                    _class_private_field_loose_base._(this, _abortSignalConsumed)[_abortSignalConsumed] = false;
                    if (this.options.persister) {
                        return this.options.persister(queryFn, queryFnContext, this);
                    }
                    return queryFn(queryFnContext);
                };
                // Trigger behavior hook
                var context = {
                    fetchOptions,
                    options: this.options,
                    queryKey: this.queryKey,
                    client: _class_private_field_loose_base._(this, _client)[_client],
                    state: this.state,
                    fetchFn
                };
                addSignalProperty(context);
                (_this_options_behavior = this.options.behavior) === null || _this_options_behavior === void 0 ? void 0 : _this_options_behavior.onFetch(context, this);
                // Store state in case the current fetch needs to be reverted
                _class_private_field_loose_base._(this, _revertState)[_revertState] = this.state;
                // Set to fetching state if not already in it
                if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context_fetchOptions = context.fetchOptions) === null || _context_fetchOptions === void 0 ? void 0 : _context_fetchOptions.meta)) {
                    var _context_fetchOptions1;
                    _class_private_field_loose_base._(this, _dispatch)[_dispatch]({
                        type: 'fetch',
                        meta: (_context_fetchOptions1 = context.fetchOptions) === null || _context_fetchOptions1 === void 0 ? void 0 : _context_fetchOptions1.meta
                    });
                }
                var onError = (error)=>{
                    // Optimistically update state if needed
                    if (!((0, _retryer.isCancelledError)(error) && error.silent)) {
                        _class_private_field_loose_base._(this, _dispatch)[_dispatch]({
                            type: 'error',
                            error: error
                        });
                    }
                    if (!(0, _retryer.isCancelledError)(error)) {
                        var // Notify cache callback
                        _class_private_field_loose_base__cache_config_onError, _class_private_field_loose_base__cache_config, _class_private_field_loose_base__cache_config_onSettled, _class_private_field_loose_base__cache_config1;
                        (_class_private_field_loose_base__cache_config_onError = (_class_private_field_loose_base__cache_config = _class_private_field_loose_base._(this, _cache)[_cache].config).onError) === null || _class_private_field_loose_base__cache_config_onError === void 0 ? void 0 : _class_private_field_loose_base__cache_config_onError.call(_class_private_field_loose_base__cache_config, error, this);
                        (_class_private_field_loose_base__cache_config_onSettled = (_class_private_field_loose_base__cache_config1 = _class_private_field_loose_base._(this, _cache)[_cache].config).onSettled) === null || _class_private_field_loose_base__cache_config_onSettled === void 0 ? void 0 : _class_private_field_loose_base__cache_config_onSettled.call(_class_private_field_loose_base__cache_config1, this.state.data, error, this);
                    }
                    // Schedule query gc after fetching
                    this.scheduleGc();
                };
                // Try to fetch the data
                _class_private_field_loose_base._(this, _retryer1)[_retryer1] = (0, _retryer.createRetryer)({
                    initialPromise: fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.initialPromise,
                    fn: context.fetchFn,
                    abort: abortController.abort.bind(abortController),
                    onSuccess: (data)=>{
                        var // Notify cache callback
                        _class_private_field_loose_base__cache_config_onSuccess, _class_private_field_loose_base__cache_config, _class_private_field_loose_base__cache_config_onSettled, _class_private_field_loose_base__cache_config1;
                        if (data === undefined) {
                            if (false) {}
                            onError(new Error(`${this.queryHash} data is undefined`));
                            return;
                        }
                        try {
                            this.setData(data);
                        } catch (error) {
                            onError(error);
                            return;
                        }
                        (_class_private_field_loose_base__cache_config_onSuccess = (_class_private_field_loose_base__cache_config = _class_private_field_loose_base._(this, _cache)[_cache].config).onSuccess) === null || _class_private_field_loose_base__cache_config_onSuccess === void 0 ? void 0 : _class_private_field_loose_base__cache_config_onSuccess.call(_class_private_field_loose_base__cache_config, data, this);
                        (_class_private_field_loose_base__cache_config_onSettled = (_class_private_field_loose_base__cache_config1 = _class_private_field_loose_base._(this, _cache)[_cache].config).onSettled) === null || _class_private_field_loose_base__cache_config_onSettled === void 0 ? void 0 : _class_private_field_loose_base__cache_config_onSettled.call(_class_private_field_loose_base__cache_config1, data, this.state.error, this);
                        // Schedule query gc after fetching
                        this.scheduleGc();
                    },
                    onError,
                    onFail: (failureCount, error)=>{
                        _class_private_field_loose_base._(this, _dispatch)[_dispatch]({
                            type: 'failed',
                            failureCount,
                            error
                        });
                    },
                    onPause: ()=>{
                        _class_private_field_loose_base._(this, _dispatch)[_dispatch]({
                            type: 'pause'
                        });
                    },
                    onContinue: ()=>{
                        _class_private_field_loose_base._(this, _dispatch)[_dispatch]({
                            type: 'continue'
                        });
                    },
                    retry: context.options.retry,
                    retryDelay: context.options.retryDelay,
                    networkMode: context.options.networkMode,
                    canRun: ()=>true
                });
                return _class_private_field_loose_base._(this, _retryer1)[_retryer1].start();
            }
        }
    ]);
    return Query;
}(_removable.Removable);
function dispatch(action) {
    var reducer = (state)=>{
        switch(action.type){
            case 'failed':
                return _object_spread_props._(_object_spread._({}, state), {
                    fetchFailureCount: action.failureCount,
                    fetchFailureReason: action.error
                });
            case 'pause':
                return _object_spread_props._(_object_spread._({}, state), {
                    fetchStatus: 'paused'
                });
            case 'continue':
                return _object_spread_props._(_object_spread._({}, state), {
                    fetchStatus: 'fetching'
                });
            case 'fetch':
                return _object_spread_props._(_object_spread._({}, state, fetchState(state.data, this.options)), {
                    fetchMeta: action.meta ?? null
                });
            case 'success':
                return _object_spread._(_object_spread_props._(_object_spread._({}, state), {
                    data: action.data,
                    dataUpdateCount: state.dataUpdateCount + 1,
                    dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),
                    error: null,
                    isInvalidated: false,
                    status: 'success'
                }), !action.manual && {
                    fetchStatus: 'idle',
                    fetchFailureCount: 0,
                    fetchFailureReason: null
                });
            case 'error':
                var error = action.error;
                if ((0, _retryer.isCancelledError)(error) && error.revert && _class_private_field_loose_base._(this, _revertState)[_revertState]) {
                    return _object_spread_props._(_object_spread._({}, _class_private_field_loose_base._(this, _revertState)[_revertState]), {
                        fetchStatus: 'idle'
                    });
                }
                return _object_spread_props._(_object_spread._({}, state), {
                    error,
                    errorUpdateCount: state.errorUpdateCount + 1,
                    errorUpdatedAt: Date.now(),
                    fetchFailureCount: state.fetchFailureCount + 1,
                    fetchFailureReason: error,
                    fetchStatus: 'idle',
                    status: 'error'
                });
            case 'invalidate':
                return _object_spread_props._(_object_spread._({}, state), {
                    isInvalidated: true
                });
            case 'setState':
                return _object_spread._({}, state, action.state);
        }
    };
    this.state = reducer(this.state);
    _notifyManager.notifyManager.batch(()=>{
        this.observers.forEach((observer)=>{
            observer.onQueryUpdate();
        });
        _class_private_field_loose_base._(this, _cache)[_cache].notify({
            query: this,
            type: 'updated',
            action
        });
    });
}
function fetchState(data, options) {
    return _object_spread._({
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchStatus: (0, _retryer.canFetch)(options.networkMode) ? 'fetching' : 'paused'
    }, data === undefined && {
        error: null,
        status: 'pending'
    });
}
function getDefaultState(options) {
    var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;
    var hasData = data !== undefined;
    var initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
    return {
        data,
        dataUpdateCount: 0,
        dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,
        error: null,
        errorUpdateCount: 0,
        errorUpdatedAt: 0,
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchMeta: null,
        isInvalidated: false,
        status: hasData ? 'success' : 'pending',
        fetchStatus: 'idle'
    };
}


}),
22633: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "QueryCache", ({
    enumerable: true,
    get: function() {
        return QueryCache;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _to_consumable_array = __webpack_require__(92716);
var _utils = __webpack_require__(78812);
var _query = __webpack_require__(15043);
var _notifyManager = __webpack_require__(99355);
var _subscribable = __webpack_require__(81254);
var _queries = /*#__PURE__*/ _class_private_field_loose_key._("_queries");
var QueryCache = /*#__PURE__*/ function(Subscribable) {
    "use strict";
    _inherits._(QueryCache, Subscribable);
    function QueryCache(ref) {
        var config = ref === void 0 ? {} : ref;
        _class_call_check._(this, QueryCache);
        var _this;
        _this = _call_super._(this, QueryCache), Object.defineProperty(_this, _queries, {
            writable: true,
            value: void 0
        }), _this.config = config;
        _class_private_field_loose_base._(_this, _queries)[_queries] = new Map();
        return _this;
    }
    _create_class._(QueryCache, [
        {
            key: "build",
            value: function build(client, options, state) {
                var queryKey = options.queryKey;
                var queryHash = options.queryHash ?? (0, _utils.hashQueryKeyByOptions)(queryKey, options);
                var query = this.get(queryHash);
                if (!query) {
                    query = new _query.Query({
                        client,
                        queryKey,
                        queryHash,
                        options: client.defaultQueryOptions(options),
                        state,
                        defaultOptions: client.getQueryDefaults(queryKey)
                    });
                    this.add(query);
                }
                return query;
            }
        },
        {
            key: "add",
            value: function add(query) {
                if (!_class_private_field_loose_base._(this, _queries)[_queries].has(query.queryHash)) {
                    _class_private_field_loose_base._(this, _queries)[_queries].set(query.queryHash, query);
                    this.notify({
                        type: 'added',
                        query
                    });
                }
            }
        },
        {
            key: "remove",
            value: function remove(query) {
                var queryInMap = _class_private_field_loose_base._(this, _queries)[_queries].get(query.queryHash);
                if (queryInMap) {
                    query.destroy();
                    if (queryInMap === query) {
                        _class_private_field_loose_base._(this, _queries)[_queries].delete(query.queryHash);
                    }
                    this.notify({
                        type: 'removed',
                        query
                    });
                }
            }
        },
        {
            key: "clear",
            value: function clear() {
                _notifyManager.notifyManager.batch(()=>{
                    this.getAll().forEach((query)=>{
                        this.remove(query);
                    });
                });
            }
        },
        {
            key: "get",
            value: function get(queryHash) {
                return _class_private_field_loose_base._(this, _queries)[_queries].get(queryHash);
            }
        },
        {
            key: "getAll",
            value: function getAll() {
                return _to_consumable_array._(_class_private_field_loose_base._(this, _queries)[_queries].values());
            }
        },
        {
            key: "find",
            value: function find(filters) {
                var defaultedFilters = _object_spread._({
                    exact: true
                }, filters);
                return this.getAll().find((query)=>(0, _utils.matchQuery)(defaultedFilters, query));
            }
        },
        {
            key: "findAll",
            value: function findAll(ref) {
                var filters = ref === void 0 ? {} : ref;
                var queries = this.getAll();
                return Object.keys(filters).length > 0 ? queries.filter((query)=>(0, _utils.matchQuery)(filters, query)) : queries;
            }
        },
        {
            key: "notify",
            value: function notify(event) {
                _notifyManager.notifyManager.batch(()=>{
                    this.listeners.forEach((listener)=>{
                        listener(event);
                    });
                });
            }
        },
        {
            key: "onFocus",
            value: function onFocus() {
                _notifyManager.notifyManager.batch(()=>{
                    this.getAll().forEach((query)=>{
                        query.onFocus();
                    });
                });
            }
        },
        {
            key: "onOnline",
            value: function onOnline() {
                _notifyManager.notifyManager.batch(()=>{
                    this.getAll().forEach((query)=>{
                        query.onOnline();
                    });
                });
            }
        }
    ]);
    return QueryCache;
}(_subscribable.Subscribable);


}),
1322: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "QueryClient", ({
    enumerable: true,
    get: function() {
        return QueryClient;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _to_consumable_array = __webpack_require__(92716);
var _utils = __webpack_require__(78812);
var _queryCache = __webpack_require__(22633);
var _mutationCache = __webpack_require__(77280);
var _focusManager = __webpack_require__(51686);
var _onlineManager = __webpack_require__(58307);
var _notifyManager = __webpack_require__(99355);
var _infiniteQueryBehavior = __webpack_require__(71666);
var _queryCache1 = /*#__PURE__*/ _class_private_field_loose_key._("_queryCache"), _mutationCache1 = /*#__PURE__*/ _class_private_field_loose_key._("_mutationCache"), _defaultOptions = /*#__PURE__*/ _class_private_field_loose_key._("_defaultOptions"), _queryDefaults = /*#__PURE__*/ _class_private_field_loose_key._("_queryDefaults"), _mutationDefaults = /*#__PURE__*/ _class_private_field_loose_key._("_mutationDefaults"), _mountCount = /*#__PURE__*/ _class_private_field_loose_key._("_mountCount"), _unsubscribeFocus = /*#__PURE__*/ _class_private_field_loose_key._("_unsubscribeFocus"), _unsubscribeOnline = /*#__PURE__*/ _class_private_field_loose_key._("_unsubscribeOnline");
var QueryClient = /*#__PURE__*/ function() {
    "use strict";
    function QueryClient(ref) {
        var config = ref === void 0 ? {} : ref;
        _class_call_check._(this, QueryClient);
        Object.defineProperty(this, _queryCache1, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _mutationCache1, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _defaultOptions, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _queryDefaults, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _mutationDefaults, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _mountCount, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _unsubscribeFocus, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _unsubscribeOnline, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _queryCache1)[_queryCache1] = config.queryCache || new _queryCache.QueryCache();
        _class_private_field_loose_base._(this, _mutationCache1)[_mutationCache1] = config.mutationCache || new _mutationCache.MutationCache();
        _class_private_field_loose_base._(this, _defaultOptions)[_defaultOptions] = config.defaultOptions || {};
        _class_private_field_loose_base._(this, _queryDefaults)[_queryDefaults] = new Map();
        _class_private_field_loose_base._(this, _mutationDefaults)[_mutationDefaults] = new Map();
        _class_private_field_loose_base._(this, _mountCount)[_mountCount] = 0;
    }
    _create_class._(QueryClient, [
        {
            key: "mount",
            value: function mount() {
                _class_private_field_loose_base._(this, _mountCount)[_mountCount]++;
                if (_class_private_field_loose_base._(this, _mountCount)[_mountCount] !== 1) return;
                var _this = this;
                _class_private_field_loose_base._(this, _unsubscribeFocus)[_unsubscribeFocus] = _focusManager.focusManager.subscribe(/*#__PURE__*/ function() {
                    var _ref = _async_to_generator._(function*(focused) {
                        if (focused) {
                            yield _this.resumePausedMutations();
                            _class_private_field_loose_base._(_this, _queryCache1)[_queryCache1].onFocus();
                        }
                    });
                    return function(focused) {
                        return _ref.apply(this, arguments);
                    };
                }());
                var _this1 = this;
                _class_private_field_loose_base._(this, _unsubscribeOnline)[_unsubscribeOnline] = _onlineManager.onlineManager.subscribe(/*#__PURE__*/ function() {
                    var _ref = _async_to_generator._(function*(online) {
                        if (online) {
                            yield _this1.resumePausedMutations();
                            _class_private_field_loose_base._(_this1, _queryCache1)[_queryCache1].onOnline();
                        }
                    });
                    return function(online) {
                        return _ref.apply(this, arguments);
                    };
                }());
            }
        },
        {
            key: "unmount",
            value: function unmount() {
                var _this, _this1, _this2, _this3;
                _class_private_field_loose_base._(this, _mountCount)[_mountCount]--;
                if (_class_private_field_loose_base._(this, _mountCount)[_mountCount] !== 0) return;
                (_this = _class_private_field_loose_base._(_this1 = this, _unsubscribeFocus)[_unsubscribeFocus]) === null || _this === void 0 ? void 0 : _this.call(_this1);
                _class_private_field_loose_base._(this, _unsubscribeFocus)[_unsubscribeFocus] = undefined;
                (_this2 = _class_private_field_loose_base._(_this3 = this, _unsubscribeOnline)[_unsubscribeOnline]) === null || _this2 === void 0 ? void 0 : _this2.call(_this3);
                _class_private_field_loose_base._(this, _unsubscribeOnline)[_unsubscribeOnline] = undefined;
            }
        },
        {
            key: "isFetching",
            value: function isFetching(filters) {
                return _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].findAll(_object_spread_props._(_object_spread._({}, filters), {
                    fetchStatus: 'fetching'
                })).length;
            }
        },
        {
            key: "isMutating",
            value: function isMutating(filters) {
                return _class_private_field_loose_base._(this, _mutationCache1)[_mutationCache1].findAll(_object_spread_props._(_object_spread._({}, filters), {
                    status: 'pending'
                })).length;
            }
        },
        {
            /**
   * Imperative (non-reactive) way to retrieve data for a QueryKey.
   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.
   *
   * Hint: Do not use this function inside a component, because it won't receive updates.
   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.
   */ key: "getQueryData",
            value: function getQueryData(queryKey) {
                var _class_private_field_loose_base__queryCache_get;
                var options = this.defaultQueryOptions({
                    queryKey
                });
                return (_class_private_field_loose_base__queryCache_get = _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].get(options.queryHash)) === null || _class_private_field_loose_base__queryCache_get === void 0 ? void 0 : _class_private_field_loose_base__queryCache_get.state.data;
            }
        },
        {
            key: "ensureQueryData",
            value: function ensureQueryData(options) {
                var defaultedOptions = this.defaultQueryOptions(options);
                var query = _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].build(this, defaultedOptions);
                var cachedData = query.state.data;
                if (cachedData === undefined) {
                    return this.fetchQuery(options);
                }
                if (options.revalidateIfStale && query.isStaleByTime((0, _utils.resolveStaleTime)(defaultedOptions.staleTime, query))) {
                    void this.prefetchQuery(defaultedOptions);
                }
                return Promise.resolve(cachedData);
            }
        },
        {
            key: "getQueriesData",
            value: function getQueriesData(filters) {
                return _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].findAll(filters).map((ref)=>{
                    var queryKey = ref.queryKey, state = ref.state;
                    var data = state.data;
                    return [
                        queryKey,
                        data
                    ];
                });
            }
        },
        {
            key: "setQueryData",
            value: function setQueryData(queryKey, updater, options) {
                var defaultedOptions = this.defaultQueryOptions({
                    queryKey
                });
                var query = _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].get(defaultedOptions.queryHash);
                var prevData = query === null || query === void 0 ? void 0 : query.state.data;
                var data = (0, _utils.functionalUpdate)(updater, prevData);
                if (data === undefined) {
                    return undefined;
                }
                return _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].build(this, defaultedOptions).setData(data, _object_spread_props._(_object_spread._({}, options), {
                    manual: true
                }));
            }
        },
        {
            key: "setQueriesData",
            value: function setQueriesData(filters, updater, options) {
                return _notifyManager.notifyManager.batch(()=>_class_private_field_loose_base._(this, _queryCache1)[_queryCache1].findAll(filters).map((ref)=>{
                        var queryKey = ref.queryKey;
                        return [
                            queryKey,
                            this.setQueryData(queryKey, updater, options)
                        ];
                    }));
            }
        },
        {
            key: "getQueryState",
            value: function getQueryState(queryKey) {
                var _class_private_field_loose_base__queryCache_get;
                var options = this.defaultQueryOptions({
                    queryKey
                });
                return (_class_private_field_loose_base__queryCache_get = _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].get(options.queryHash)) === null || _class_private_field_loose_base__queryCache_get === void 0 ? void 0 : _class_private_field_loose_base__queryCache_get.state;
            }
        },
        {
            key: "removeQueries",
            value: function removeQueries(filters) {
                var queryCache = _class_private_field_loose_base._(this, _queryCache1)[_queryCache1];
                _notifyManager.notifyManager.batch(()=>{
                    queryCache.findAll(filters).forEach((query)=>{
                        queryCache.remove(query);
                    });
                });
            }
        },
        {
            key: "resetQueries",
            value: function resetQueries(filters, options) {
                var queryCache = _class_private_field_loose_base._(this, _queryCache1)[_queryCache1];
                return _notifyManager.notifyManager.batch(()=>{
                    queryCache.findAll(filters).forEach((query)=>{
                        query.reset();
                    });
                    return this.refetchQueries(_object_spread._({
                        type: 'active'
                    }, filters), options);
                });
            }
        },
        {
            key: "cancelQueries",
            value: function cancelQueries(filters, ref) {
                var cancelOptions = ref === void 0 ? {} : ref;
                var defaultedCancelOptions = _object_spread._({
                    revert: true
                }, cancelOptions);
                var promises = _notifyManager.notifyManager.batch(()=>_class_private_field_loose_base._(this, _queryCache1)[_queryCache1].findAll(filters).map((query)=>query.cancel(defaultedCancelOptions)));
                return Promise.all(promises).then(_utils.noop).catch(_utils.noop);
            }
        },
        {
            key: "invalidateQueries",
            value: function invalidateQueries(filters, ref) {
                var options = ref === void 0 ? {} : ref;
                return _notifyManager.notifyManager.batch(()=>{
                    _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].findAll(filters).forEach((query)=>{
                        query.invalidate();
                    });
                    if ((filters === null || filters === void 0 ? void 0 : filters.refetchType) === 'none') {
                        return Promise.resolve();
                    }
                    return this.refetchQueries(_object_spread_props._(_object_spread._({}, filters), {
                        type: (filters === null || filters === void 0 ? void 0 : filters.refetchType) ?? (filters === null || filters === void 0 ? void 0 : filters.type) ?? 'active'
                    }), options);
                });
            }
        },
        {
            key: "refetchQueries",
            value: function refetchQueries(filters, ref) {
                var options = ref === void 0 ? {} : ref;
                var fetchOptions = _object_spread_props._(_object_spread._({}, options), {
                    cancelRefetch: options.cancelRefetch ?? true
                });
                var promises = _notifyManager.notifyManager.batch(()=>_class_private_field_loose_base._(this, _queryCache1)[_queryCache1].findAll(filters).filter((query)=>!query.isDisabled()).map((query)=>{
                        var promise = query.fetch(undefined, fetchOptions);
                        if (!fetchOptions.throwOnError) {
                            promise = promise.catch(_utils.noop);
                        }
                        return query.state.fetchStatus === 'paused' ? Promise.resolve() : promise;
                    }));
                return Promise.all(promises).then(_utils.noop);
            }
        },
        {
            key: "fetchQuery",
            value: function fetchQuery(options) {
                var defaultedOptions = this.defaultQueryOptions(options);
                // https://github.com/tannerlinsley/react-query/issues/652
                if (defaultedOptions.retry === undefined) {
                    defaultedOptions.retry = false;
                }
                var query = _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].build(this, defaultedOptions);
                return query.isStaleByTime((0, _utils.resolveStaleTime)(defaultedOptions.staleTime, query)) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
            }
        },
        {
            key: "prefetchQuery",
            value: function prefetchQuery(options) {
                return this.fetchQuery(options).then(_utils.noop).catch(_utils.noop);
            }
        },
        {
            key: "fetchInfiniteQuery",
            value: function fetchInfiniteQuery(options) {
                options.behavior = (0, _infiniteQueryBehavior.infiniteQueryBehavior)(options.pages);
                return this.fetchQuery(options);
            }
        },
        {
            key: "prefetchInfiniteQuery",
            value: function prefetchInfiniteQuery(options) {
                return this.fetchInfiniteQuery(options).then(_utils.noop).catch(_utils.noop);
            }
        },
        {
            key: "ensureInfiniteQueryData",
            value: function ensureInfiniteQueryData(options) {
                options.behavior = (0, _infiniteQueryBehavior.infiniteQueryBehavior)(options.pages);
                return this.ensureQueryData(options);
            }
        },
        {
            key: "resumePausedMutations",
            value: function resumePausedMutations() {
                if (_onlineManager.onlineManager.isOnline()) {
                    return _class_private_field_loose_base._(this, _mutationCache1)[_mutationCache1].resumePausedMutations();
                }
                return Promise.resolve();
            }
        },
        {
            key: "getQueryCache",
            value: function getQueryCache() {
                return _class_private_field_loose_base._(this, _queryCache1)[_queryCache1];
            }
        },
        {
            key: "getMutationCache",
            value: function getMutationCache() {
                return _class_private_field_loose_base._(this, _mutationCache1)[_mutationCache1];
            }
        },
        {
            key: "getDefaultOptions",
            value: function getDefaultOptions() {
                return _class_private_field_loose_base._(this, _defaultOptions)[_defaultOptions];
            }
        },
        {
            key: "setDefaultOptions",
            value: function setDefaultOptions(options) {
                _class_private_field_loose_base._(this, _defaultOptions)[_defaultOptions] = options;
            }
        },
        {
            key: "setQueryDefaults",
            value: function setQueryDefaults(queryKey, options) {
                _class_private_field_loose_base._(this, _queryDefaults)[_queryDefaults].set((0, _utils.hashKey)(queryKey), {
                    queryKey,
                    defaultOptions: options
                });
            }
        },
        {
            key: "getQueryDefaults",
            value: function getQueryDefaults(queryKey) {
                var defaults = _to_consumable_array._(_class_private_field_loose_base._(this, _queryDefaults)[_queryDefaults].values());
                var result = {};
                defaults.forEach((queryDefault)=>{
                    if ((0, _utils.partialMatchKey)(queryKey, queryDefault.queryKey)) {
                        Object.assign(result, queryDefault.defaultOptions);
                    }
                });
                return result;
            }
        },
        {
            key: "setMutationDefaults",
            value: function setMutationDefaults(mutationKey, options) {
                _class_private_field_loose_base._(this, _mutationDefaults)[_mutationDefaults].set((0, _utils.hashKey)(mutationKey), {
                    mutationKey,
                    defaultOptions: options
                });
            }
        },
        {
            key: "getMutationDefaults",
            value: function getMutationDefaults(mutationKey) {
                var defaults = _to_consumable_array._(_class_private_field_loose_base._(this, _mutationDefaults)[_mutationDefaults].values());
                var result = {};
                defaults.forEach((queryDefault)=>{
                    if ((0, _utils.partialMatchKey)(mutationKey, queryDefault.mutationKey)) {
                        Object.assign(result, queryDefault.defaultOptions);
                    }
                });
                return result;
            }
        },
        {
            key: "defaultQueryOptions",
            value: function defaultQueryOptions(options) {
                if (options._defaulted) {
                    return options;
                }
                var defaultedOptions = _object_spread_props._(_object_spread._({}, _class_private_field_loose_base._(this, _defaultOptions)[_defaultOptions].queries, this.getQueryDefaults(options.queryKey), options), {
                    _defaulted: true
                });
                if (!defaultedOptions.queryHash) {
                    defaultedOptions.queryHash = (0, _utils.hashQueryKeyByOptions)(defaultedOptions.queryKey, defaultedOptions);
                }
                // dependent default values
                if (defaultedOptions.refetchOnReconnect === undefined) {
                    defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';
                }
                if (defaultedOptions.throwOnError === undefined) {
                    defaultedOptions.throwOnError = !!defaultedOptions.suspense;
                }
                if (!defaultedOptions.networkMode && defaultedOptions.persister) {
                    defaultedOptions.networkMode = 'offlineFirst';
                }
                if (defaultedOptions.queryFn === _utils.skipToken) {
                    defaultedOptions.enabled = false;
                }
                return defaultedOptions;
            }
        },
        {
            key: "defaultMutationOptions",
            value: function defaultMutationOptions(options) {
                if (options === null || options === void 0 ? void 0 : options._defaulted) {
                    return options;
                }
                return _object_spread_props._(_object_spread._({}, _class_private_field_loose_base._(this, _defaultOptions)[_defaultOptions].mutations, (options === null || options === void 0 ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey), options), {
                    _defaulted: true
                });
            }
        },
        {
            key: "clear",
            value: function clear() {
                _class_private_field_loose_base._(this, _queryCache1)[_queryCache1].clear();
                _class_private_field_loose_base._(this, _mutationCache1)[_mutationCache1].clear();
            }
        }
    ]);
    return QueryClient;
}();


}),
55854: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "QueryObserver", ({
    enumerable: true,
    get: function() {
        return QueryObserver;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _extends = __webpack_require__(38952);
var _inherits = __webpack_require__(82397);
var _object_destructuring_empty = __webpack_require__(52439);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _focusManager = __webpack_require__(51686);
var _notifyManager = __webpack_require__(99355);
var _query = __webpack_require__(15043);
var _subscribable = __webpack_require__(81254);
var _thenable = __webpack_require__(44513);
var _utils = __webpack_require__(78812);
var _client = /*#__PURE__*/ _class_private_field_loose_key._("_client"), _currentQuery = /*#__PURE__*/ _class_private_field_loose_key._("_currentQuery"), _currentQueryInitialState = /*#__PURE__*/ _class_private_field_loose_key._("_currentQueryInitialState"), _currentResult = /*#__PURE__*/ _class_private_field_loose_key._("_currentResult"), _currentResultState = /*#__PURE__*/ _class_private_field_loose_key._("_currentResultState"), _currentResultOptions = /*#__PURE__*/ _class_private_field_loose_key._("_currentResultOptions"), _currentThenable = /*#__PURE__*/ _class_private_field_loose_key._("_currentThenable"), _selectError = /*#__PURE__*/ _class_private_field_loose_key._("_selectError"), _selectFn = /*#__PURE__*/ _class_private_field_loose_key._("_selectFn"), _selectResult = /*#__PURE__*/ _class_private_field_loose_key._("_selectResult"), // This property keeps track of the last query with defined data.
// It will be used to pass the previous data and query to the placeholder function between renders.
_lastQueryWithDefinedData = /*#__PURE__*/ _class_private_field_loose_key._("_lastQueryWithDefinedData"), _staleTimeoutId = /*#__PURE__*/ _class_private_field_loose_key._("_staleTimeoutId"), _refetchIntervalId = /*#__PURE__*/ _class_private_field_loose_key._("_refetchIntervalId"), _currentRefetchInterval = /*#__PURE__*/ _class_private_field_loose_key._("_currentRefetchInterval"), _trackedProps = /*#__PURE__*/ _class_private_field_loose_key._("_trackedProps"), _executeFetch = /*#__PURE__*/ _class_private_field_loose_key._("_executeFetch"), _updateStaleTimeout = /*#__PURE__*/ _class_private_field_loose_key._("_updateStaleTimeout"), _computeRefetchInterval = /*#__PURE__*/ _class_private_field_loose_key._("_computeRefetchInterval"), _updateRefetchInterval = /*#__PURE__*/ _class_private_field_loose_key._("_updateRefetchInterval"), _updateTimers = /*#__PURE__*/ _class_private_field_loose_key._("_updateTimers"), _clearStaleTimeout = /*#__PURE__*/ _class_private_field_loose_key._("_clearStaleTimeout"), _clearRefetchInterval = /*#__PURE__*/ _class_private_field_loose_key._("_clearRefetchInterval"), _updateQuery = /*#__PURE__*/ _class_private_field_loose_key._("_updateQuery"), _notify = /*#__PURE__*/ _class_private_field_loose_key._("_notify");
var QueryObserver = /*#__PURE__*/ function(Subscribable) {
    "use strict";
    _inherits._(QueryObserver, Subscribable);
    function QueryObserver(client, options) {
        _class_call_check._(this, QueryObserver);
        var _this;
        _this = _call_super._(this, QueryObserver), Object.defineProperty(_this, _executeFetch, {
            value: executeFetch
        }), Object.defineProperty(_this, _updateStaleTimeout, {
            value: updateStaleTimeout
        }), Object.defineProperty(_this, _computeRefetchInterval, {
            value: computeRefetchInterval
        }), Object.defineProperty(_this, _updateRefetchInterval, {
            value: updateRefetchInterval
        }), Object.defineProperty(_this, _updateTimers, {
            value: updateTimers
        }), Object.defineProperty(_this, _clearStaleTimeout, {
            value: clearStaleTimeout
        }), Object.defineProperty(_this, _clearRefetchInterval, {
            value: clearRefetchInterval
        }), Object.defineProperty(_this, _updateQuery, {
            value: updateQuery
        }), Object.defineProperty(_this, _notify, {
            value: notify
        }), Object.defineProperty(_this, _client, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentQuery, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentQueryInitialState, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentResult, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentResultState, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentResultOptions, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentThenable, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _selectError, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _selectFn, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _selectResult, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _lastQueryWithDefinedData, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _staleTimeoutId, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _refetchIntervalId, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _currentRefetchInterval, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _trackedProps, {
            writable: true,
            value: void 0
        }), _this.options = options, _class_private_field_loose_base._(_this, _currentQuery)[_currentQuery] = undefined, _class_private_field_loose_base._(_this, _currentQueryInitialState)[_currentQueryInitialState] = undefined, _class_private_field_loose_base._(_this, _currentResult)[_currentResult] = undefined, _class_private_field_loose_base._(_this, _trackedProps)[_trackedProps] = new Set();
        _class_private_field_loose_base._(_this, _client)[_client] = client;
        _class_private_field_loose_base._(_this, _selectError)[_selectError] = null;
        _class_private_field_loose_base._(_this, _currentThenable)[_currentThenable] = (0, _thenable.pendingThenable)();
        if (!_this.options.experimental_prefetchInRender) {
            _class_private_field_loose_base._(_this, _currentThenable)[_currentThenable].reject(new Error('experimental_prefetchInRender feature flag is not enabled'));
        }
        _this.bindMethods();
        _this.setOptions(options);
        return _this;
    }
    _create_class._(QueryObserver, [
        {
            key: "bindMethods",
            value: function bindMethods() {
                this.refetch = this.refetch.bind(this);
            }
        },
        {
            key: "onSubscribe",
            value: function onSubscribe() {
                if (this.listeners.size === 1) {
                    _class_private_field_loose_base._(this, _currentQuery)[_currentQuery].addObserver(this);
                    if (shouldFetchOnMount(_class_private_field_loose_base._(this, _currentQuery)[_currentQuery], this.options)) {
                        _class_private_field_loose_base._(this, _executeFetch)[_executeFetch]();
                    } else {
                        this.updateResult();
                    }
                    _class_private_field_loose_base._(this, _updateTimers)[_updateTimers]();
                }
            }
        },
        {
            key: "onUnsubscribe",
            value: function onUnsubscribe() {
                if (!this.hasListeners()) {
                    this.destroy();
                }
            }
        },
        {
            key: "shouldFetchOnReconnect",
            value: function shouldFetchOnReconnect() {
                return shouldFetchOn(_class_private_field_loose_base._(this, _currentQuery)[_currentQuery], this.options, this.options.refetchOnReconnect);
            }
        },
        {
            key: "shouldFetchOnWindowFocus",
            value: function shouldFetchOnWindowFocus() {
                return shouldFetchOn(_class_private_field_loose_base._(this, _currentQuery)[_currentQuery], this.options, this.options.refetchOnWindowFocus);
            }
        },
        {
            key: "destroy",
            value: function destroy() {
                this.listeners = new Set();
                _class_private_field_loose_base._(this, _clearStaleTimeout)[_clearStaleTimeout]();
                _class_private_field_loose_base._(this, _clearRefetchInterval)[_clearRefetchInterval]();
                _class_private_field_loose_base._(this, _currentQuery)[_currentQuery].removeObserver(this);
            }
        },
        {
            key: "setOptions",
            value: function setOptions(options) {
                var prevOptions = this.options;
                var prevQuery = _class_private_field_loose_base._(this, _currentQuery)[_currentQuery];
                this.options = _class_private_field_loose_base._(this, _client)[_client].defaultQueryOptions(options);
                if (this.options.enabled !== undefined && typeof this.options.enabled !== 'boolean' && typeof this.options.enabled !== 'function' && typeof (0, _utils.resolveEnabled)(this.options.enabled, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) !== 'boolean') {
                    throw new Error('Expected enabled to be a boolean or a callback that returns a boolean');
                }
                _class_private_field_loose_base._(this, _updateQuery)[_updateQuery]();
                _class_private_field_loose_base._(this, _currentQuery)[_currentQuery].setOptions(this.options);
                if (prevOptions._defaulted && !(0, _utils.shallowEqualObjects)(this.options, prevOptions)) {
                    _class_private_field_loose_base._(this, _client)[_client].getQueryCache().notify({
                        type: 'observerOptionsUpdated',
                        query: _class_private_field_loose_base._(this, _currentQuery)[_currentQuery],
                        observer: this
                    });
                }
                var mounted = this.hasListeners();
                // Fetch if there are subscribers
                if (mounted && shouldFetchOptionally(_class_private_field_loose_base._(this, _currentQuery)[_currentQuery], prevQuery, this.options, prevOptions)) {
                    _class_private_field_loose_base._(this, _executeFetch)[_executeFetch]();
                }
                // Update result
                this.updateResult();
                // Update stale interval if needed
                if (mounted && (_class_private_field_loose_base._(this, _currentQuery)[_currentQuery] !== prevQuery || (0, _utils.resolveEnabled)(this.options.enabled, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) !== (0, _utils.resolveEnabled)(prevOptions.enabled, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) || (0, _utils.resolveStaleTime)(this.options.staleTime, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) !== (0, _utils.resolveStaleTime)(prevOptions.staleTime, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]))) {
                    _class_private_field_loose_base._(this, _updateStaleTimeout)[_updateStaleTimeout]();
                }
                var nextRefetchInterval = _class_private_field_loose_base._(this, _computeRefetchInterval)[_computeRefetchInterval]();
                // Update refetch interval if needed
                if (mounted && (_class_private_field_loose_base._(this, _currentQuery)[_currentQuery] !== prevQuery || (0, _utils.resolveEnabled)(this.options.enabled, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) !== (0, _utils.resolveEnabled)(prevOptions.enabled, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) || nextRefetchInterval !== _class_private_field_loose_base._(this, _currentRefetchInterval)[_currentRefetchInterval])) {
                    _class_private_field_loose_base._(this, _updateRefetchInterval)[_updateRefetchInterval](nextRefetchInterval);
                }
            }
        },
        {
            key: "getOptimisticResult",
            value: function getOptimisticResult(options) {
                var query = _class_private_field_loose_base._(this, _client)[_client].getQueryCache().build(_class_private_field_loose_base._(this, _client)[_client], options);
                var result = this.createResult(query, options);
                if (shouldAssignObserverCurrentProperties(this, result)) {
                    // this assigns the optimistic result to the current Observer
                    // because if the query function changes, useQuery will be performing
                    // an effect where it would fetch again.
                    // When the fetch finishes, we perform a deep data cloning in order
                    // to reuse objects references. This deep data clone is performed against
                    // the `observer.currentResult.data` property
                    // When QueryKey changes, we refresh the query and get new `optimistic`
                    // result, while we leave the `observer.currentResult`, so when new data
                    // arrives, it finds the old `observer.currentResult` which is related
                    // to the old QueryKey. Which means that currentResult and selectData are
                    // out of sync already.
                    // To solve this, we move the cursor of the currentResult every time
                    // an observer reads an optimistic value.
                    // When keeping the previous data, the result doesn't change until new
                    // data arrives.
                    _class_private_field_loose_base._(this, _currentResult)[_currentResult] = result;
                    _class_private_field_loose_base._(this, _currentResultOptions)[_currentResultOptions] = this.options;
                    _class_private_field_loose_base._(this, _currentResultState)[_currentResultState] = _class_private_field_loose_base._(this, _currentQuery)[_currentQuery].state;
                }
                return result;
            }
        },
        {
            key: "getCurrentResult",
            value: function getCurrentResult() {
                return _class_private_field_loose_base._(this, _currentResult)[_currentResult];
            }
        },
        {
            key: "trackResult",
            value: function trackResult(result, onPropTracked) {
                var trackedResult = {};
                Object.keys(result).forEach((key)=>{
                    Object.defineProperty(trackedResult, key, {
                        configurable: false,
                        enumerable: true,
                        get: ()=>{
                            this.trackProp(key);
                            onPropTracked === null || onPropTracked === void 0 ? void 0 : onPropTracked(key);
                            return result[key];
                        }
                    });
                });
                return trackedResult;
            }
        },
        {
            key: "trackProp",
            value: function trackProp(key) {
                _class_private_field_loose_base._(this, _trackedProps)[_trackedProps].add(key);
            }
        },
        {
            key: "getCurrentQuery",
            value: function getCurrentQuery() {
                return _class_private_field_loose_base._(this, _currentQuery)[_currentQuery];
            }
        },
        {
            key: "refetch",
            value: function refetch(ref) {
                var _param = ref === void 0 ? {} : ref;
                var options = _extends._({}, _object_destructuring_empty._(_param));
                return this.fetch(_object_spread._({}, options));
            }
        },
        {
            key: "fetchOptimistic",
            value: function fetchOptimistic(options) {
                var defaultedOptions = _class_private_field_loose_base._(this, _client)[_client].defaultQueryOptions(options);
                var query = _class_private_field_loose_base._(this, _client)[_client].getQueryCache().build(_class_private_field_loose_base._(this, _client)[_client], defaultedOptions);
                return query.fetch().then(()=>this.createResult(query, defaultedOptions));
            }
        },
        {
            key: "fetch",
            value: function fetch(fetchOptions) {
                return _class_private_field_loose_base._(this, _executeFetch)[_executeFetch](_object_spread_props._(_object_spread._({}, fetchOptions), {
                    cancelRefetch: fetchOptions.cancelRefetch ?? true
                })).then(()=>{
                    this.updateResult();
                    return _class_private_field_loose_base._(this, _currentResult)[_currentResult];
                });
            }
        },
        {
            key: "createResult",
            value: function createResult(query, options) {
                var prevQuery = _class_private_field_loose_base._(this, _currentQuery)[_currentQuery];
                var prevOptions = this.options;
                var prevResult = _class_private_field_loose_base._(this, _currentResult)[_currentResult];
                var prevResultState = _class_private_field_loose_base._(this, _currentResultState)[_currentResultState];
                var prevResultOptions = _class_private_field_loose_base._(this, _currentResultOptions)[_currentResultOptions];
                var queryChange = query !== prevQuery;
                var queryInitialState = queryChange ? query.state : _class_private_field_loose_base._(this, _currentQueryInitialState)[_currentQueryInitialState];
                var state = query.state;
                var newState = _object_spread._({}, state);
                var isPlaceholderData = false;
                var data;
                // Optimistically set result in fetching state if needed
                if (options._optimisticResults) {
                    var mounted = this.hasListeners();
                    var fetchOnMount = !mounted && shouldFetchOnMount(query, options);
                    var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
                    if (fetchOnMount || fetchOptionally) {
                        newState = _object_spread._({}, newState, (0, _query.fetchState)(state.data, query.options));
                    }
                    if (options._optimisticResults === 'isRestoring') {
                        newState.fetchStatus = 'idle';
                    }
                }
                var error = newState.error, errorUpdatedAt = newState.errorUpdatedAt, status = newState.status;
                // Per default, use query data
                data = newState.data;
                var skipSelect = false;
                // use placeholderData if needed
                if (options.placeholderData !== undefined && data === undefined && status === 'pending') {
                    var placeholderData;
                    // Memoize placeholder data
                    if ((prevResult === null || prevResult === void 0 ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions === null || prevResultOptions === void 0 ? void 0 : prevResultOptions.placeholderData)) {
                        placeholderData = prevResult.data;
                        // we have to skip select when reading this memoization
                        // because prevResult.data is already "selected"
                        skipSelect = true;
                    } else {
                        var _class_private_field_loose_base__lastQueryWithDefinedData;
                        // compute placeholderData
                        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData((_class_private_field_loose_base__lastQueryWithDefinedData = _class_private_field_loose_base._(this, _lastQueryWithDefinedData)[_lastQueryWithDefinedData]) === null || _class_private_field_loose_base__lastQueryWithDefinedData === void 0 ? void 0 : _class_private_field_loose_base__lastQueryWithDefinedData.state.data, _class_private_field_loose_base._(this, _lastQueryWithDefinedData)[_lastQueryWithDefinedData]) : options.placeholderData;
                    }
                    if (placeholderData !== undefined) {
                        status = 'success';
                        data = (0, _utils.replaceData)(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, placeholderData, options);
                        isPlaceholderData = true;
                    }
                }
                // Select data if needed
                // this also runs placeholderData through the select function
                if (options.select && data !== undefined && !skipSelect) {
                    // Memoize select result
                    if (prevResult && data === (prevResultState === null || prevResultState === void 0 ? void 0 : prevResultState.data) && options.select === _class_private_field_loose_base._(this, _selectFn)[_selectFn]) {
                        data = _class_private_field_loose_base._(this, _selectResult)[_selectResult];
                    } else {
                        try {
                            _class_private_field_loose_base._(this, _selectFn)[_selectFn] = options.select;
                            data = options.select(data);
                            data = (0, _utils.replaceData)(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, data, options);
                            _class_private_field_loose_base._(this, _selectResult)[_selectResult] = data;
                            _class_private_field_loose_base._(this, _selectError)[_selectError] = null;
                        } catch (selectError) {
                            _class_private_field_loose_base._(this, _selectError)[_selectError] = selectError;
                        }
                    }
                }
                if (_class_private_field_loose_base._(this, _selectError)[_selectError]) {
                    error = _class_private_field_loose_base._(this, _selectError)[_selectError];
                    data = _class_private_field_loose_base._(this, _selectResult)[_selectResult];
                    errorUpdatedAt = Date.now();
                    status = 'error';
                }
                var isFetching = newState.fetchStatus === 'fetching';
                var isPending = status === 'pending';
                var isError = status === 'error';
                var isLoading = isPending && isFetching;
                var hasData = data !== undefined;
                var result = {
                    status,
                    fetchStatus: newState.fetchStatus,
                    isPending,
                    isSuccess: status === 'success',
                    isError,
                    isInitialLoading: isLoading,
                    isLoading,
                    data,
                    dataUpdatedAt: newState.dataUpdatedAt,
                    error,
                    errorUpdatedAt,
                    failureCount: newState.fetchFailureCount,
                    failureReason: newState.fetchFailureReason,
                    errorUpdateCount: newState.errorUpdateCount,
                    isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,
                    isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,
                    isFetching,
                    isRefetching: isFetching && !isPending,
                    isLoadingError: isError && !hasData,
                    isPaused: newState.fetchStatus === 'paused',
                    isPlaceholderData,
                    isRefetchError: isError && hasData,
                    isStale: isStale(query, options),
                    refetch: this.refetch,
                    promise: _class_private_field_loose_base._(this, _currentThenable)[_currentThenable]
                };
                var nextResult = result;
                if (this.options.experimental_prefetchInRender) {
                    var finalizeThenableIfPossible = (thenable)=>{
                        if (nextResult.status === 'error') {
                            thenable.reject(nextResult.error);
                        } else if (nextResult.data !== undefined) {
                            thenable.resolve(nextResult.data);
                        }
                    };
                    /**
       * Create a new thenable and result promise when the results have changed
       */ var recreateThenable = ()=>{
                        var pending = _class_private_field_loose_base._(this, _currentThenable)[_currentThenable] = nextResult.promise = (0, _thenable.pendingThenable)();
                        finalizeThenableIfPossible(pending);
                    };
                    var prevThenable = _class_private_field_loose_base._(this, _currentThenable)[_currentThenable];
                    switch(prevThenable.status){
                        case 'pending':
                            // Finalize the previous thenable if it was pending
                            // and we are still observing the same query
                            if (query.queryHash === prevQuery.queryHash) {
                                finalizeThenableIfPossible(prevThenable);
                            }
                            break;
                        case 'fulfilled':
                            if (nextResult.status === 'error' || nextResult.data !== prevThenable.value) {
                                recreateThenable();
                            }
                            break;
                        case 'rejected':
                            if (nextResult.status !== 'error' || nextResult.error !== prevThenable.reason) {
                                recreateThenable();
                            }
                            break;
                    }
                }
                return nextResult;
            }
        },
        {
            key: "updateResult",
            value: function updateResult() {
                var prevResult = _class_private_field_loose_base._(this, _currentResult)[_currentResult];
                var nextResult = this.createResult(_class_private_field_loose_base._(this, _currentQuery)[_currentQuery], this.options);
                _class_private_field_loose_base._(this, _currentResultState)[_currentResultState] = _class_private_field_loose_base._(this, _currentQuery)[_currentQuery].state;
                _class_private_field_loose_base._(this, _currentResultOptions)[_currentResultOptions] = this.options;
                if (_class_private_field_loose_base._(this, _currentResultState)[_currentResultState].data !== undefined) {
                    _class_private_field_loose_base._(this, _lastQueryWithDefinedData)[_lastQueryWithDefinedData] = _class_private_field_loose_base._(this, _currentQuery)[_currentQuery];
                }
                // Only notify and update result if something has changed
                if ((0, _utils.shallowEqualObjects)(nextResult, prevResult)) {
                    return;
                }
                _class_private_field_loose_base._(this, _currentResult)[_currentResult] = nextResult;
                var shouldNotifyListeners = ()=>{
                    if (!prevResult) {
                        return true;
                    }
                    var notifyOnChangeProps = this.options.notifyOnChangeProps;
                    var notifyOnChangePropsValue = typeof notifyOnChangeProps === 'function' ? notifyOnChangeProps() : notifyOnChangeProps;
                    if (notifyOnChangePropsValue === 'all' || !notifyOnChangePropsValue && !_class_private_field_loose_base._(this, _trackedProps)[_trackedProps].size) {
                        return true;
                    }
                    var includedProps = new Set(notifyOnChangePropsValue ?? _class_private_field_loose_base._(this, _trackedProps)[_trackedProps]);
                    if (this.options.throwOnError) {
                        includedProps.add('error');
                    }
                    return Object.keys(_class_private_field_loose_base._(this, _currentResult)[_currentResult]).some((key)=>{
                        var typedKey = key;
                        var changed = _class_private_field_loose_base._(this, _currentResult)[_currentResult][typedKey] !== prevResult[typedKey];
                        return changed && includedProps.has(typedKey);
                    });
                };
                _class_private_field_loose_base._(this, _notify)[_notify]({
                    listeners: shouldNotifyListeners()
                });
            }
        },
        {
            key: "onQueryUpdate",
            value: function onQueryUpdate() {
                this.updateResult();
                if (this.hasListeners()) {
                    _class_private_field_loose_base._(this, _updateTimers)[_updateTimers]();
                }
            }
        }
    ]);
    return QueryObserver;
}(_subscribable.Subscribable);
function executeFetch(fetchOptions) {
    // Make sure we reference the latest query as the current one might have been removed
    _class_private_field_loose_base._(this, _updateQuery)[_updateQuery]();
    // Fetch
    var promise = _class_private_field_loose_base._(this, _currentQuery)[_currentQuery].fetch(this.options, fetchOptions);
    if (!(fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.throwOnError)) {
        promise = promise.catch(_utils.noop);
    }
    return promise;
}
function updateStaleTimeout() {
    _class_private_field_loose_base._(this, _clearStaleTimeout)[_clearStaleTimeout]();
    var staleTime = (0, _utils.resolveStaleTime)(this.options.staleTime, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]);
    if (_utils.isServer || _class_private_field_loose_base._(this, _currentResult)[_currentResult].isStale || !(0, _utils.isValidTimeout)(staleTime)) {
        return;
    }
    var time = (0, _utils.timeUntilStale)(_class_private_field_loose_base._(this, _currentResult)[_currentResult].dataUpdatedAt, staleTime);
    // The timeout is sometimes triggered 1 ms before the stale time expiration.
    // To mitigate this issue we always add 1 ms to the timeout.
    var timeout = time + 1;
    _class_private_field_loose_base._(this, _staleTimeoutId)[_staleTimeoutId] = setTimeout(()=>{
        if (!_class_private_field_loose_base._(this, _currentResult)[_currentResult].isStale) {
            this.updateResult();
        }
    }, timeout);
}
function computeRefetchInterval() {
    return (typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(_class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) : this.options.refetchInterval) ?? false;
}
function updateRefetchInterval(nextInterval) {
    _class_private_field_loose_base._(this, _clearRefetchInterval)[_clearRefetchInterval]();
    _class_private_field_loose_base._(this, _currentRefetchInterval)[_currentRefetchInterval] = nextInterval;
    if (_utils.isServer || (0, _utils.resolveEnabled)(this.options.enabled, _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) === false || !(0, _utils.isValidTimeout)(_class_private_field_loose_base._(this, _currentRefetchInterval)[_currentRefetchInterval]) || _class_private_field_loose_base._(this, _currentRefetchInterval)[_currentRefetchInterval] === 0) {
        return;
    }
    _class_private_field_loose_base._(this, _refetchIntervalId)[_refetchIntervalId] = setInterval(()=>{
        if (this.options.refetchIntervalInBackground || _focusManager.focusManager.isFocused()) {
            _class_private_field_loose_base._(this, _executeFetch)[_executeFetch]();
        }
    }, _class_private_field_loose_base._(this, _currentRefetchInterval)[_currentRefetchInterval]);
}
function updateTimers() {
    _class_private_field_loose_base._(this, _updateStaleTimeout)[_updateStaleTimeout]();
    _class_private_field_loose_base._(this, _updateRefetchInterval)[_updateRefetchInterval](_class_private_field_loose_base._(this, _computeRefetchInterval)[_computeRefetchInterval]());
}
function clearStaleTimeout() {
    if (_class_private_field_loose_base._(this, _staleTimeoutId)[_staleTimeoutId]) {
        clearTimeout(_class_private_field_loose_base._(this, _staleTimeoutId)[_staleTimeoutId]);
        _class_private_field_loose_base._(this, _staleTimeoutId)[_staleTimeoutId] = undefined;
    }
}
function clearRefetchInterval() {
    if (_class_private_field_loose_base._(this, _refetchIntervalId)[_refetchIntervalId]) {
        clearInterval(_class_private_field_loose_base._(this, _refetchIntervalId)[_refetchIntervalId]);
        _class_private_field_loose_base._(this, _refetchIntervalId)[_refetchIntervalId] = undefined;
    }
}
function updateQuery() {
    var query = _class_private_field_loose_base._(this, _client)[_client].getQueryCache().build(_class_private_field_loose_base._(this, _client)[_client], this.options);
    if (query === _class_private_field_loose_base._(this, _currentQuery)[_currentQuery]) {
        return;
    }
    var prevQuery = _class_private_field_loose_base._(this, _currentQuery)[_currentQuery];
    _class_private_field_loose_base._(this, _currentQuery)[_currentQuery] = query;
    _class_private_field_loose_base._(this, _currentQueryInitialState)[_currentQueryInitialState] = query.state;
    if (this.hasListeners()) {
        prevQuery === null || prevQuery === void 0 ? void 0 : prevQuery.removeObserver(this);
        query.addObserver(this);
    }
}
function notify(notifyOptions) {
    _notifyManager.notifyManager.batch(()=>{
        // First, trigger the listeners
        if (notifyOptions.listeners) {
            this.listeners.forEach((listener)=>{
                listener(_class_private_field_loose_base._(this, _currentResult)[_currentResult]);
            });
        }
        // Then the cache listeners
        _class_private_field_loose_base._(this, _client)[_client].getQueryCache().notify({
            query: _class_private_field_loose_base._(this, _currentQuery)[_currentQuery],
            type: 'observerResultsUpdated'
        });
    });
}
function shouldLoadOnMount(query, options) {
    return (0, _utils.resolveEnabled)(options.enabled, query) !== false && query.state.data === undefined && !(query.state.status === 'error' && options.retryOnMount === false);
}
function shouldFetchOnMount(query, options) {
    return shouldLoadOnMount(query, options) || query.state.data !== undefined && shouldFetchOn(query, options, options.refetchOnMount);
}
function shouldFetchOn(query, options, field) {
    if ((0, _utils.resolveEnabled)(options.enabled, query) !== false) {
        var value = typeof field === 'function' ? field(query) : field;
        return value === 'always' || value !== false && isStale(query, options);
    }
    return false;
}
function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
    return (query !== prevQuery || (0, _utils.resolveEnabled)(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);
}
function isStale(query, options) {
    return (0, _utils.resolveEnabled)(options.enabled, query) !== false && query.isStaleByTime((0, _utils.resolveStaleTime)(options.staleTime, query));
}
// this function would decide if we will update the observer's 'current'
// properties after an optimistic reading via getOptimisticResult
function shouldAssignObserverCurrentProperties(observer, optimisticResult) {
    // if the newly created result isn't what the observer is holding as current,
    // then we'll need to update the properties as well
    if (!(0, _utils.shallowEqualObjects)(observer.getCurrentResult(), optimisticResult)) {
        return true;
    }
    // basically, just keep previous properties if nothing changed
    return false;
}


}),
61893: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Removable", ({
    enumerable: true,
    get: function() {
        return Removable;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _utils = __webpack_require__(78812);
var _gcTimeout = /*#__PURE__*/ _class_private_field_loose_key._("_gcTimeout");
var Removable = /*#__PURE__*/ function() {
    "use strict";
    function Removable() {
        _class_call_check._(this, Removable);
        Object.defineProperty(this, _gcTimeout, {
            writable: true,
            value: void 0
        });
    }
    _create_class._(Removable, [
        {
            key: "destroy",
            value: function destroy() {
                this.clearGcTimeout();
            }
        },
        {
            key: "scheduleGc",
            value: function scheduleGc() {
                this.clearGcTimeout();
                if ((0, _utils.isValidTimeout)(this.gcTime)) {
                    _class_private_field_loose_base._(this, _gcTimeout)[_gcTimeout] = setTimeout(()=>{
                        this.optionalRemove();
                    }, this.gcTime);
                }
            }
        },
        {
            key: "updateGcTime",
            value: function updateGcTime(newGcTime) {
                // Default to 5 minutes (Infinity for server-side) if no gcTime is set
                this.gcTime = Math.max(this.gcTime || 0, newGcTime ?? (_utils.isServer ? Infinity : 5 * 60 * 1000));
            }
        },
        {
            key: "clearGcTimeout",
            value: function clearGcTimeout() {
                if (_class_private_field_loose_base._(this, _gcTimeout)[_gcTimeout]) {
                    clearTimeout(_class_private_field_loose_base._(this, _gcTimeout)[_gcTimeout]);
                    _class_private_field_loose_base._(this, _gcTimeout)[_gcTimeout] = undefined;
                }
            }
        }
    ]);
    return Removable;
}();


}),
71984: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CancelledError: function() {
        return CancelledError;
    },
    canFetch: function() {
        return canFetch;
    },
    createRetryer: function() {
        return createRetryer;
    },
    isCancelledError: function() {
        return isCancelledError;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _inherits = __webpack_require__(82397);
var _wrap_native_super = __webpack_require__(30753);
var _focusManager = __webpack_require__(51686);
var _onlineManager = __webpack_require__(58307);
var _thenable = __webpack_require__(44513);
var _utils = __webpack_require__(78812);
function defaultRetryDelay(failureCount) {
    return Math.min(1000 * 2 ** failureCount, 30000);
}
function canFetch(networkMode) {
    return (networkMode ?? 'online') === 'online' ? _onlineManager.onlineManager.isOnline() : true;
}
var CancelledError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _inherits._(CancelledError, Error1);
    function CancelledError(options) {
        _class_call_check._(this, CancelledError);
        var _this;
        _this = _call_super._(this, CancelledError, [
            'CancelledError'
        ]);
        _this.revert = options === null || options === void 0 ? void 0 : options.revert;
        _this.silent = options === null || options === void 0 ? void 0 : options.silent;
        return _this;
    }
    return CancelledError;
}(_wrap_native_super._(Error));
function isCancelledError(value) {
    return value instanceof CancelledError;
}
function createRetryer(config) {
    var isRetryCancelled = false;
    var failureCount = 0;
    var isResolved = false;
    var continueFn;
    var thenable = (0, _thenable.pendingThenable)();
    var cancel = (cancelOptions)=>{
        if (!isResolved) {
            var _config_abort;
            reject(new CancelledError(cancelOptions));
            (_config_abort = config.abort) === null || _config_abort === void 0 ? void 0 : _config_abort.call(config);
        }
    };
    var cancelRetry = ()=>{
        isRetryCancelled = true;
    };
    var continueRetry = ()=>{
        isRetryCancelled = false;
    };
    var canContinue = ()=>_focusManager.focusManager.isFocused() && (config.networkMode === 'always' || _onlineManager.onlineManager.isOnline()) && config.canRun();
    var canStart = ()=>canFetch(config.networkMode) && config.canRun();
    var resolve = (value)=>{
        if (!isResolved) {
            var _config_onSuccess;
            isResolved = true;
            (_config_onSuccess = config.onSuccess) === null || _config_onSuccess === void 0 ? void 0 : _config_onSuccess.call(config, value);
            continueFn === null || continueFn === void 0 ? void 0 : continueFn();
            thenable.resolve(value);
        }
    };
    var reject = (value)=>{
        if (!isResolved) {
            var _config_onError;
            isResolved = true;
            (_config_onError = config.onError) === null || _config_onError === void 0 ? void 0 : _config_onError.call(config, value);
            continueFn === null || continueFn === void 0 ? void 0 : continueFn();
            thenable.reject(value);
        }
    };
    var pause = ()=>{
        return new Promise((continueResolve)=>{
            var _config_onPause;
            continueFn = (value)=>{
                if (isResolved || canContinue()) {
                    continueResolve(value);
                }
            };
            (_config_onPause = config.onPause) === null || _config_onPause === void 0 ? void 0 : _config_onPause.call(config);
        }).then(()=>{
            continueFn = undefined;
            if (!isResolved) {
                var _config_onContinue;
                (_config_onContinue = config.onContinue) === null || _config_onContinue === void 0 ? void 0 : _config_onContinue.call(config);
            }
        });
    };
    // Create loop function
    var run = ()=>{
        // Do nothing if already resolved
        if (isResolved) {
            return;
        }
        var promiseOrValue;
        // we can re-use config.initialPromise on the first call of run()
        var initialPromise = failureCount === 0 ? config.initialPromise : undefined;
        // Execute query
        try {
            promiseOrValue = initialPromise ?? config.fn();
        } catch (error) {
            promiseOrValue = Promise.reject(error);
        }
        Promise.resolve(promiseOrValue).then(resolve).catch((error)=>{
            var // Notify on fail
            _config_onFail;
            // Stop if the fetch is already resolved
            if (isResolved) {
                return;
            }
            // Do we need to retry the request?
            var retry = config.retry ?? (_utils.isServer ? 0 : 3);
            var retryDelay = config.retryDelay ?? defaultRetryDelay;
            var delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;
            var shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);
            if (isRetryCancelled || !shouldRetry) {
                // We are done if the query does not need to be retried
                reject(error);
                return;
            }
            failureCount++;
            (_config_onFail = config.onFail) === null || _config_onFail === void 0 ? void 0 : _config_onFail.call(config, failureCount, error);
            // Delay
            (0, _utils.sleep)(delay)// Pause if the document is not visible or when the device is offline
            .then(()=>{
                return canContinue() ? undefined : pause();
            }).then(()=>{
                if (isRetryCancelled) {
                    reject(error);
                } else {
                    run();
                }
            });
        });
    };
    return {
        promise: thenable,
        cancel,
        continue: ()=>{
            continueFn === null || continueFn === void 0 ? void 0 : continueFn();
            return thenable;
        },
        cancelRetry,
        continueRetry,
        canStart,
        start: ()=>{
            // Start loop
            if (canStart()) {
                run();
            } else {
                pause().then(run);
            }
            return thenable;
        }
    };
}


}),
7094: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "streamedQuery", ({
    enumerable: true,
    get: function() {
        return streamedQuery;
    }
}));
var _async_iterator = __webpack_require__(64616);
var _async_to_generator = __webpack_require__(11809);
function streamedQuery(ref) {
    var queryFn = ref.queryFn, refetchMode = ref.refetchMode;
    return /*#__PURE__*/ function() {
        var _ref = _async_to_generator._(function*(context) {
            if (refetchMode !== 'append') {
                var query = context.client.getQueryCache().find({
                    queryKey: context.queryKey,
                    exact: true
                });
                if (query && query.state.data !== undefined) {
                    query.setState({
                        status: 'pending',
                        data: undefined,
                        error: null,
                        fetchStatus: 'fetching'
                    });
                }
            }
            var stream = yield queryFn(context);
            {
                var _iteratorAbruptCompletion = false, _didIteratorError = false, _iteratorError;
                try {
                    var _loop = function() {
                        var _value = _step.value;
                        var chunk = _value;
                        if (context.signal.aborted) {
                            return "break";
                        }
                        context.client.setQueryData(context.queryKey, (ref)=>{
                            var prev = ref === void 0 ? [] : ref;
                            return prev.concat(chunk);
                        });
                    };
                    for(var _iterator = _async_iterator._(stream), _step; _iteratorAbruptCompletion = !(_step = yield _iterator.next()).done; _iteratorAbruptCompletion = false){
                        var _ret = _loop();
                        if (_ret === "break") break;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (_iteratorAbruptCompletion && _iterator.return != null) {
                            yield _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            return context.client.getQueryData(context.queryKey);
        });
        return function(context) {
            return _ref.apply(this, arguments);
        };
    }();
}


}),
81254: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Subscribable", ({
    enumerable: true,
    get: function() {
        return Subscribable;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var Subscribable = /*#__PURE__*/ function() {
    "use strict";
    function Subscribable() {
        _class_call_check._(this, Subscribable);
        this.listeners = new Set();
        this.subscribe = this.subscribe.bind(this);
    }
    _create_class._(Subscribable, [
        {
            key: "subscribe",
            value: function subscribe(listener) {
                this.listeners.add(listener);
                this.onSubscribe();
                return ()=>{
                    this.listeners.delete(listener);
                    this.onUnsubscribe();
                };
            }
        },
        {
            key: "hasListeners",
            value: function hasListeners() {
                return this.listeners.size > 0;
            }
        },
        {
            key: "onSubscribe",
            value: function onSubscribe() {
            // Do nothing
            }
        },
        {
            key: "onUnsubscribe",
            value: function onUnsubscribe() {
            // Do nothing
            }
        }
    ]);
    return Subscribable;
}();


}),
44513: (function (__unused_webpack_module, exports) {
/**
 * Thenable types which matches React's types for promises
 *
 * React seemingly uses `.status`, `.value` and `.reason` properties on a promises to optimistically unwrap data from promises
 *
 * @see https://github.com/facebook/react/blob/main/packages/shared/ReactTypes.js#L112-L138
 * @see https://github.com/facebook/react/blob/4f604941569d2e8947ce1460a0b2997e835f37b9/packages/react-debug-tools/src/ReactDebugHooks.js#L224-L227
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "pendingThenable", ({
    enumerable: true,
    get: function() {
        return pendingThenable;
    }
}));
function pendingThenable() {
    var resolve;
    var reject;
    // this could use `Promise.withResolvers()` in the future
    var thenable = new Promise((_resolve, _reject)=>{
        resolve = _resolve;
        reject = _reject;
    });
    thenable.status = 'pending';
    thenable.catch(()=>{
    // prevent unhandled rejection errors
    });
    function finalize(data) {
        Object.assign(thenable, data);
        // clear pending props props to avoid calling them twice
        delete thenable.resolve;
        delete thenable.reject;
    }
    thenable.resolve = (value)=>{
        finalize({
            status: 'fulfilled',
            value
        });
        resolve(value);
    };
    thenable.reject = (reason)=>{
        finalize({
            status: 'rejected',
            reason
        });
        reject(reason);
    };
    return thenable;
}


}),
11267: (function (__unused_webpack_module, exports) {
/* istanbul ignore file */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    dataTagErrorSymbol: function() {
        return dataTagErrorSymbol;
    },
    dataTagSymbol: function() {
        return dataTagSymbol;
    },
    unsetMarker: function() {
        return unsetMarker;
    }
});
var dataTagSymbol = Symbol('dataTagSymbol');
var dataTagErrorSymbol = Symbol('dataTagErrorSymbol');
var unsetMarker = Symbol('unsetMarker');


}),
78812: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addToEnd: function() {
        return addToEnd;
    },
    addToStart: function() {
        return addToStart;
    },
    ensureQueryFn: function() {
        return ensureQueryFn;
    },
    functionalUpdate: function() {
        return functionalUpdate;
    },
    hashKey: function() {
        return hashKey;
    },
    hashQueryKeyByOptions: function() {
        return hashQueryKeyByOptions;
    },
    isPlainArray: function() {
        return isPlainArray;
    },
    isPlainObject: function() {
        return isPlainObject;
    },
    isServer: function() {
        return isServer;
    },
    isValidTimeout: function() {
        return isValidTimeout;
    },
    keepPreviousData: function() {
        return keepPreviousData;
    },
    matchMutation: function() {
        return matchMutation;
    },
    matchQuery: function() {
        return matchQuery;
    },
    noop: function() {
        return noop;
    },
    partialMatchKey: function() {
        return partialMatchKey;
    },
    replaceData: function() {
        return replaceData;
    },
    replaceEqualDeep: function() {
        return replaceEqualDeep;
    },
    resolveEnabled: function() {
        return resolveEnabled;
    },
    resolveStaleTime: function() {
        return resolveStaleTime;
    },
    shallowEqualObjects: function() {
        return shallowEqualObjects;
    },
    skipToken: function() {
        return skipToken;
    },
    sleep: function() {
        return sleep;
    },
    timeUntilStale: function() {
        return timeUntilStale;
    }
});
var _to_consumable_array = __webpack_require__(92716);
var isServer = typeof window === 'undefined' || 'Deno' in globalThis;
function noop() {}
function functionalUpdate(updater, input) {
    return typeof updater === 'function' ? updater(input) : updater;
}
function isValidTimeout(value) {
    return typeof value === 'number' && value >= 0 && value !== Infinity;
}
function timeUntilStale(updatedAt, staleTime) {
    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function resolveStaleTime(staleTime, query) {
    return typeof staleTime === 'function' ? staleTime(query) : staleTime;
}
function resolveEnabled(enabled, query) {
    return typeof enabled === 'function' ? enabled(query) : enabled;
}
function matchQuery(filters, query) {
    var _filters_type = filters.type, type = _filters_type === void 0 ? 'all' : _filters_type, exact = filters.exact, fetchStatus = filters.fetchStatus, predicate = filters.predicate, queryKey = filters.queryKey, stale = filters.stale;
    if (queryKey) {
        if (exact) {
            if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
                return false;
            }
        } else if (!partialMatchKey(query.queryKey, queryKey)) {
            return false;
        }
    }
    if (type !== 'all') {
        var isActive = query.isActive();
        if (type === 'active' && !isActive) {
            return false;
        }
        if (type === 'inactive' && isActive) {
            return false;
        }
    }
    if (typeof stale === 'boolean' && query.isStale() !== stale) {
        return false;
    }
    if (fetchStatus && fetchStatus !== query.state.fetchStatus) {
        return false;
    }
    if (predicate && !predicate(query)) {
        return false;
    }
    return true;
}
function matchMutation(filters, mutation) {
    var exact = filters.exact, status = filters.status, predicate = filters.predicate, mutationKey = filters.mutationKey;
    if (mutationKey) {
        if (!mutation.options.mutationKey) {
            return false;
        }
        if (exact) {
            if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {
                return false;
            }
        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
            return false;
        }
    }
    if (status && mutation.state.status !== status) {
        return false;
    }
    if (predicate && !predicate(mutation)) {
        return false;
    }
    return true;
}
function hashQueryKeyByOptions(queryKey, options) {
    var hashFn = (options === null || options === void 0 ? void 0 : options.queryKeyHashFn) || hashKey;
    return hashFn(queryKey);
}
function hashKey(queryKey) {
    return JSON.stringify(queryKey, (_, val)=>isPlainObject(val) ? Object.keys(val).sort().reduce((result, key)=>{
            result[key] = val[key];
            return result;
        }, {}) : val);
}
function partialMatchKey(a, b) {
    if (a === b) {
        return true;
    }
    if (typeof a !== typeof b) {
        return false;
    }
    if (a && b && typeof a === 'object' && typeof b === 'object') {
        return Object.keys(b).every((key)=>partialMatchKey(a[key], b[key]));
    }
    return false;
}
function replaceEqualDeep(a, b) {
    if (a === b) {
        return a;
    }
    var array = isPlainArray(a) && isPlainArray(b);
    if (array || isPlainObject(a) && isPlainObject(b)) {
        var aItems = array ? a : Object.keys(a);
        var aSize = aItems.length;
        var bItems = array ? b : Object.keys(b);
        var bSize = bItems.length;
        var copy = array ? [] : {};
        var equalItems = 0;
        for(var i = 0; i < bSize; i++){
            var key = array ? i : bItems[i];
            if ((!array && aItems.includes(key) || array) && a[key] === undefined && b[key] === undefined) {
                copy[key] = undefined;
                equalItems++;
            } else {
                copy[key] = replaceEqualDeep(a[key], b[key]);
                if (copy[key] === a[key] && a[key] !== undefined) {
                    equalItems++;
                }
            }
        }
        return aSize === bSize && equalItems === aSize ? a : copy;
    }
    return b;
}
function shallowEqualObjects(a, b) {
    if (!b || Object.keys(a).length !== Object.keys(b).length) {
        return false;
    }
    for(var key in a){
        if (a[key] !== b[key]) {
            return false;
        }
    }
    return true;
}
function isPlainArray(value) {
    return Array.isArray(value) && value.length === Object.keys(value).length;
}
function isPlainObject(o) {
    if (!hasObjectPrototype(o)) {
        return false;
    }
    // If has no constructor
    var ctor = o.constructor;
    if (ctor === undefined) {
        return true;
    }
    // If has modified prototype
    var prot = ctor.prototype;
    if (!hasObjectPrototype(prot)) {
        return false;
    }
    // If constructor does not have an Object-specific method
    if (!prot.hasOwnProperty('isPrototypeOf')) {
        return false;
    }
    // Handles Objects created by Object.create(<arbitrary prototype>)
    if (Object.getPrototypeOf(o) !== Object.prototype) {
        return false;
    }
    // Most likely a plain Object
    return true;
}
function hasObjectPrototype(o) {
    return Object.prototype.toString.call(o) === '[object Object]';
}
function sleep(timeout) {
    return new Promise((resolve)=>{
        setTimeout(resolve, timeout);
    });
}
function replaceData(prevData, data, options) {
    if (typeof options.structuralSharing === 'function') {
        return options.structuralSharing(prevData, data);
    } else if (options.structuralSharing !== false) {
        if (false) {}
        // Structurally share data between prev and new data if needed
        return replaceEqualDeep(prevData, data);
    }
    return data;
}
function keepPreviousData(previousData) {
    return previousData;
}
function addToEnd(items, item, ref) {
    var max = ref === void 0 ? 0 : ref;
    var newItems = _to_consumable_array._(items).concat([
        item
    ]);
    return max && newItems.length > max ? newItems.slice(1) : newItems;
}
function addToStart(items, item, ref) {
    var max = ref === void 0 ? 0 : ref;
    var newItems = [
        item
    ].concat(_to_consumable_array._(items));
    return max && newItems.length > max ? newItems.slice(0, -1) : newItems;
}
var skipToken = Symbol();
function ensureQueryFn(options, fetchOptions) {
    if (false) {}
    // if we attempt to retry a fetch that was triggered from an initialPromise
    // when we don't have a queryFn yet, we can't retry, so we just return the already rejected initialPromise
    // if an observer has already mounted, we will be able to retry with that queryFn
    if (!options.queryFn && (fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.initialPromise)) {
        return ()=>fetchOptions.initialPromise;
    }
    if (!options.queryFn || options.queryFn === skipToken) {
        return ()=>Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));
    }
    return options.queryFn;
}


}),
13928: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ensurePreventErrorBoundaryRetry: function() {
        return ensurePreventErrorBoundaryRetry;
    },
    getHasError: function() {
        return getHasError;
    },
    useClearResetErrorBoundary: function() {
        return useClearResetErrorBoundary;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _utils = __webpack_require__(84010);
var ensurePreventErrorBoundaryRetry = (options, errorResetBoundary)=>{
    if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {
        // Prevent retrying failed query if the error boundary has not been reset yet
        if (!errorResetBoundary.isReset()) {
            options.retryOnMount = false;
        }
    }
};
var useClearResetErrorBoundary = (errorResetBoundary)=>{
    _react.useEffect(()=>{
        errorResetBoundary.clearReset();
    }, [
        errorResetBoundary
    ]);
};
var getHasError = (ref)=>{
    var result = ref.result, errorResetBoundary = ref.errorResetBoundary, throwOnError = ref.throwOnError, query = ref.query, suspense = ref.suspense;
    return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && (suspense && result.data === undefined || (0, _utils.shouldThrowError)(throwOnError, [
        result.error,
        query
    ]));
};


}),
7897: (function (__unused_webpack_module, exports, __webpack_require__) {
/* istanbul ignore file */ // Re-export core
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    HydrationBoundary: function() {
        return _HydrationBoundary.HydrationBoundary;
    },
    IsRestoringProvider: function() {
        return _isRestoring.IsRestoringProvider;
    },
    QueryClientContext: function() {
        return _QueryClientProvider.QueryClientContext;
    },
    QueryClientProvider: function() {
        return _QueryClientProvider.QueryClientProvider;
    },
    QueryErrorResetBoundary: function() {
        return _QueryErrorResetBoundary.QueryErrorResetBoundary;
    },
    infiniteQueryOptions: function() {
        return _infiniteQueryOptions.infiniteQueryOptions;
    },
    queryOptions: function() {
        return _queryOptions.queryOptions;
    },
    useInfiniteQuery: function() {
        return _useInfiniteQuery.useInfiniteQuery;
    },
    useIsFetching: function() {
        return _useIsFetching.useIsFetching;
    },
    useIsMutating: function() {
        return _useMutationState.useIsMutating;
    },
    useIsRestoring: function() {
        return _isRestoring.useIsRestoring;
    },
    useMutation: function() {
        return _useMutation.useMutation;
    },
    useMutationState: function() {
        return _useMutationState.useMutationState;
    },
    usePrefetchInfiniteQuery: function() {
        return _usePrefetchInfiniteQuery.usePrefetchInfiniteQuery;
    },
    usePrefetchQuery: function() {
        return _usePrefetchQuery.usePrefetchQuery;
    },
    useQueries: function() {
        return _useQueries.useQueries;
    },
    useQuery: function() {
        return _useQuery.useQuery;
    },
    useQueryClient: function() {
        return _QueryClientProvider.useQueryClient;
    },
    useQueryErrorResetBoundary: function() {
        return _QueryErrorResetBoundary.useQueryErrorResetBoundary;
    },
    useSuspenseInfiniteQuery: function() {
        return _useSuspenseInfiniteQuery.useSuspenseInfiniteQuery;
    },
    useSuspenseQueries: function() {
        return _useSuspenseQueries.useSuspenseQueries;
    },
    useSuspenseQuery: function() {
        return _useSuspenseQuery.useSuspenseQuery;
    }
});
var _export_star = __webpack_require__(4084);
_export_star._(__webpack_require__(85821), exports);
_export_star._(__webpack_require__(34959), exports);
var _useQueries = __webpack_require__(61408);
var _useQuery = __webpack_require__(32902);
var _useSuspenseQuery = __webpack_require__(15525);
var _useSuspenseInfiniteQuery = __webpack_require__(55462);
var _useSuspenseQueries = __webpack_require__(92423);
var _usePrefetchQuery = __webpack_require__(52849);
var _usePrefetchInfiniteQuery = __webpack_require__(4795);
var _queryOptions = __webpack_require__(82643);
var _infiniteQueryOptions = __webpack_require__(49343);
var _QueryClientProvider = __webpack_require__(45222);
var _HydrationBoundary = __webpack_require__(37617);
var _QueryErrorResetBoundary = __webpack_require__(59005);
var _useIsFetching = __webpack_require__(72573);
var _useMutationState = __webpack_require__(6864);
var _useMutation = __webpack_require__(81115);
var _useInfiniteQuery = __webpack_require__(88305);
var _isRestoring = __webpack_require__(78063);


}),
49343: (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "infiniteQueryOptions", ({
    enumerable: true,
    get: function() {
        return infiniteQueryOptions;
    }
}));
function infiniteQueryOptions(options) {
    return options;
}


}),
78063: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    IsRestoringProvider: function() {
        return IsRestoringProvider;
    },
    useIsRestoring: function() {
        return useIsRestoring;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var IsRestoringContext = _react.createContext(false);
var useIsRestoring = ()=>_react.useContext(IsRestoringContext);
var IsRestoringProvider = IsRestoringContext.Provider;


}),
82643: (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "queryOptions", ({
    enumerable: true,
    get: function() {
        return queryOptions;
    }
}));
function queryOptions(options) {
    return options;
}


}),
54324: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    defaultThrowOnError: function() {
        return defaultThrowOnError;
    },
    ensureSuspenseTimers: function() {
        return ensureSuspenseTimers;
    },
    fetchOptimistic: function() {
        return fetchOptimistic;
    },
    shouldSuspend: function() {
        return shouldSuspend;
    },
    willFetch: function() {
        return willFetch;
    }
});
var _to_consumable_array = __webpack_require__(92716);
var defaultThrowOnError = (_error, query)=>query.state.data === undefined;
var ensureSuspenseTimers = (defaultedOptions)=>{
    var originalStaleTime = defaultedOptions.staleTime;
    if (defaultedOptions.suspense) {
        // Handle staleTime to ensure minimum 1000ms in Suspense mode
        // This prevents unnecessary refetching when components remount after suspending
        defaultedOptions.staleTime = typeof originalStaleTime === 'function' ? (...args)=>Math.max(originalStaleTime.apply(void 0, _to_consumable_array._(args)), 1000) : Math.max(originalStaleTime ?? 1000, 1000);
        if (typeof defaultedOptions.gcTime === 'number') {
            defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000);
        }
    }
};
var willFetch = (result, isRestoring)=>result.isLoading && result.isFetching && !isRestoring;
var shouldSuspend = (defaultedOptions, result)=>(defaultedOptions === null || defaultedOptions === void 0 ? void 0 : defaultedOptions.suspense) && result.isPending;
var fetchOptimistic = (defaultedOptions, observer, errorResetBoundary)=>observer.fetchOptimistic(defaultedOptions).catch(()=>{
        errorResetBoundary.clearReset();
    });


}),
34959: (function (__unused_webpack_module, exports) {
/* istanbul ignore file */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));


}),
13173: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useBaseQuery", ({
    enumerable: true,
    get: function() {
        return useBaseQuery;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _querycore = __webpack_require__(85821);
var _QueryClientProvider = __webpack_require__(45222);
var _QueryErrorResetBoundary = __webpack_require__(59005);
var _errorBoundaryUtils = __webpack_require__(13928);
var _isRestoring = __webpack_require__(78063);
var _suspense = __webpack_require__(54324);
var _utils = __webpack_require__(84010);
function useBaseQuery(options, Observer, queryClient) {
    var _client_getDefaultOptions_queries__experimental_beforeQuery, _client_getDefaultOptions_queries, _client_getDefaultOptions_queries__experimental_afterQuery, _client_getDefaultOptions_queries1;
    if (false) {}
    var client = (0, _QueryClientProvider.useQueryClient)(queryClient);
    var isRestoring = (0, _isRestoring.useIsRestoring)();
    var errorResetBoundary = (0, _QueryErrorResetBoundary.useQueryErrorResetBoundary)();
    var defaultedOptions = client.defaultQueryOptions(options);
    (_client_getDefaultOptions_queries = client.getDefaultOptions().queries) === null || _client_getDefaultOptions_queries === void 0 ? void 0 : (_client_getDefaultOptions_queries__experimental_beforeQuery = _client_getDefaultOptions_queries._experimental_beforeQuery) === null || _client_getDefaultOptions_queries__experimental_beforeQuery === void 0 ? void 0 : _client_getDefaultOptions_queries__experimental_beforeQuery.call(_client_getDefaultOptions_queries, defaultedOptions);
    if (false) {}
    // Make sure results are optimistically set in fetching state before subscribing or updating options
    defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic';
    (0, _suspense.ensureSuspenseTimers)(defaultedOptions);
    (0, _errorBoundaryUtils.ensurePreventErrorBoundaryRetry)(defaultedOptions, errorResetBoundary);
    (0, _errorBoundaryUtils.useClearResetErrorBoundary)(errorResetBoundary);
    // this needs to be invoked before creating the Observer because that can create a cache entry
    var isNewCacheEntry = !client.getQueryCache().get(defaultedOptions.queryHash);
    var _React_useState = _sliced_to_array._(_react.useState(()=>new Observer(client, defaultedOptions)), 1), observer = _React_useState[0];
    // note: this must be called before useSyncExternalStore
    var result = observer.getOptimisticResult(defaultedOptions);
    var shouldSubscribe = !isRestoring && options.subscribed !== false;
    _react.useSyncExternalStore(_react.useCallback((onStoreChange)=>{
        var unsubscribe = shouldSubscribe ? observer.subscribe(_querycore.notifyManager.batchCalls(onStoreChange)) : _utils.noop;
        // Update result to make sure we did not miss any query updates
        // between creating the observer and subscribing to it.
        observer.updateResult();
        return unsubscribe;
    }, [
        observer,
        shouldSubscribe
    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());
    _react.useEffect(()=>{
        observer.setOptions(defaultedOptions);
    }, [
        defaultedOptions,
        observer
    ]);
    // Handle suspense
    if ((0, _suspense.shouldSuspend)(defaultedOptions, result)) {
        throw (0, _suspense.fetchOptimistic)(defaultedOptions, observer, errorResetBoundary);
    }
    // Handle error boundary
    if ((0, _errorBoundaryUtils.getHasError)({
        result,
        errorResetBoundary,
        throwOnError: defaultedOptions.throwOnError,
        query: client.getQueryCache().get(defaultedOptions.queryHash),
        suspense: defaultedOptions.suspense
    })) {
        throw result.error;
    }
    ;
    (_client_getDefaultOptions_queries1 = client.getDefaultOptions().queries) === null || _client_getDefaultOptions_queries1 === void 0 ? void 0 : (_client_getDefaultOptions_queries__experimental_afterQuery = _client_getDefaultOptions_queries1._experimental_afterQuery) === null || _client_getDefaultOptions_queries__experimental_afterQuery === void 0 ? void 0 : _client_getDefaultOptions_queries__experimental_afterQuery.call(_client_getDefaultOptions_queries1, defaultedOptions, result);
    if (defaultedOptions.experimental_prefetchInRender && !_querycore.isServer && (0, _suspense.willFetch)(result, isRestoring)) {
        var _client_getQueryCache_get;
        var promise = isNewCacheEntry ? (0, _suspense.fetchOptimistic)(defaultedOptions, observer, errorResetBoundary) : (_client_getQueryCache_get = client.getQueryCache().get(defaultedOptions.queryHash)) === null || _client_getQueryCache_get === void 0 ? void 0 : _client_getQueryCache_get.promise;
        promise === null || promise === void 0 ? void 0 : promise.catch(_utils.noop).finally(()=>{
            // `.updateResult()` will trigger `.#currentThenable` to finalize
            observer.updateResult();
        });
    }
    // Handle result property usage tracking
    return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;
}


}),
88305: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useInfiniteQuery", ({
    enumerable: true,
    get: function() {
        return useInfiniteQuery;
    }
}));
var _querycore = __webpack_require__(85821);
var _useBaseQuery = __webpack_require__(13173);
function useInfiniteQuery(options, queryClient) {
    return (0, _useBaseQuery.useBaseQuery)(options, _querycore.InfiniteQueryObserver, queryClient);
}


}),
72573: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useIsFetching", ({
    enumerable: true,
    get: function() {
        return useIsFetching;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _querycore = __webpack_require__(85821);
var _QueryClientProvider = __webpack_require__(45222);
function useIsFetching(filters, queryClient) {
    var client = (0, _QueryClientProvider.useQueryClient)(queryClient);
    var queryCache = client.getQueryCache();
    return _react.useSyncExternalStore(_react.useCallback((onStoreChange)=>queryCache.subscribe(_querycore.notifyManager.batchCalls(onStoreChange)), [
        queryCache
    ]), ()=>client.isFetching(filters), ()=>client.isFetching(filters));
}


}),
81115: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useMutation", ({
    enumerable: true,
    get: function() {
        return useMutation;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _querycore = __webpack_require__(85821);
var _QueryClientProvider = __webpack_require__(45222);
var _utils = __webpack_require__(84010);
function useMutation(options, queryClient) {
    var client = (0, _QueryClientProvider.useQueryClient)(queryClient);
    var _React_useState = _sliced_to_array._(_react.useState(()=>new _querycore.MutationObserver(client, options)), 1), observer = _React_useState[0];
    _react.useEffect(()=>{
        observer.setOptions(options);
    }, [
        observer,
        options
    ]);
    var result = _react.useSyncExternalStore(_react.useCallback((onStoreChange)=>observer.subscribe(_querycore.notifyManager.batchCalls(onStoreChange)), [
        observer
    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());
    var mutate = _react.useCallback((variables, mutateOptions)=>{
        observer.mutate(variables, mutateOptions).catch(_utils.noop);
    }, [
        observer
    ]);
    if (result.error && (0, _utils.shouldThrowError)(observer.options.throwOnError, [
        result.error
    ])) {
        throw result.error;
    }
    return _object_spread_props._(_object_spread._({}, result), {
        mutate,
        mutateAsync: result.mutate
    });
}


}),
6864: (function (__unused_webpack_module, exports, __webpack_require__) {
/* eslint-disable react-compiler/react-compiler */ 'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useIsMutating: function() {
        return useIsMutating;
    },
    useMutationState: function() {
        return useMutationState;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _querycore = __webpack_require__(85821);
var _QueryClientProvider = __webpack_require__(45222);
function useIsMutating(filters, queryClient) {
    var client = (0, _QueryClientProvider.useQueryClient)(queryClient);
    return useMutationState({
        filters: _object_spread_props._(_object_spread._({}, filters), {
            status: 'pending'
        })
    }, client).length;
}
function getResult(mutationCache, options) {
    return mutationCache.findAll(options.filters).map((mutation)=>options.select ? options.select(mutation) : mutation.state);
}
function useMutationState(ref, queryClient) {
    var options = ref === void 0 ? {} : ref;
    var mutationCache = (0, _QueryClientProvider.useQueryClient)(queryClient).getMutationCache();
    var optionsRef = _react.useRef(options);
    var result = _react.useRef(null);
    if (!result.current) {
        result.current = getResult(mutationCache, options);
    }
    _react.useEffect(()=>{
        optionsRef.current = options;
    });
    return _react.useSyncExternalStore(_react.useCallback((onStoreChange)=>mutationCache.subscribe(()=>{
            var nextResult = (0, _querycore.replaceEqualDeep)(result.current, getResult(mutationCache, optionsRef.current));
            if (result.current !== nextResult) {
                result.current = nextResult;
                _querycore.notifyManager.schedule(onStoreChange);
            }
        }), [
        mutationCache
    ]), ()=>result.current, ()=>result.current);
}


}),
61408: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useQueries", ({
    enumerable: true,
    get: function() {
        return useQueries;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_without_properties = __webpack_require__(86136);
var _sliced_to_array = __webpack_require__(78474);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _querycore = __webpack_require__(85821);
var _QueryClientProvider = __webpack_require__(45222);
var _isRestoring = __webpack_require__(78063);
var _QueryErrorResetBoundary = __webpack_require__(59005);
var _errorBoundaryUtils = __webpack_require__(13928);
var _suspense = __webpack_require__(54324);
var _utils = __webpack_require__(84010);
function useQueries(_param, queryClient) {
    var queries = _param.queries, options = _object_without_properties._(_param, [
        "queries"
    ]);
    var client = (0, _QueryClientProvider.useQueryClient)(queryClient);
    var isRestoring = (0, _isRestoring.useIsRestoring)();
    var errorResetBoundary = (0, _QueryErrorResetBoundary.useQueryErrorResetBoundary)();
    var defaultedQueries = _react.useMemo(()=>queries.map((opts)=>{
            var defaultedOptions = client.defaultQueryOptions(opts);
            // Make sure the results are already in fetching state before subscribing or updating options
            defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic';
            return defaultedOptions;
        }), [
        queries,
        client,
        isRestoring
    ]);
    defaultedQueries.forEach((query)=>{
        (0, _suspense.ensureSuspenseTimers)(query);
        (0, _errorBoundaryUtils.ensurePreventErrorBoundaryRetry)(query, errorResetBoundary);
    });
    (0, _errorBoundaryUtils.useClearResetErrorBoundary)(errorResetBoundary);
    var _React_useState = _sliced_to_array._(_react.useState(()=>new _querycore.QueriesObserver(client, defaultedQueries, options)), 1), observer = _React_useState[0];
    // note: this must be called before useSyncExternalStore
    var _observer_getOptimisticResult = _sliced_to_array._(observer.getOptimisticResult(defaultedQueries, options.combine), 3), optimisticResult = _observer_getOptimisticResult[0], getCombinedResult = _observer_getOptimisticResult[1], trackResult = _observer_getOptimisticResult[2];
    var shouldSubscribe = !isRestoring && options.subscribed !== false;
    _react.useSyncExternalStore(_react.useCallback((onStoreChange)=>shouldSubscribe ? observer.subscribe(_querycore.notifyManager.batchCalls(onStoreChange)) : _utils.noop, [
        observer,
        shouldSubscribe
    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());
    _react.useEffect(()=>{
        observer.setQueries(defaultedQueries, options);
    }, [
        defaultedQueries,
        options,
        observer
    ]);
    var shouldAtLeastOneSuspend = optimisticResult.some((result, index)=>(0, _suspense.shouldSuspend)(defaultedQueries[index], result));
    var suspensePromises = shouldAtLeastOneSuspend ? optimisticResult.flatMap((result, index)=>{
        var opts = defaultedQueries[index];
        if (opts) {
            var queryObserver = new _querycore.QueryObserver(client, opts);
            if ((0, _suspense.shouldSuspend)(opts, result)) {
                return (0, _suspense.fetchOptimistic)(opts, queryObserver, errorResetBoundary);
            } else if ((0, _suspense.willFetch)(result, isRestoring)) {
                void (0, _suspense.fetchOptimistic)(opts, queryObserver, errorResetBoundary);
            }
        }
        return [];
    }) : [];
    if (suspensePromises.length > 0) {
        throw Promise.all(suspensePromises);
    }
    var firstSingleResultWhichShouldThrow = optimisticResult.find((result, index)=>{
        var query = defaultedQueries[index];
        return query && (0, _errorBoundaryUtils.getHasError)({
            result,
            errorResetBoundary,
            throwOnError: query.throwOnError,
            query: client.getQueryCache().get(query.queryHash),
            suspense: query.suspense
        });
    });
    if (firstSingleResultWhichShouldThrow === null || firstSingleResultWhichShouldThrow === void 0 ? void 0 : firstSingleResultWhichShouldThrow.error) {
        throw firstSingleResultWhichShouldThrow.error;
    }
    return getCombinedResult(trackResult());
}


}),
32902: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useQuery", ({
    enumerable: true,
    get: function() {
        return useQuery;
    }
}));
var _querycore = __webpack_require__(85821);
var _useBaseQuery = __webpack_require__(13173);
function useQuery(options, queryClient) {
    return (0, _useBaseQuery.useBaseQuery)(options, _querycore.QueryObserver, queryClient);
}


}),
55462: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useSuspenseInfiniteQuery", ({
    enumerable: true,
    get: function() {
        return useSuspenseInfiniteQuery;
    }
}));
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _querycore = __webpack_require__(85821);
var _useBaseQuery = __webpack_require__(13173);
var _suspense = __webpack_require__(54324);
function useSuspenseInfiniteQuery(options, queryClient) {
    if (false) {}
    return (0, _useBaseQuery.useBaseQuery)(_object_spread_props._(_object_spread._({}, options), {
        enabled: true,
        suspense: true,
        throwOnError: _suspense.defaultThrowOnError
    }), _querycore.InfiniteQueryObserver, queryClient);
}


}),
92423: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useSuspenseQueries", ({
    enumerable: true,
    get: function() {
        return useSuspenseQueries;
    }
}));
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _querycore = __webpack_require__(85821);
var _useQueries = __webpack_require__(61408);
var _suspense = __webpack_require__(54324);
function useSuspenseQueries(options, queryClient) {
    return (0, _useQueries.useQueries)(_object_spread_props._(_object_spread._({}, options), {
        queries: options.queries.map((query)=>{
            if (false) {}
            return _object_spread_props._(_object_spread._({}, query), {
                suspense: true,
                throwOnError: _suspense.defaultThrowOnError,
                enabled: true,
                placeholderData: undefined
            });
        })
    }), queryClient);
}


}),
15525: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useSuspenseQuery", ({
    enumerable: true,
    get: function() {
        return useSuspenseQuery;
    }
}));
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _querycore = __webpack_require__(85821);
var _useBaseQuery = __webpack_require__(13173);
var _suspense = __webpack_require__(54324);
function useSuspenseQuery(options, queryClient) {
    if (false) {}
    return (0, _useBaseQuery.useBaseQuery)(_object_spread_props._(_object_spread._({}, options), {
        enabled: true,
        suspense: true,
        throwOnError: _suspense.defaultThrowOnError,
        placeholderData: undefined
    }), _querycore.QueryObserver, queryClient);
}


}),
84010: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    noop: function() {
        return noop;
    },
    shouldThrowError: function() {
        return shouldThrowError;
    }
});
var _to_consumable_array = __webpack_require__(92716);
function shouldThrowError(throwError, params) {
    // Allow throwError function to override throwing behavior on a per-error basis
    if (typeof throwError === 'function') {
        return throwError.apply(void 0, _to_consumable_array._(params));
    }
    return !!throwError;
}
function noop() {}


}),
37617: (function (__unused_webpack_module, exports, __webpack_require__) {
/* eslint-disable react-compiler/react-compiler */ 'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "HydrationBoundary", ({
    enumerable: true,
    get: function() {
        return HydrationBoundary;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _querycore = __webpack_require__(85821);
var _QueryClientProvider = __webpack_require__(45222);
var hasProperty = (obj, key)=>{
    return typeof obj === 'object' && obj !== null && key in obj;
};
var HydrationBoundary = (ref)=>{
    var children = ref.children, _ref_options = ref.options, options = _ref_options === void 0 ? {} : _ref_options, state = ref.state, queryClient = ref.queryClient;
    var client = (0, _QueryClientProvider.useQueryClient)(queryClient);
    var _React_useState = _sliced_to_array._(_react.useState(), 2), hydrationQueue = _React_useState[0], setHydrationQueue = _React_useState[1];
    var optionsRef = _react.useRef(options);
    optionsRef.current = options;
    // This useMemo is for performance reasons only, everything inside it _must_
    // be safe to run in every render and code here should be read as "in render".
    //
    // This code needs to happen during the render phase, because after initial
    // SSR, hydration needs to happen _before_ children render. Also, if hydrating
    // during a transition, we want to hydrate as much as is safe in render so
    // we can prerender as much as possible.
    //
    // For any queries that already exist in the cache, we want to hold back on
    // hydrating until _after_ the render phase. The reason for this is that during
    // transitions, we don't want the existing queries and observers to update to
    // the new data on the current page, only _after_ the transition is committed.
    // If the transition is aborted, we will have hydrated any _new_ queries, but
    // we throw away the fresh data for any existing ones to avoid unexpectedly
    // updating the UI.
    _react.useMemo(()=>{
        if (state) {
            var _loop = function(dehydratedQuery) {
                var existingQuery = queryCache.get(dehydratedQuery.queryHash);
                if (!existingQuery) {
                    newQueries.push(dehydratedQuery);
                } else {
                    var hydrationIsNewer = dehydratedQuery.state.dataUpdatedAt > existingQuery.state.dataUpdatedAt || // RSC special serialized then-able chunks
                    hasProperty(dehydratedQuery.promise, 'status') && hasProperty(existingQuery.promise, 'status') && dehydratedQuery.promise.status !== existingQuery.promise.status;
                    var queryAlreadyQueued = hydrationQueue === null || hydrationQueue === void 0 ? void 0 : hydrationQueue.find((query)=>query.queryHash === dehydratedQuery.queryHash);
                    if (hydrationIsNewer && (!queryAlreadyQueued || dehydratedQuery.state.dataUpdatedAt > queryAlreadyQueued.state.dataUpdatedAt)) {
                        existingQueries.push(dehydratedQuery);
                    }
                }
            };
            if (typeof state !== 'object') {
                return;
            }
            var queryCache = client.getQueryCache();
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            var queries = state.queries || [];
            var newQueries = [];
            var existingQueries = [];
            for (var dehydratedQuery of queries)_loop(dehydratedQuery);
            if (newQueries.length > 0) {
                // It's actually fine to call this with queries/state that already exists
                // in the cache, or is older. hydrate() is idempotent for queries.
                (0, _querycore.hydrate)(client, {
                    queries: newQueries
                }, optionsRef.current);
            }
            if (existingQueries.length > 0) {
                setHydrationQueue((prev)=>prev ? _to_consumable_array._(prev).concat(_to_consumable_array._(existingQueries)) : existingQueries);
            }
        }
    }, [
        client,
        hydrationQueue,
        state
    ]);
    _react.useEffect(()=>{
        if (hydrationQueue) {
            (0, _querycore.hydrate)(client, {
                queries: hydrationQueue
            }, optionsRef.current);
            setHydrationQueue(undefined);
        }
    }, [
        client,
        hydrationQueue
    ]);
    return children;
};


}),
45222: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    QueryClientContext: function() {
        return QueryClientContext;
    },
    QueryClientProvider: function() {
        return QueryClientProvider;
    },
    useQueryClient: function() {
        return useQueryClient;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var QueryClientContext = /*#__PURE__*/ _react.createContext(undefined);
var useQueryClient = (queryClient)=>{
    var client = _react.useContext(QueryClientContext);
    if (queryClient) {
        return queryClient;
    }
    if (!client) {
        throw new Error('No QueryClient set, use QueryClientProvider to set one');
    }
    return client;
};
var QueryClientProvider = (ref)=>{
    var client = ref.client, children = ref.children;
    _react.useEffect(()=>{
        client.mount();
        return ()=>{
            client.unmount();
        };
    }, [
        client
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(QueryClientContext.Provider, {
        value: client,
        children: children
    });
};


}),
59005: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    QueryErrorResetBoundary: function() {
        return QueryErrorResetBoundary;
    },
    useQueryErrorResetBoundary: function() {
        return useQueryErrorResetBoundary;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
function createValue() {
    var isReset = false;
    return {
        clearReset: ()=>{
            isReset = false;
        },
        reset: ()=>{
            isReset = true;
        },
        isReset: ()=>{
            return isReset;
        }
    };
}
var QueryErrorResetBoundaryContext = /*#__PURE__*/ _react.createContext(createValue());
var useQueryErrorResetBoundary = ()=>_react.useContext(QueryErrorResetBoundaryContext);
var QueryErrorResetBoundary = (ref)=>{
    var children = ref.children;
    var _React_useState = _sliced_to_array._(_react.useState(()=>createValue()), 1), value = _React_useState[0];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(QueryErrorResetBoundaryContext.Provider, {
        value: value,
        children: typeof children === 'function' ? children(value) : children
    });
};


}),
4795: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "usePrefetchInfiniteQuery", ({
    enumerable: true,
    get: function() {
        return usePrefetchInfiniteQuery;
    }
}));
var _QueryClientProvider = __webpack_require__(45222);
function usePrefetchInfiniteQuery(options, queryClient) {
    var client = (0, _QueryClientProvider.useQueryClient)(queryClient);
    if (!client.getQueryState(options.queryKey)) {
        client.prefetchInfiniteQuery(options);
    }
}


}),
52849: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "usePrefetchQuery", ({
    enumerable: true,
    get: function() {
        return usePrefetchQuery;
    }
}));
var _QueryClientProvider = __webpack_require__(45222);
function usePrefetchQuery(options, queryClient) {
    var client = (0, _QueryClientProvider.useQueryClient)(queryClient);
    if (!client.getQueryState(options.queryKey)) {
        client.prefetchQuery(options);
    }
}


}),

}]);//# sourceMappingURL=vendors-node_modules_tanstack_react-query_src_index_ts.chunk.bundle.map?platform=android