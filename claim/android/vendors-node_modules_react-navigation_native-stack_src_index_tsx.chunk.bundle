(self["webpackChunkclaim"] = self["webpackChunkclaim"] || []).push([["vendors-node_modules_react-navigation_native-stack_src_index_tsx"], {
12602: (function (module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _to_consumable_array = __webpack_require__(92716);
var DEV = "production" !== "production";
var warnings = new Set();
function warnOnce(condition, ...rest) {
    if (DEV && condition) {
        var _console;
        var key = rest.join(" ");
        if (warnings.has(key)) {
            return;
        }
        warnings.add(key);
        (_console = console).warn.apply(_console, _to_consumable_array._(rest));
    }
}
module.exports = warnOnce;


}),
3992: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Background;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
function Background(_param) {
    var style = _param.style, rest = _object_without_properties._(_param, [
        "style"
    ]);
    var colors = (0, _native.useTheme)().colors;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread_props._(_object_spread._({}, rest), {
        style: [
            {
                flex: 1,
                backgroundColor: colors.background
            },
            style
        ]
    }));
}


}),
55455: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Header;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var _reactnativesafeareacontext = __webpack_require__(33481);
var _getDefaultHeaderHeight = /*#__PURE__*/ _interop_require_default._(__webpack_require__(96811));
var _HeaderBackground = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70122));
var _HeaderShownContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57053));
var _HeaderTitle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91665));
var warnIfHeaderStylesDefined = (styles)=>{
    Object.keys(styles).forEach((styleProp)=>{
        var value = styles[styleProp];
        if (styleProp === 'position' && value === 'absolute') {
            console.warn("position: 'absolute' is not supported on headerStyle. If you would like to render content under the header, use the 'headerTransparent' option.");
        } else if (value !== undefined) {
            console.warn(`${styleProp} was given a value of ${value}, this has no effect on headerStyle.`);
        }
    });
};
function Header(props) {
    var insets = (0, _reactnativesafeareacontext.useSafeAreaInsets)();
    var frame = (0, _reactnativesafeareacontext.useSafeAreaFrame)();
    var isParentHeaderShown = _react.useContext(_HeaderShownContext.default);
    // On models with Dynamic Island the status bar height is smaller than the safe area top inset.
    var hasDynamicIsland = _reactnative.Platform.OS === 'ios' && insets.top > 50;
    var statusBarHeight = hasDynamicIsland ? insets.top - 5 : insets.top;
    var _props_layout = props.layout, layout = _props_layout === void 0 ? frame : _props_layout, _props_modal = props.modal, modal = _props_modal === void 0 ? false : _props_modal, title = props.title, customTitle = props.headerTitle, _props_headerTitleAlign = props.headerTitleAlign, headerTitleAlign = _props_headerTitleAlign === void 0 ? _reactnative.Platform.select({
        ios: 'center',
        default: 'left'
    }) : _props_headerTitleAlign, headerLeft = props.headerLeft, headerLeftLabelVisible = props.headerLeftLabelVisible, headerTransparent = props.headerTransparent, headerTintColor = props.headerTintColor, headerBackground = props.headerBackground, headerRight = props.headerRight, titleAllowFontScaling = props.headerTitleAllowFontScaling, titleStyle = props.headerTitleStyle, leftContainerStyle = props.headerLeftContainerStyle, rightContainerStyle = props.headerRightContainerStyle, titleContainerStyle = props.headerTitleContainerStyle, backgroundContainerStyle = props.headerBackgroundContainerStyle, customHeaderStyle = props.headerStyle, headerShadowVisible = props.headerShadowVisible, headerPressColor = props.headerPressColor, headerPressOpacity = props.headerPressOpacity, _props_headerStatusBarHeight = props.headerStatusBarHeight, headerStatusBarHeight = _props_headerStatusBarHeight === void 0 ? isParentHeaderShown ? 0 : statusBarHeight : _props_headerStatusBarHeight;
    var defaultHeight = (0, _getDefaultHeaderHeight.default)(layout, modal, headerStatusBarHeight);
    var _StyleSheet_flatten = _reactnative.StyleSheet.flatten(customHeaderStyle || {}), _StyleSheet_flatten_height = _StyleSheet_flatten.height, height = _StyleSheet_flatten_height === void 0 ? defaultHeight : _StyleSheet_flatten_height, minHeight = _StyleSheet_flatten.minHeight, maxHeight = _StyleSheet_flatten.maxHeight, backgroundColor = _StyleSheet_flatten.backgroundColor, borderBottomColor = _StyleSheet_flatten.borderBottomColor, borderBottomEndRadius = _StyleSheet_flatten.borderBottomEndRadius, borderBottomLeftRadius = _StyleSheet_flatten.borderBottomLeftRadius, borderBottomRightRadius = _StyleSheet_flatten.borderBottomRightRadius, borderBottomStartRadius = _StyleSheet_flatten.borderBottomStartRadius, borderBottomWidth = _StyleSheet_flatten.borderBottomWidth, borderColor = _StyleSheet_flatten.borderColor, borderEndColor = _StyleSheet_flatten.borderEndColor, borderEndWidth = _StyleSheet_flatten.borderEndWidth, borderLeftColor = _StyleSheet_flatten.borderLeftColor, borderLeftWidth = _StyleSheet_flatten.borderLeftWidth, borderRadius = _StyleSheet_flatten.borderRadius, borderRightColor = _StyleSheet_flatten.borderRightColor, borderRightWidth = _StyleSheet_flatten.borderRightWidth, borderStartColor = _StyleSheet_flatten.borderStartColor, borderStartWidth = _StyleSheet_flatten.borderStartWidth, borderStyle = _StyleSheet_flatten.borderStyle, borderTopColor = _StyleSheet_flatten.borderTopColor, borderTopEndRadius = _StyleSheet_flatten.borderTopEndRadius, borderTopLeftRadius = _StyleSheet_flatten.borderTopLeftRadius, borderTopRightRadius = _StyleSheet_flatten.borderTopRightRadius, borderTopStartRadius = _StyleSheet_flatten.borderTopStartRadius, borderTopWidth = _StyleSheet_flatten.borderTopWidth, borderWidth = _StyleSheet_flatten.borderWidth, // @ts-expect-error: web support for shadow
    boxShadow = _StyleSheet_flatten.boxShadow, elevation = _StyleSheet_flatten.elevation, shadowColor = _StyleSheet_flatten.shadowColor, shadowOffset = _StyleSheet_flatten.shadowOffset, shadowOpacity = _StyleSheet_flatten.shadowOpacity, shadowRadius = _StyleSheet_flatten.shadowRadius, opacity = _StyleSheet_flatten.opacity, transform = _StyleSheet_flatten.transform, unsafeStyles = _object_without_properties._(_StyleSheet_flatten, [
        "height",
        "minHeight",
        "maxHeight",
        "backgroundColor",
        "borderBottomColor",
        "borderBottomEndRadius",
        "borderBottomLeftRadius",
        "borderBottomRightRadius",
        "borderBottomStartRadius",
        "borderBottomWidth",
        "borderColor",
        "borderEndColor",
        "borderEndWidth",
        "borderLeftColor",
        "borderLeftWidth",
        "borderRadius",
        "borderRightColor",
        "borderRightWidth",
        "borderStartColor",
        "borderStartWidth",
        "borderStyle",
        "borderTopColor",
        "borderTopEndRadius",
        "borderTopLeftRadius",
        "borderTopRightRadius",
        "borderTopStartRadius",
        "borderTopWidth",
        "borderWidth",
        "boxShadow",
        "elevation",
        "shadowColor",
        "shadowOffset",
        "shadowOpacity",
        "shadowRadius",
        "opacity",
        "transform"
    ]);
    if (false) {}
    var safeStyles = {
        backgroundColor,
        borderBottomColor,
        borderBottomEndRadius,
        borderBottomLeftRadius,
        borderBottomRightRadius,
        borderBottomStartRadius,
        borderBottomWidth,
        borderColor,
        borderEndColor,
        borderEndWidth,
        borderLeftColor,
        borderLeftWidth,
        borderRadius,
        borderRightColor,
        borderRightWidth,
        borderStartColor,
        borderStartWidth,
        borderStyle,
        borderTopColor,
        borderTopEndRadius,
        borderTopLeftRadius,
        borderTopRightRadius,
        borderTopStartRadius,
        borderTopWidth,
        borderWidth,
        // @ts-expect-error: boxShadow is only for Web
        boxShadow,
        elevation,
        shadowColor,
        shadowOffset,
        shadowOpacity,
        shadowRadius,
        opacity,
        transform
    };
    // Setting a property to undefined triggers default style
    // So we need to filter them out
    // Users can use `null` instead
    for(var styleProp in safeStyles){
        // @ts-expect-error: typescript wrongly complains that styleProp cannot be used to index safeStyles
        if (safeStyles[styleProp] === undefined) {
            // @ts-expect-error
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete safeStyles[styleProp];
        }
    }
    var backgroundStyle = [
        safeStyles,
        headerShadowVisible === false && {
            elevation: 0,
            shadowOpacity: 0,
            borderBottomWidth: 0
        }
    ];
    var leftButton = headerLeft ? headerLeft({
        tintColor: headerTintColor,
        pressColor: headerPressColor,
        pressOpacity: headerPressOpacity,
        labelVisible: headerLeftLabelVisible
    }) : null;
    var rightButton = headerRight ? headerRight({
        tintColor: headerTintColor,
        pressColor: headerPressColor,
        pressOpacity: headerPressOpacity
    }) : null;
    var headerTitle = typeof customTitle !== 'function' ? (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeaderTitle.default, _object_spread._({}, props)) : customTitle;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                pointerEvents: "box-none",
                style: [
                    _reactnative.StyleSheet.absoluteFill,
                    {
                        zIndex: 0
                    },
                    backgroundContainerStyle
                ],
                children: headerBackground ? headerBackground({
                    style: backgroundStyle
                }) : headerTransparent ? null : /*#__PURE__*/ (0, _jsxruntime.jsx)(_HeaderBackground.default, {
                    style: backgroundStyle
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                pointerEvents: "box-none",
                style: [
                    {
                        height,
                        minHeight,
                        maxHeight,
                        opacity,
                        transform
                    }
                ],
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        pointerEvents: "none",
                        style: {
                            height: headerStatusBarHeight
                        }
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                        pointerEvents: "box-none",
                        style: styles.content,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                pointerEvents: "box-none",
                                style: [
                                    styles.left,
                                    headerTitleAlign === 'center' && styles.expand,
                                    {
                                        marginStart: insets.left
                                    },
                                    leftContainerStyle
                                ],
                                children: leftButton
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                pointerEvents: "box-none",
                                style: [
                                    styles.title,
                                    {
                                        // Avoid the title from going offscreen or overlapping buttons
                                        maxWidth: headerTitleAlign === 'center' ? layout.width - ((leftButton ? headerLeftLabelVisible !== false ? 80 : 32 : 16) + Math.max(insets.left, insets.right)) * 2 : layout.width - ((leftButton ? 72 : 16) + (rightButton ? 72 : 16) + insets.left - insets.right)
                                    },
                                    titleContainerStyle
                                ],
                                children: headerTitle({
                                    children: title,
                                    allowFontScaling: titleAllowFontScaling,
                                    tintColor: headerTintColor,
                                    style: titleStyle
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                pointerEvents: "box-none",
                                style: [
                                    styles.right,
                                    styles.expand,
                                    {
                                        marginEnd: insets.right
                                    },
                                    rightContainerStyle
                                ],
                                children: rightButton
                            })
                        ]
                    })
                ]
            })
        ]
    });
}
var styles = _reactnative.StyleSheet.create({
    content: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'stretch'
    },
    title: {
        marginHorizontal: 16,
        justifyContent: 'center'
    },
    left: {
        justifyContent: 'center',
        alignItems: 'flex-start'
    },
    right: {
        justifyContent: 'center',
        alignItems: 'flex-end'
    },
    expand: {
        flexGrow: 1,
        flexBasis: 0
    }
});


}),
54365: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeaderBackButton;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var _MaskedView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85466));
var _PlatformPressable = /*#__PURE__*/ _interop_require_default._(__webpack_require__(9735));
function HeaderBackButton(ref) {
    var disabled = ref.disabled, allowFontScaling = ref.allowFontScaling, backImage = ref.backImage, label = ref.label, labelStyle = ref.labelStyle, _ref_labelVisible = ref.labelVisible, labelVisible = _ref_labelVisible === void 0 ? _reactnative.Platform.OS === 'ios' : _ref_labelVisible, onLabelLayout = ref.onLabelLayout, onPress = ref.onPress, pressColor = ref.pressColor, pressOpacity = ref.pressOpacity, screenLayout = ref.screenLayout, customTintColor = ref.tintColor, titleLayout = ref.titleLayout, _ref_truncatedLabel = ref.truncatedLabel, truncatedLabel = _ref_truncatedLabel === void 0 ? 'Back' : _ref_truncatedLabel, _ref_accessibilityLabel = ref.accessibilityLabel, accessibilityLabel = _ref_accessibilityLabel === void 0 ? label && label !== 'Back' ? `${label}, back` : 'Go back' : _ref_accessibilityLabel, testID = ref.testID, style = ref.style;
    var colors = (0, _native.useTheme)().colors;
    var _React_useState = _sliced_to_array._(_react.useState(undefined), 2), initialLabelWidth = _React_useState[0], setInitialLabelWidth = _React_useState[1];
    var tintColor = customTintColor !== undefined ? customTintColor : _reactnative.Platform.select({
        ios: colors.primary,
        default: colors.text
    });
    var handleLabelLayout = (e)=>{
        onLabelLayout === null || onLabelLayout === void 0 ? void 0 : onLabelLayout(e);
        setInitialLabelWidth(e.nativeEvent.layout.x + e.nativeEvent.layout.width);
    };
    var shouldTruncateLabel = ()=>{
        return !label || initialLabelWidth && titleLayout && screenLayout && (screenLayout.width - titleLayout.width) / 2 < initialLabelWidth + 26;
    };
    var renderBackImage = ()=>{
        if (backImage) {
            return backImage({
                tintColor
            });
        } else {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, {
                style: [
                    styles.icon,
                    Boolean(labelVisible) && styles.iconWithLabel,
                    Boolean(tintColor) && {
                        tintColor
                    }
                ],
                source: __webpack_require__(44960),
                fadeDuration: 0
            });
        }
    };
    var renderLabel = ()=>{
        var leftLabelText = shouldTruncateLabel() ? truncatedLabel : label;
        if (!labelVisible || leftLabelText === undefined) {
            return null;
        }
        var labelElement = /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
            style: screenLayout ? // Otherwise it appears to cut off when translating
            [
                styles.labelWrapper,
                {
                    minWidth: screenLayout.width / 2 - 27
                }
            ] : null,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.Text, {
                accessible: false,
                onLayout: // This measurement is used to determine if we should truncate the label when it doesn't fit
                // Only measure it when label is not truncated because we want the measurement of full label
                leftLabelText === label ? handleLabelLayout : undefined,
                style: [
                    styles.label,
                    tintColor ? {
                        color: tintColor
                    } : null,
                    labelStyle
                ],
                numberOfLines: 1,
                allowFontScaling: !!allowFontScaling,
                children: leftLabelText
            })
        });
        if (backImage || _reactnative.Platform.OS !== 'ios') {
            // When a custom backimage is specified, we can't mask the label
            // Otherwise there might be weird effect due to our mask not being the same as the image
            return labelElement;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaskedView.default, {
            maskElement: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: styles.iconMaskContainer,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, {
                        source: __webpack_require__(22683),
                        style: styles.iconMask
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        style: styles.iconMaskFillerRect
                    })
                ]
            }),
            children: labelElement
        });
    };
    var handlePress = ()=>onPress && requestAnimationFrame(onPress);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PlatformPressable.default, {
        disabled: disabled,
        accessible: true,
        accessibilityRole: "button",
        accessibilityLabel: accessibilityLabel,
        testID: testID,
        onPress: disabled ? undefined : handlePress,
        pressColor: pressColor,
        pressOpacity: pressOpacity,
        android_ripple: androidRipple,
        style: [
            styles.container,
            disabled && styles.disabled,
            style
        ],
        hitSlop: _reactnative.Platform.select({
            ios: undefined,
            default: {
                top: 16,
                right: 16,
                bottom: 16,
                left: 16
            }
        }),
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Fragment, {
            children: [
                renderBackImage(),
                renderLabel()
            ]
        })
    });
}
var androidRipple = {
    borderless: true,
    foreground: _reactnative.Platform.OS === 'android' && _reactnative.Platform.Version >= 23,
    radius: 20
};
var styles = _reactnative.StyleSheet.create({
    container: _object_spread._({
        alignItems: 'center',
        flexDirection: 'row',
        minWidth: _reactnative.StyleSheet.hairlineWidth
    }, _reactnative.Platform.select({
        ios: null,
        default: {
            marginVertical: 3,
            marginHorizontal: 11
        }
    })),
    disabled: {
        opacity: 0.5
    },
    label: {
        fontSize: 17,
        // Title and back label are a bit different width due to title being bold
        // Adjusting the letterSpacing makes them coincide better
        letterSpacing: 0.35
    },
    labelWrapper: {
        // These styles will make sure that the label doesn't fill the available space
        // Otherwise it messes with the measurement of the label
        flexDirection: 'row',
        alignItems: 'flex-start'
    },
    icon: _reactnative.Platform.select({
        ios: {
            height: 21,
            width: 13,
            marginLeft: 8,
            marginRight: 22,
            marginVertical: 12,
            resizeMode: 'contain',
            transform: [
                {
                    scaleX: _reactnative.I18nManager.getConstants().isRTL ? -1 : 1
                }
            ]
        },
        default: {
            height: 24,
            width: 24,
            margin: 3,
            resizeMode: 'contain',
            transform: [
                {
                    scaleX: _reactnative.I18nManager.getConstants().isRTL ? -1 : 1
                }
            ]
        }
    }),
    iconWithLabel: _reactnative.Platform.OS === 'ios' ? {
        marginRight: 6
    } : {},
    iconMaskContainer: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center'
    },
    iconMaskFillerRect: {
        flex: 1,
        backgroundColor: '#000'
    },
    iconMask: {
        height: 21,
        width: 13,
        marginLeft: -14.5,
        marginVertical: 12,
        alignSelf: 'center',
        resizeMode: 'contain',
        transform: [
            {
                scaleX: _reactnative.I18nManager.getConstants().isRTL ? -1 : 1
            }
        ]
    }
});


}),
34480: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _getNamedContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31557));
var HeaderBackContext = (0, _getNamedContext.default)('HeaderBackContext', undefined);
var _default = HeaderBackContext;


}),
70122: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeaderBackground;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
function HeaderBackground(_param) {
    var style = _param.style, rest = _object_without_properties._(_param, [
        "style"
    ]);
    var colors = (0, _native.useTheme)().colors;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _object_spread._({
        style: [
            styles.container,
            {
                backgroundColor: colors.card,
                borderBottomColor: colors.border,
                shadowColor: colors.border
            },
            style
        ]
    }, rest));
}
var styles = _reactnative.StyleSheet.create({
    container: _object_spread._({
        flex: 1
    }, _reactnative.Platform.select({
        android: {
            elevation: 4
        },
        ios: {
            shadowOpacity: 0.85,
            shadowRadius: 0,
            shadowOffset: {
                width: 0,
                height: _reactnative.StyleSheet.hairlineWidth
            }
        },
        default: {
            borderBottomWidth: _reactnative.StyleSheet.hairlineWidth
        }
    }))
});


}),
4944: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _getNamedContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31557));
var HeaderHeightContext = (0, _getNamedContext.default)('HeaderHeightContext', undefined);
var _default = HeaderHeightContext;


}),
57053: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _getNamedContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31557));
var HeaderShownContext = (0, _getNamedContext.default)('HeaderShownContext', false);
var _default = HeaderShownContext;


}),
91665: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeaderTitle;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
function HeaderTitle(_param) {
    var tintColor = _param.tintColor, style = _param.style, rest = _object_without_properties._(_param, [
        "tintColor",
        "style"
    ]);
    var colors = (0, _native.useTheme)().colors;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.Text, _object_spread_props._(_object_spread._({
        accessibilityRole: "header",
        "aria-level": "1",
        numberOfLines: 1
    }, rest), {
        style: [
            styles.title,
            {
                color: tintColor === undefined ? colors.text : tintColor
            },
            style
        ]
    }));
}
var styles = _reactnative.StyleSheet.create({
    title: _reactnative.Platform.select({
        ios: {
            fontSize: 17,
            fontWeight: '600'
        },
        android: {
            fontSize: 20,
            fontFamily: 'sans-serif-medium',
            fontWeight: 'normal'
        },
        default: {
            fontSize: 18,
            fontWeight: '500'
        }
    })
});


}),
96811: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getDefaultHeaderHeight;
    }
}));
var _reactnative = __webpack_require__(56300);
function getDefaultHeaderHeight(layout, modalPresentation, statusBarHeight) {
    var headerHeight;
    var isLandscape = layout.width > layout.height;
    if (_reactnative.Platform.OS === 'ios') {
        if (_reactnative.Platform.isPad || _reactnative.Platform.isTV) {
            if (modalPresentation) {
                headerHeight = 56;
            } else {
                headerHeight = 50;
            }
        } else {
            if (isLandscape) {
                headerHeight = 32;
            } else {
                if (modalPresentation) {
                    headerHeight = 56;
                } else {
                    headerHeight = 44;
                }
            }
        }
    } else if (_reactnative.Platform.OS === 'android') {
        headerHeight = 56;
    } else {
        headerHeight = 64;
    }
    return headerHeight + statusBarHeight;
}


}),
51414: (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getHeaderTitle;
    }
}));
function getHeaderTitle(options, fallback) {
    return typeof options.headerTitle === 'string' ? options.headerTitle : options.title !== undefined ? options.title : fallback;
}


}),
65633: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useHeaderHeight;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _HeaderHeightContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4944));
function useHeaderHeight() {
    var height = _react.useContext(_HeaderHeightContext.default);
    if (height === undefined) {
        throw new Error("Couldn't find the header height. Are you inside a screen in a navigator with a header?");
    }
    return height;
}


}),
85466: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _MaskedViewNative.default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _MaskedViewNative = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4585));


}),
4585: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * The native MaskedView that we explicitly re-export for supported platforms: Android, iOS.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return MaskedView;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var RNCMaskedView;
try {
    // Add try/catch to support usage even if it's not installed, since it's optional.
    // Newer versions of Metro will handle it properly.
    RNCMaskedView = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module '@react-native-masked-view/masked-view'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
} catch (e) {
// Ignore
}
var isMaskedViewAvailable = _reactnative.UIManager.getViewManagerConfig('RNCMaskedView') != null;
function MaskedView(_param) {
    var children = _param.children, rest = _object_without_properties._(_param, [
        "children"
    ]);
    if (isMaskedViewAvailable && RNCMaskedView) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(RNCMaskedView, _object_spread_props._(_object_spread._({}, rest), {
            children: children
        }));
    }
    return children;
}


}),
90226: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return MissingIcon;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
function MissingIcon(ref) {
    var color = ref.color, size = ref.size, style = ref.style;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
        style: [
            styles.icon,
            {
                color,
                fontSize: size
            },
            style
        ],
        children: "⏷"
    });
}
var styles = _reactnative.StyleSheet.create({
    icon: {
        backgroundColor: 'transparent'
    }
});


}),
9735: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return PlatformPressable;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_without_properties = __webpack_require__(86136);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var AnimatedPressable = _reactnative.Animated.createAnimatedComponent(_reactnative.Pressable);
var ANDROID_VERSION_LOLLIPOP = 21;
var ANDROID_SUPPORTS_RIPPLE = _reactnative.Platform.OS === 'android' && _reactnative.Platform.Version >= ANDROID_VERSION_LOLLIPOP;
function PlatformPressable(_param) {
    var onPressIn = _param.onPressIn, onPressOut = _param.onPressOut, android_ripple = _param.android_ripple, pressColor = _param.pressColor, _param_pressOpacity = _param.pressOpacity, pressOpacity = _param_pressOpacity === void 0 ? 0.3 : _param_pressOpacity, style = _param.style, rest = _object_without_properties._(_param, [
        "onPressIn",
        "onPressOut",
        "android_ripple",
        "pressColor",
        "pressOpacity",
        "style"
    ]);
    var dark = (0, _native.useTheme)().dark;
    var _React_useState = _sliced_to_array._(_react.useState(()=>new _reactnative.Animated.Value(1)), 1), opacity = _React_useState[0];
    var animateTo = (toValue, duration)=>{
        if (ANDROID_SUPPORTS_RIPPLE) {
            return;
        }
        _reactnative.Animated.timing(opacity, {
            toValue,
            duration,
            easing: _reactnative.Easing.inOut(_reactnative.Easing.quad),
            useNativeDriver: true
        }).start();
    };
    var handlePressIn = (e)=>{
        animateTo(pressOpacity, 0);
        onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);
    };
    var handlePressOut = (e)=>{
        animateTo(1, 200);
        onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedPressable, _object_spread._({
        onPressIn: handlePressIn,
        onPressOut: handlePressOut,
        android_ripple: ANDROID_SUPPORTS_RIPPLE ? _object_spread._({
            color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)'
        }, android_ripple) : undefined,
        style: [
            {
                opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1
            },
            style
        ]
    }, rest));
}


}),
40267: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ResourceSavingScene;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container
function ResourceSavingScene(_param) {
    var visible = _param.visible, children = _param.children, style = _param.style, rest = _object_without_properties._(_param, [
        "visible",
        "children",
        "style"
    ]);
    if (_reactnative.Platform.OS === 'web') {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread_props._(_object_spread._({
            // @ts-expect-error: hidden exists on web, but not in React Native
            hidden: !visible,
            style: [
                {
                    display: visible ? 'flex' : 'none'
                },
                styles.container,
                style
            ],
            pointerEvents: visible ? 'auto' : 'none'
        }, rest), {
            children: children
        }));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: [
            styles.container,
            style
        ],
        // box-none doesn't seem to work properly on Android
        pointerEvents: visible ? 'auto' : 'none',
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
            collapsable: false,
            removeClippedSubviews: // On iOS & macOS, set removeClippedSubviews to true only when not focused
            // This is an workaround for a bug where the clipped view never re-appears
            _reactnative.Platform.OS === 'ios' || _reactnative.Platform.OS === 'macos' ? !visible : true,
            pointerEvents: visible ? 'auto' : 'none',
            style: visible ? styles.attached : styles.detached,
            children: children
        })
    });
}
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1,
        overflow: 'hidden'
    },
    attached: {
        flex: 1
    },
    detached: {
        flex: 1,
        top: FAR_FAR_AWAY
    }
});


}),
94450: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return SafeAreaProviderCompat;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var _reactnativesafeareacontext = __webpack_require__(33481);
var _Dimensions_get = _reactnative.Dimensions.get('window'), _Dimensions_get_width = _Dimensions_get.width, width = _Dimensions_get_width === void 0 ? 0 : _Dimensions_get_width, _Dimensions_get_height = _Dimensions_get.height, height = _Dimensions_get_height === void 0 ? 0 : _Dimensions_get_height;
// To support SSR on web, we need to have empty insets for initial values
// Otherwise there can be mismatch between SSR and client output
// We also need to specify empty values to support tests environments
var initialMetrics = _reactnative.Platform.OS === 'web' || _reactnativesafeareacontext.initialWindowMetrics == null ? {
    frame: {
        x: 0,
        y: 0,
        width,
        height
    },
    insets: {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    }
} : _reactnativesafeareacontext.initialWindowMetrics;
function SafeAreaProviderCompat(ref) {
    var children = ref.children, style = ref.style;
    var insets = _react.useContext(_reactnativesafeareacontext.SafeAreaInsetsContext);
    if (insets) {
        // If we already have insets, don't wrap the stack in another safe area provider
        // This avoids an issue with updates at the cost of potentially incorrect values
        // https://github.com/react-navigation/react-navigation/issues/174
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
            style: [
                styles.container,
                style
            ],
            children: children
        });
    }
    if (_reactnative.Platform.OS === 'web') {
        children = /*#__PURE__*/ (0, _jsxruntime.jsx)(SafeAreaFrameProvider, {
            initialMetrics: initialMetrics,
            children: children
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativesafeareacontext.SafeAreaProvider, {
        initialMetrics: initialMetrics,
        style: style,
        children: children
    });
}
// FIXME: On the Web, the safe area frame value doesn't update on resize
// So we workaround this by measuring the frame on resize
var SafeAreaFrameProvider = (ref)=>{
    var initialMetrics = ref.initialMetrics, children = ref.children;
    var element = _react.useRef(null);
    var _React_useState = _sliced_to_array._(_react.useState(initialMetrics.frame), 2), frame = _React_useState[0], setFrame = _React_useState[1];
    _react.useEffect(()=>{
        if (element.current == null) {
            return;
        }
        var rect = element.current.getBoundingClientRect();
        setFrame({
            x: rect.x,
            y: rect.y,
            width: rect.width,
            height: rect.height
        });
        var timeout;
        var observer = new ResizeObserver((entries)=>{
            var entry = entries[0];
            if (entry) {
                var _entry_contentRect = entry.contentRect, x = _entry_contentRect.x, y = _entry_contentRect.y, width = _entry_contentRect.width, height = _entry_contentRect.height;
                // Debounce the frame updates to avoid too many updates in a short time
                clearTimeout(timeout);
                timeout = setTimeout(()=>{
                    setFrame({
                        x,
                        y,
                        width,
                        height
                    });
                }, 100);
            }
        });
        observer.observe(element.current);
        return ()=>{
            observer.disconnect();
            clearTimeout(timeout);
        };
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnativesafeareacontext.SafeAreaFrameContext.Provider, {
        value: frame,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ref: element,
                style: _object_spread_props._(_object_spread._({}, _reactnative.StyleSheet.absoluteFillObject), {
                    pointerEvents: 'none',
                    visibility: 'hidden'
                })
            }),
            children
        ]
    });
};
SafeAreaProviderCompat.initialMetrics = initialMetrics;
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1
    }
});


}),
35171: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Screen;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var _reactnativesafeareacontext = __webpack_require__(33481);
var _Background = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3992));
var _getDefaultHeaderHeight = /*#__PURE__*/ _interop_require_default._(__webpack_require__(96811));
var _HeaderHeightContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4944));
var _HeaderShownContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57053));
function Screen(props) {
    var dimensions = (0, _reactnativesafeareacontext.useSafeAreaFrame)();
    var insets = (0, _reactnativesafeareacontext.useSafeAreaInsets)();
    var isParentHeaderShown = _react.useContext(_HeaderShownContext.default);
    var parentHeaderHeight = _react.useContext(_HeaderHeightContext.default);
    var focused = props.focused, _props_modal = props.modal, modal = _props_modal === void 0 ? false : _props_modal, header = props.header, _props_headerShown = props.headerShown, headerShown = _props_headerShown === void 0 ? true : _props_headerShown, headerTransparent = props.headerTransparent, _props_headerStatusBarHeight = props.headerStatusBarHeight, headerStatusBarHeight = _props_headerStatusBarHeight === void 0 ? isParentHeaderShown ? 0 : insets.top : _props_headerStatusBarHeight, navigation = props.navigation, route = props.route, children = props.children, style = props.style;
    var _React_useState = _sliced_to_array._(_react.useState(()=>(0, _getDefaultHeaderHeight.default)(dimensions, modal, headerStatusBarHeight)), 2), headerHeight = _React_useState[0], setHeaderHeight = _React_useState[1];
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Background.default, {
        accessibilityElementsHidden: !focused,
        importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
        style: [
            styles.container,
            style
        ],
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: styles.content,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_HeaderShownContext.default.Provider, {
                    value: isParentHeaderShown || headerShown !== false,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_HeaderHeightContext.default.Provider, {
                        value: headerShown ? headerHeight : parentHeaderHeight ?? 0,
                        children: children
                    })
                })
            }),
            headerShown ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_native.NavigationContext.Provider, {
                value: navigation,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_native.NavigationRouteContext.Provider, {
                    value: route,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        onLayout: (e)=>{
                            var height = e.nativeEvent.layout.height;
                            setHeaderHeight(height);
                        },
                        style: headerTransparent ? styles.absolute : null,
                        children: header
                    })
                })
            }) : null
        ]
    });
}
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column-reverse'
    },
    // This is necessary to avoid applying 'column-reverse' to screen content
    content: {
        flex: 1
    },
    absolute: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0
    }
});


}),
31557: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getNamedContext;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var contexts = '__react_navigation__elements_contexts';
// We use a global variable to keep our contexts so that we can reuse same contexts across packages
__webpack_require__.g[contexts] = __webpack_require__.g[contexts] ?? new Map();
function getNamedContext(name, initialValue) {
    var context = __webpack_require__.g[contexts].get(name);
    if (context) {
        return context;
    }
    context = /*#__PURE__*/ _react.createContext(initialValue);
    context.displayName = name;
    __webpack_require__.g[contexts].set(name, context);
    return context;
}


}),
41191: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Assets: function() {
        return Assets;
    },
    Background: function() {
        return _Background.default;
    },
    Header: function() {
        return _Header.default;
    },
    HeaderBackButton: function() {
        return _HeaderBackButton.default;
    },
    HeaderBackContext: function() {
        return _HeaderBackContext.default;
    },
    HeaderBackground: function() {
        return _HeaderBackground.default;
    },
    HeaderHeightContext: function() {
        return _HeaderHeightContext.default;
    },
    HeaderShownContext: function() {
        return _HeaderShownContext.default;
    },
    HeaderTitle: function() {
        return _HeaderTitle.default;
    },
    MissingIcon: function() {
        return _MissingIcon.default;
    },
    PlatformPressable: function() {
        return _PlatformPressable.default;
    },
    ResourceSavingView: function() {
        return _ResourceSavingView.default;
    },
    SafeAreaProviderCompat: function() {
        return _SafeAreaProviderCompat.default;
    },
    Screen: function() {
        return _Screen.default;
    },
    getDefaultHeaderHeight: function() {
        return _getDefaultHeaderHeight.default;
    },
    getHeaderTitle: function() {
        return _getHeaderTitle.default;
    },
    useHeaderHeight: function() {
        return _useHeaderHeight.default;
    }
});
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _Background = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3992));
var _getDefaultHeaderHeight = /*#__PURE__*/ _interop_require_default._(__webpack_require__(96811));
var _getHeaderTitle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51414));
var _Header = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55455));
var _HeaderBackButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(54365));
var _HeaderBackContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34480));
var _HeaderBackground = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70122));
var _HeaderHeightContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4944));
var _HeaderShownContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57053));
var _HeaderTitle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91665));
var _useHeaderHeight = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65633));
var _MissingIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90226));
var _PlatformPressable = /*#__PURE__*/ _interop_require_default._(__webpack_require__(9735));
var _ResourceSavingView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40267));
var _SafeAreaProviderCompat = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94450));
var _Screen = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35171));
_export_star._(__webpack_require__(80638), exports);
var Assets = [
    // eslint-disable-next-line import/no-commonjs
    __webpack_require__(44960),
    // eslint-disable-next-line import/no-commonjs
    __webpack_require__(22683)
];


}),
80638: (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));


}),
18173: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Navigators
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NativeStackView: function() {
        return _NativeStackView.default;
    },
    createNativeStackNavigator: function() {
        return _createNativeStackNavigator.default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _createNativeStackNavigator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74098));
var _NativeStackView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84622));


}),
74098: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _NativeStackView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84622));
function NativeStackNavigator(_param) {
    var id = _param.id, initialRouteName = _param.initialRouteName, children = _param.children, screenListeners = _param.screenListeners, screenOptions = _param.screenOptions, rest = _object_without_properties._(_param, [
        "id",
        "initialRouteName",
        "children",
        "screenListeners",
        "screenOptions"
    ]);
    var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {
        id,
        initialRouteName,
        children,
        screenListeners,
        screenOptions
    }), state = _useNavigationBuilder.state, descriptors = _useNavigationBuilder.descriptors, navigation = _useNavigationBuilder.navigation, NavigationContent = _useNavigationBuilder.NavigationContent;
    _react.useEffect(()=>{
        var // @ts-expect-error: there may not be a tab navigator in parent
        _navigation_addListener;
        return navigation === null || navigation === void 0 ? void 0 : (_navigation_addListener = navigation.addListener) === null || _navigation_addListener === void 0 ? void 0 : _navigation_addListener.call(navigation, 'tabPress', (e)=>{
            var isFocused = navigation.isFocused();
            // Run the operation in the next frame so we're sure all listeners have been run
            // This is necessary to know if preventDefault() has been called
            requestAnimationFrame(()=>{
                if (state.index > 0 && isFocused && !e.defaultPrevented) {
                    // When user taps on already focused tab and we're inside the tab,
                    // reset the stack to replicate native behaviour
                    navigation.dispatch(_object_spread_props._(_object_spread._({}, _native.StackActions.popToTop()), {
                        target: state.key
                    }));
                }
            });
        });
    }, [
        navigation,
        state.index,
        state.key
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationContent, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_NativeStackView.default, _object_spread_props._(_object_spread._({}, rest), {
            state: state,
            navigation: navigation,
            descriptors: descriptors
        }))
    });
}
var _default = (0, _native.createNavigatorFactory)(NativeStackNavigator);


}),
47909: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useInvalidPreventRemoveError;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
function useInvalidPreventRemoveError(state) {
    var _state_routes_find;
    var _React_useState = _sliced_to_array._(_react.useState(null), 2), nextDismissedKey = _React_useState[0], setNextDismissedKey = _React_useState[1];
    var dismissedRouteName = nextDismissedKey ? (_state_routes_find = state.routes.find((route)=>route.key === nextDismissedKey)) === null || _state_routes_find === void 0 ? void 0 : _state_routes_find.name : null;
    _react.useEffect(()=>{
        if (dismissedRouteName) {
            var message = `The screen '${dismissedRouteName}' was removed natively but didn't get removed from JS state. ` + `This can happen if the action was prevented in a 'beforeRemove' listener, which is not fully supported in native-stack.\n\n` + `Consider using a 'usePreventRemove' hook with 'headerBackButtonMenuEnabled: false' to prevent users from natively going back multiple screens.`;
            console.error(message);
        }
    }, [
        dismissedRouteName
    ]);
    return {
        setNextDismissedKey
    };
}


}),
54931: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useInvalidPreventRemoveError;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
function useInvalidPreventRemoveError(descriptors) {
    var _preventedDescriptor_options, _preventedDescriptor_route;
    var preventedRoutes = (0, _native.usePreventRemoveContext)().preventedRoutes;
    var preventedRouteKey = Object.keys(preventedRoutes)[0];
    var preventedDescriptor = descriptors[preventedRouteKey];
    var isHeaderBackButtonMenuEnabledOnPreventedScreen = preventedDescriptor === null || preventedDescriptor === void 0 ? void 0 : (_preventedDescriptor_options = preventedDescriptor.options) === null || _preventedDescriptor_options === void 0 ? void 0 : _preventedDescriptor_options.headerBackButtonMenuEnabled;
    var preventedRouteName = preventedDescriptor === null || preventedDescriptor === void 0 ? void 0 : (_preventedDescriptor_route = preventedDescriptor.route) === null || _preventedDescriptor_route === void 0 ? void 0 : _preventedDescriptor_route.name;
    _react.useEffect(()=>{
        if (preventedRouteKey != null && isHeaderBackButtonMenuEnabledOnPreventedScreen) {
            var message = `The screen ${preventedRouteName} uses 'usePreventRemove' hook alongside 'headerBackButtonMenuEnabled: true', which is not supported. \n\n` + `Consider removing 'headerBackButtonMenuEnabled: true' from ${preventedRouteName} screen to get rid of this error.`;
            console.error(message);
        }
    }, [
        preventedRouteKey,
        isHeaderBackButtonMenuEnabledOnPreventedScreen,
        preventedRouteName
    ]);
}


}),
51981: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var _AppContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(82336));
/**
 * This view must *not* be flattened.
 * See https://github.com/software-mansion/react-native-screens/pull/1825
 * for detailed explanation.
 */ var DebugContainer = (props)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread_props._(_object_spread._({}, props), {
        collapsable: false
    }));
};
if (false) {}
var _default = DebugContainer;


}),
10273: (function (__unused_webpack_module, exports, __webpack_require__) {
// @ts-ignore: No declaration available
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "processFonts", ({
    enumerable: true,
    get: function() {
        return processFonts;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _ReactNativeStyleAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(38959));
function processFonts(fontFamilies) {
    var _ReactNativeStyleAttributes_fontFamily;
    // @ts-ignore: React Native types are incorrect here and don't consider fontFamily a style value
    var fontFamilyProcessor = (_ReactNativeStyleAttributes_fontFamily = _ReactNativeStyleAttributes.default.fontFamily) === null || _ReactNativeStyleAttributes_fontFamily === void 0 ? void 0 : _ReactNativeStyleAttributes_fontFamily.process;
    if (typeof fontFamilyProcessor === 'function') {
        return fontFamilies.map(fontFamilyProcessor);
    }
    return fontFamilies;
}


}),
19228: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeaderConfig;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _elements = __webpack_require__(41191);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var _reactnativescreens = __webpack_require__(47743);
var _FontProcessor = __webpack_require__(10273);
function HeaderConfig(ref) {
    var headerBackImageSource = ref.headerBackImageSource, headerBackButtonMenuEnabled = ref.headerBackButtonMenuEnabled, headerBackTitle = ref.headerBackTitle, headerBackTitleStyle = ref.headerBackTitleStyle, _ref_headerBackTitleVisible = ref.headerBackTitleVisible, headerBackTitleVisible = _ref_headerBackTitleVisible === void 0 ? true : _ref_headerBackTitleVisible, headerBackVisible = ref.headerBackVisible, headerShadowVisible = ref.headerShadowVisible, headerLargeStyle = ref.headerLargeStyle, headerLargeTitle = ref.headerLargeTitle, headerLargeTitleShadowVisible = ref.headerLargeTitleShadowVisible, headerLargeTitleStyle = ref.headerLargeTitleStyle, headerBackground = ref.headerBackground, headerLeft = ref.headerLeft, headerRight = ref.headerRight, headerShown = ref.headerShown, headerStyle = ref.headerStyle, headerBlurEffect = ref.headerBlurEffect, headerTintColor = ref.headerTintColor, headerTitle = ref.headerTitle, headerTitleAlign = ref.headerTitleAlign, headerTitleStyle = ref.headerTitleStyle, headerTransparent = ref.headerTransparent, headerSearchBarOptions = ref.headerSearchBarOptions, headerTopInsetEnabled = ref.headerTopInsetEnabled, route = ref.route, title = ref.title, canGoBack = ref.canGoBack;
    var colors = (0, _native.useTheme)().colors;
    var tintColor = headerTintColor ?? (_reactnative.Platform.OS === 'ios' ? colors.primary : colors.text);
    var headerBackTitleStyleFlattened = _reactnative.StyleSheet.flatten(headerBackTitleStyle) || {};
    var headerLargeTitleStyleFlattened = _reactnative.StyleSheet.flatten(headerLargeTitleStyle) || {};
    var headerTitleStyleFlattened = _reactnative.StyleSheet.flatten(headerTitleStyle) || {};
    var headerStyleFlattened = _reactnative.StyleSheet.flatten(headerStyle) || {};
    var headerLargeStyleFlattened = _reactnative.StyleSheet.flatten(headerLargeStyle) || {};
    var _processFonts = _sliced_to_array._((0, _FontProcessor.processFonts)([
        headerBackTitleStyleFlattened.fontFamily,
        headerLargeTitleStyleFlattened.fontFamily,
        headerTitleStyleFlattened.fontFamily
    ]), 3), backTitleFontFamily = _processFonts[0], largeTitleFontFamily = _processFonts[1], titleFontFamily = _processFonts[2];
    var titleText = (0, _elements.getHeaderTitle)({
        title,
        headerTitle
    }, route.name);
    var titleColor = headerTitleStyleFlattened.color ?? headerTintColor ?? colors.text;
    var titleFontSize = headerTitleStyleFlattened.fontSize;
    var titleFontWeight = headerTitleStyleFlattened.fontWeight;
    var headerTitleStyleSupported = {
        color: titleColor
    };
    if (headerTitleStyleFlattened.fontFamily != null) {
        headerTitleStyleSupported.fontFamily = headerTitleStyleFlattened.fontFamily;
    }
    if (titleFontSize != null) {
        headerTitleStyleSupported.fontSize = titleFontSize;
    }
    if (titleFontWeight != null) {
        headerTitleStyleSupported.fontWeight = titleFontWeight;
    }
    var headerLeftElement = headerLeft === null || headerLeft === void 0 ? void 0 : headerLeft({
        tintColor,
        canGoBack,
        label: headerBackTitle
    });
    var headerRightElement = headerRight === null || headerRight === void 0 ? void 0 : headerRight({
        tintColor,
        canGoBack
    });
    var headerTitleElement = typeof headerTitle === 'function' ? headerTitle({
        tintColor,
        children: titleText
    }) : null;
    var supportsHeaderSearchBar = typeof _reactnativescreens.isSearchBarAvailableForCurrentPlatform === 'boolean' ? _reactnativescreens.isSearchBarAvailableForCurrentPlatform : _reactnative.Platform.OS === 'ios' && _reactnativescreens.SearchBar != null;
    var hasHeaderSearchBar = supportsHeaderSearchBar && headerSearchBarOptions != null;
    if (headerSearchBarOptions != null && !supportsHeaderSearchBar) {
        throw new Error(`The current version of 'react-native-screens' doesn't support SearchBar in the header. Please update to the latest version to use this option.`);
    }
    /**
   * We need to set this in if:
   * - Back button should stay visible when `headerLeft` is specified
   * - If `headerTitle` for Android is specified, so we only need to remove the title and keep the back button
   */ var backButtonInCustomView = headerBackVisible ? headerLeftElement != null : _reactnative.Platform.OS === 'android' && headerTitleElement != null;
    var translucent = headerBackground != null || headerTransparent || // When using a SearchBar or large title, the header needs to be translucent for it to work on iOS
    (hasHeaderSearchBar || headerLargeTitle) && _reactnative.Platform.OS === 'ios' && headerTransparent !== false;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnativescreens.ScreenStackHeaderConfig, {
        backButtonInCustomView: backButtonInCustomView,
        backgroundColor: headerStyleFlattened.backgroundColor ?? (headerBackground != null || headerTransparent ? 'transparent' : colors.card),
        backTitle: _reactnativescreens.isNewBackTitleImplementation || headerBackTitleVisible ? headerBackTitle : ' ',
        backTitleVisible: headerBackTitleVisible,
        backTitleFontFamily: backTitleFontFamily,
        backTitleFontSize: headerBackTitleStyleFlattened.fontSize,
        blurEffect: headerBlurEffect,
        color: tintColor,
        direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr',
        disableBackButtonMenu: headerBackButtonMenuEnabled === false,
        hidden: headerShown === false,
        hideBackButton: headerBackVisible === false,
        hideShadow: headerShadowVisible === false || headerBackground != null || headerTransparent && headerShadowVisible !== true,
        largeTitle: headerLargeTitle,
        largeTitleBackgroundColor: headerLargeStyleFlattened.backgroundColor,
        largeTitleColor: headerLargeTitleStyleFlattened.color,
        largeTitleFontFamily: largeTitleFontFamily,
        largeTitleFontSize: headerLargeTitleStyleFlattened.fontSize,
        largeTitleFontWeight: headerLargeTitleStyleFlattened.fontWeight,
        largeTitleHideShadow: headerLargeTitleShadowVisible === false,
        title: titleText,
        titleColor: titleColor,
        titleFontFamily: titleFontFamily,
        titleFontSize: titleFontSize,
        titleFontWeight: titleFontWeight,
        topInsetEnabled: headerTopInsetEnabled,
        translucent: // This defaults to `true`, so we can't pass `undefined`
        translucent === true,
        children: [
            _reactnative.Platform.OS === 'ios' ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    headerLeftElement != null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStackHeaderLeftView, {
                        children: headerLeftElement
                    }) : null,
                    headerTitleElement != null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStackHeaderCenterView, {
                        children: headerTitleElement
                    }) : null
                ]
            }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    headerLeftElement != null || typeof headerTitle === 'function' ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStackHeaderLeftView, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                            style: styles.row,
                            children: [
                                headerLeftElement,
                                headerTitleAlign !== 'center' ? typeof headerTitle === 'function' ? headerTitleElement : /*#__PURE__*/ (0, _jsxruntime.jsx)(_elements.HeaderTitle, {
                                    tintColor: tintColor,
                                    style: headerTitleStyleSupported,
                                    children: titleText
                                }) : null
                            ]
                        })
                    }) : null,
                    headerTitleAlign === 'center' ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStackHeaderCenterView, {
                        children: typeof headerTitle === 'function' ? headerTitleElement : /*#__PURE__*/ (0, _jsxruntime.jsx)(_elements.HeaderTitle, {
                            tintColor: tintColor,
                            style: headerTitleStyleSupported,
                            children: titleText
                        })
                    }) : null
                ]
            }),
            headerBackImageSource !== undefined ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStackHeaderBackButtonImage, {
                source: headerBackImageSource
            }) : null,
            headerRightElement != null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStackHeaderRightView, {
                children: headerRightElement
            }) : null,
            hasHeaderSearchBar ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStackHeaderSearchBarView, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.SearchBar, _object_spread._({}, headerSearchBarOptions))
            }) : null
        ]
    });
}
var styles = _reactnative.StyleSheet.create({
    row: {
        flexDirection: 'row',
        alignItems: 'center'
    }
});


}),
84622: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return NativeStackView;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _elements = __webpack_require__(41191);
var _native = __webpack_require__(14097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43348));
var _reactnative = __webpack_require__(56300);
var _reactnativesafeareacontext = __webpack_require__(33481);
var _reactnativescreens = __webpack_require__(47743);
var _warnonce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12602));
var _useDismissedRouteError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47909));
var _useInvalidPreventRemoveError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(54931));
var _DebugContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51981));
var _HeaderConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19228));
var isAndroid = _reactnative.Platform.OS === 'android';
var MaybeNestedStack = (ref)=>{
    var options = ref.options, route = ref.route, presentation = ref.presentation, headerHeight = ref.headerHeight, headerTopInsetEnabled = ref.headerTopInsetEnabled, children = ref.children;
    var colors = (0, _native.useTheme)().colors;
    var header = options.header, _options_headerShown = options.headerShown, headerShown = _options_headerShown === void 0 ? true : _options_headerShown, contentStyle = options.contentStyle;
    var isHeaderInModal = isAndroid ? false : presentation !== 'card' && headerShown === true && header === undefined;
    var headerShownPreviousRef = _react.useRef(headerShown);
    _react.useEffect(()=>{
        (0, _warnonce.default)(!isAndroid && presentation !== 'card' && headerShownPreviousRef.current !== headerShown, `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`);
        headerShownPreviousRef.current = headerShown;
    }, [
        headerShown,
        presentation,
        route.name
    ]);
    var content = /*#__PURE__*/ (0, _jsxruntime.jsx)(_DebugContainer.default, {
        style: [
            styles.container,
            presentation !== 'transparentModal' && presentation !== 'containedTransparentModal' && {
                backgroundColor: colors.background
            },
            contentStyle
        ],
        stackPresentation: presentation === 'card' ? 'push' : presentation,
        children: children
    });
    if (isHeaderInModal) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStack, {
            style: styles.container,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnativescreens.Screen, {
                enabled: true,
                isNativeStack: true,
                hasLargeHeader: options.headerLargeTitle ?? false,
                style: _reactnative.StyleSheet.absoluteFill,
                children: [
                    content,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_HeaderConfig.default, _object_spread_props._(_object_spread._({}, options), {
                        route: route,
                        headerHeight: headerHeight,
                        headerTopInsetEnabled: headerTopInsetEnabled,
                        canGoBack: true
                    }))
                ]
            })
        });
    }
    return content;
};
var SceneView = (ref)=>{
    var index = ref.index, focused = ref.focused, descriptor = ref.descriptor, previousDescriptor = ref.previousDescriptor, nextDescriptor = ref.nextDescriptor, onWillDisappear = ref.onWillDisappear, onWillAppear = ref.onWillAppear, onAppear = ref.onAppear, onDisappear = ref.onDisappear, onDismissed = ref.onDismissed, onHeaderBackButtonClicked = ref.onHeaderBackButtonClicked, onNativeDismissCancelled = ref.onNativeDismissCancelled, onGestureCancel = ref.onGestureCancel;
    var _preventedRoutes_route_key;
    var route = descriptor.route, navigation = descriptor.navigation, options = descriptor.options, render = descriptor.render;
    var animationDuration = options.animationDuration, _options_animationTypeForReplace = options.animationTypeForReplace, animationTypeForReplace = _options_animationTypeForReplace === void 0 ? 'push' : _options_animationTypeForReplace, _options_fullScreenGestureShadowEnabled = options.fullScreenGestureShadowEnabled, fullScreenGestureShadowEnabled = _options_fullScreenGestureShadowEnabled === void 0 ? false : _options_fullScreenGestureShadowEnabled, gestureEnabled = options.gestureEnabled, gestureResponseDistance = options.gestureResponseDistance, header = options.header, headerBackButtonMenuEnabled = options.headerBackButtonMenuEnabled, headerShown = options.headerShown, headerBackground = options.headerBackground, headerTransparent = options.headerTransparent, autoHideHomeIndicator = options.autoHideHomeIndicator, keyboardHandlingEnabled = options.keyboardHandlingEnabled, navigationBarColor = options.navigationBarColor, navigationBarHidden = options.navigationBarHidden, orientation = options.orientation, _options_sheetAllowedDetents = options.sheetAllowedDetents, sheetAllowedDetents = _options_sheetAllowedDetents === void 0 ? 'large' : _options_sheetAllowedDetents, _options_sheetLargestUndimmedDetent = options.sheetLargestUndimmedDetent, sheetLargestUndimmedDetent = _options_sheetLargestUndimmedDetent === void 0 ? 'all' : _options_sheetLargestUndimmedDetent, _options_sheetGrabberVisible = options.sheetGrabberVisible, sheetGrabberVisible = _options_sheetGrabberVisible === void 0 ? false : _options_sheetGrabberVisible, _options_sheetCornerRadius = options.sheetCornerRadius, sheetCornerRadius = _options_sheetCornerRadius === void 0 ? -1.0 : _options_sheetCornerRadius, _options_sheetExpandsWhenScrolledToEdge = options.sheetExpandsWhenScrolledToEdge, sheetExpandsWhenScrolledToEdge = _options_sheetExpandsWhenScrolledToEdge === void 0 ? true : _options_sheetExpandsWhenScrolledToEdge, statusBarAnimation = options.statusBarAnimation, statusBarHidden = options.statusBarHidden, statusBarStyle = options.statusBarStyle, statusBarTranslucent = options.statusBarTranslucent, statusBarColor = options.statusBarColor, freezeOnBlur = options.freezeOnBlur;
    var animation = options.animation, customAnimationOnGesture = options.customAnimationOnGesture, fullScreenGestureEnabled = options.fullScreenGestureEnabled, _options_presentation = options.presentation, presentation = _options_presentation === void 0 ? 'card' : _options_presentation, _options_gestureDirection = options.gestureDirection, gestureDirection = _options_gestureDirection === void 0 ? presentation === 'card' ? 'horizontal' : 'vertical' : _options_gestureDirection;
    if (gestureDirection === 'vertical' && _reactnative.Platform.OS === 'ios') {
        // for `vertical` direction to work, we need to set `fullScreenGestureEnabled` to `true`
        // so the screen can be dismissed from any point on screen.
        // `customAnimationOnGesture` needs to be set to `true` so the `animation` set by user can be used,
        // otherwise `simple_push` will be used.
        // Also, the default animation for this direction seems to be `slide_from_bottom`.
        if (fullScreenGestureEnabled === undefined) {
            fullScreenGestureEnabled = true;
        }
        if (customAnimationOnGesture === undefined) {
            customAnimationOnGesture = true;
        }
        if (animation === undefined) {
            animation = 'slide_from_bottom';
        }
    }
    // workaround for rn-screens where gestureDirection has to be set on both
    // current and previous screen - software-mansion/react-native-screens/pull/1509
    var nextGestureDirection = nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.gestureDirection;
    var gestureDirectionOverride = nextGestureDirection != null ? nextGestureDirection : gestureDirection;
    if (index === 0) {
        // first screen should always be treated as `card`, it resolves problems with no header animation
        // for navigator with first screen as `modal` and the next as `card`
        presentation = 'card';
    }
    var insets = (0, _reactnativesafeareacontext.useSafeAreaInsets)();
    var frame = (0, _reactnativesafeareacontext.useSafeAreaFrame)();
    // `modal` and `formSheet` presentations do not take whole screen, so should not take the inset.
    var isModal = presentation === 'modal' || presentation === 'formSheet';
    // Modals are fullscreen in landscape only on iPhone
    var isIPhone = _reactnative.Platform.OS === 'ios' && !(_reactnative.Platform.isPad || _reactnative.Platform.isTV);
    var isLandscape = frame.width > frame.height;
    var isParentHeaderShown = _react.useContext(_elements.HeaderShownContext);
    var parentHeaderHeight = _react.useContext(_elements.HeaderHeightContext);
    var parentHeaderBack = _react.useContext(_elements.HeaderBackContext);
    var topInset = isParentHeaderShown || _reactnative.Platform.OS === 'ios' && isModal || isIPhone && isLandscape ? 0 : insets.top;
    // On models with Dynamic Island the status bar height is smaller than the safe area top inset.
    var hasDynamicIsland = _reactnative.Platform.OS === 'ios' && topInset > 50;
    var statusBarHeight = hasDynamicIsland ? topInset - 5 : topInset;
    var preventedRoutes = (0, _native.usePreventRemoveContext)().preventedRoutes;
    var defaultHeaderHeight = (0, _elements.getDefaultHeaderHeight)(frame, isModal, statusBarHeight);
    var _React_useState = _sliced_to_array._(_react.useState(defaultHeaderHeight), 2), customHeaderHeight = _React_useState[0], setCustomHeaderHeight = _React_useState[1];
    // During the very first render topInset is > 0 when running
    // in non edge-to-edge mode on Android, while on every consecutive render
    // topInset === 0, causing header content to jump, as we add padding on the first frame,
    // just to remove it in next one. To prevent this, when statusBarTranslucent is set,
    // we apply additional padding in header only if its true.
    // For more details see: https://github.com/react-navigation/react-navigation/pull/12014
    var headerTopInsetEnabled = typeof statusBarTranslucent === 'boolean' ? statusBarTranslucent : topInset !== 0;
    var headerHeight = header ? customHeaderHeight : defaultHeaderHeight;
    var headerBack = previousDescriptor ? {
        title: (0, _elements.getHeaderTitle)(previousDescriptor.options, previousDescriptor.route.name)
    } : parentHeaderBack;
    var isRemovePrevented = (_preventedRoutes_route_key = preventedRoutes[route.key]) === null || _preventedRoutes_route_key === void 0 ? void 0 : _preventedRoutes_route_key.preventRemove;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.Screen, {
        enabled: true,
        isNativeStack: true,
        style: _reactnative.StyleSheet.absoluteFill,
        hasLargeHeader: options.headerLargeTitle ?? false,
        customAnimationOnSwipe: customAnimationOnGesture,
        fullScreenSwipeEnabled: fullScreenGestureEnabled,
        // @ts-expect-error prop supported from react-native-screens 3.33.0 onwards
        fullScreenSwipeShadowEnabled: fullScreenGestureShadowEnabled,
        gestureEnabled: isAndroid ? // Since we handle them in JS side, we disable this
        false : gestureEnabled,
        homeIndicatorHidden: autoHideHomeIndicator,
        hideKeyboardOnSwipe: keyboardHandlingEnabled,
        navigationBarColor: navigationBarColor,
        navigationBarHidden: navigationBarHidden,
        replaceAnimation: animationTypeForReplace,
        stackPresentation: presentation === 'card' ? 'push' : presentation,
        stackAnimation: animation,
        screenOrientation: orientation,
        sheetAllowedDetents: sheetAllowedDetents,
        sheetLargestUndimmedDetent: sheetLargestUndimmedDetent,
        sheetGrabberVisible: sheetGrabberVisible,
        sheetCornerRadius: sheetCornerRadius,
        sheetExpandsWhenScrolledToEdge: sheetExpandsWhenScrolledToEdge,
        statusBarAnimation: statusBarAnimation,
        statusBarHidden: statusBarHidden,
        statusBarStyle: statusBarStyle,
        statusBarColor: statusBarColor,
        statusBarTranslucent: statusBarTranslucent,
        swipeDirection: gestureDirectionOverride,
        transitionDuration: animationDuration,
        onWillDisappear: onWillDisappear,
        onWillAppear: onWillAppear,
        onAppear: onAppear,
        onDisappear: onDisappear,
        onDismissed: onDismissed,
        onGestureCancel: onGestureCancel,
        gestureResponseDistance: gestureResponseDistance,
        nativeBackButtonDismissalEnabled: false,
        onHeaderBackButtonClicked: onHeaderBackButtonClicked,
        // @ts-ignore props not exported from rn-screens
        preventNativeDismiss: isRemovePrevented,
        onNativeDismissCancelled: onNativeDismissCancelled,
        // this prop is available since rn-screens 3.16
        freezeOnBlur: freezeOnBlur,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_native.NavigationContext.Provider, {
            value: navigation,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_native.NavigationRouteContext.Provider, {
                value: route,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_elements.HeaderShownContext.Provider, {
                    value: isParentHeaderShown || headerShown !== false,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_elements.HeaderHeightContext.Provider, {
                        value: headerShown !== false ? headerHeight : parentHeaderHeight ?? 0,
                        children: [
                            headerBackground != null ? /**
                 * To show a custom header background, we render it at the top of the screen below the header
                 * The header also needs to be positioned absolutely (with `translucent` style)
                 */ /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                style: [
                                    styles.background,
                                    headerTransparent ? styles.translucent : null,
                                    {
                                        height: headerHeight
                                    }
                                ],
                                children: headerBackground()
                            }) : null,
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                                accessibilityElementsHidden: !focused,
                                importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
                                style: styles.scene,
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(MaybeNestedStack, {
                                        options: options,
                                        route: route,
                                        presentation: presentation,
                                        headerHeight: headerHeight,
                                        headerTopInsetEnabled: headerTopInsetEnabled,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_elements.HeaderBackContext.Provider, {
                                            value: headerBack,
                                            children: render()
                                        })
                                    }),
                                    header !== undefined && headerShown !== false ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                        onLayout: (e)=>{
                                            setCustomHeaderHeight(e.nativeEvent.layout.height);
                                        },
                                        style: headerTransparent ? styles.absolute : null,
                                        children: header({
                                            back: headerBack,
                                            options,
                                            route,
                                            navigation
                                        })
                                    }) : null
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_HeaderConfig.default, _object_spread_props._(_object_spread._({}, options), {
                                route: route,
                                headerBackButtonMenuEnabled: isRemovePrevented !== undefined ? !isRemovePrevented : headerBackButtonMenuEnabled,
                                headerShown: header !== undefined ? false : headerShown,
                                headerHeight: headerHeight,
                                headerBackTitle: options.headerBackTitle !== undefined ? options.headerBackTitle : undefined,
                                headerTopInsetEnabled: headerTopInsetEnabled,
                                canGoBack: headerBack !== undefined
                            }))
                        ]
                    })
                })
            })
        })
    }, route.key);
};
function NativeStackViewInner(ref) {
    var state = ref.state, navigation = ref.navigation, descriptors = ref.descriptors;
    var setNextDismissedKey = (0, _useDismissedRouteError.default)(state).setNextDismissedKey;
    (0, _useInvalidPreventRemoveError.default)(descriptors);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativescreens.ScreenStack, {
        style: styles.container,
        children: state.routes.map((route, index)=>{
            var _state_routes_, _state_routes_1;
            var descriptor = descriptors[route.key];
            var isFocused = state.index === index;
            var previousKey = (_state_routes_ = state.routes[index - 1]) === null || _state_routes_ === void 0 ? void 0 : _state_routes_.key;
            var nextKey = (_state_routes_1 = state.routes[index + 1]) === null || _state_routes_1 === void 0 ? void 0 : _state_routes_1.key;
            var previousDescriptor = previousKey ? descriptors[previousKey] : undefined;
            var nextDescriptor = nextKey ? descriptors[nextKey] : undefined;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(SceneView, {
                index: index,
                focused: isFocused,
                descriptor: descriptor,
                previousDescriptor: previousDescriptor,
                nextDescriptor: nextDescriptor,
                onWillDisappear: ()=>{
                    navigation.emit({
                        type: 'transitionStart',
                        data: {
                            closing: true
                        },
                        target: route.key
                    });
                },
                onWillAppear: ()=>{
                    navigation.emit({
                        type: 'transitionStart',
                        data: {
                            closing: false
                        },
                        target: route.key
                    });
                },
                onAppear: ()=>{
                    navigation.emit({
                        type: 'transitionEnd',
                        data: {
                            closing: false
                        },
                        target: route.key
                    });
                },
                onDisappear: ()=>{
                    navigation.emit({
                        type: 'transitionEnd',
                        data: {
                            closing: true
                        },
                        target: route.key
                    });
                },
                onDismissed: (event)=>{
                    navigation.dispatch(_object_spread_props._(_object_spread._({}, _native.StackActions.pop(event.nativeEvent.dismissCount)), {
                        source: route.key,
                        target: state.key
                    }));
                    setNextDismissedKey(route.key);
                },
                onHeaderBackButtonClicked: ()=>{
                    navigation.dispatch(_object_spread_props._(_object_spread._({}, _native.StackActions.pop()), {
                        source: route.key,
                        target: state.key
                    }));
                },
                onNativeDismissCancelled: (event)=>{
                    navigation.dispatch(_object_spread_props._(_object_spread._({}, _native.StackActions.pop(event.nativeEvent.dismissCount)), {
                        source: route.key,
                        target: state.key
                    }));
                },
                onGestureCancel: ()=>{
                    navigation.emit({
                        type: 'gestureCancel',
                        target: route.key
                    });
                }
            }, route.key);
        })
    });
}
function NativeStackView(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_elements.SafeAreaProviderCompat, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeStackViewInner, _object_spread._({}, props))
    });
}
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1
    },
    scene: {
        flex: 1,
        flexDirection: 'column-reverse'
    },
    absolute: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0
    },
    translucent: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        zIndex: 1,
        elevation: 1
    },
    background: {
        overflow: 'hidden'
    }
});


}),
22683: (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetSourceResolver = __webpack_require__(53464);
var resolver = new AssetSourceResolver(undefined, undefined, {"name":"back-icon-mask-2c95e8c2","type":"png","httpServerLocation":"https://raw.githubusercontent.com/nguyenhoangtu0394/host/refs/heads/main/claim/android/remote-assets/assets","scales":[1],"height":85,"width":50});

module.exports = resolver.scaledAssetPath();

}),
44960: (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetSourceResolver = __webpack_require__(53464);
var resolver = new AssetSourceResolver(undefined, undefined, {"name":"back-icon-84cf5eb3","type":"png","httpServerLocation":"https://raw.githubusercontent.com/nguyenhoangtu0394/host/refs/heads/main/claim/android/remote-assets/assets","scales":[1,1.5,2,3,4],"height":24,"width":24});

module.exports = resolver.scaledAssetPath();

}),

}]);//# sourceMappingURL=vendors-node_modules_react-navigation_native-stack_src_index_tsx.chunk.bundle.map?platform=android